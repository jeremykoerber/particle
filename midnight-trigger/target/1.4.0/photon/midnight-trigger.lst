
/Users/jeremykoerber/code/particle/midnight-trigger/target/1.4.0/photon/midnight-trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d94  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1db0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  20000000  080a1db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005d4  200000b8  200000b8  000300b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1e6c  080a1e6c  00021e6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1e94  080a1e94  00021e94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00085a0b  00000000  00000000  00021e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c04c  00000000  00000000  000a78a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e737  00000000  00000000  000b38ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000017f0  00000000  00000000  000c2026  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002778  00000000  00000000  000c3816  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020362  00000000  00000000  000c5f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b71e  00000000  00000000  000e62f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a339f  00000000  00000000  00101a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a5cc  00000000  00000000  001a4db0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f895 	bl	80a115c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f89a 	bl	80a1172 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1db4 	.word	0x080a1db4
 80a004c:	200000b8 	.word	0x200000b8
 80a0050:	200000b8 	.word	0x200000b8
 80a0054:	2000068c 	.word	0x2000068c
 80a0058:	2000068c 	.word	0x2000068c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fdc1 	bl	80a0be4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1d74 	.word	0x080a1d74
 80a0084:	080a1da8 	.word	0x080a1da8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b811 	b.w	80a00ae <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f80f 	bl	80a00b0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bd67 	b.w	80a0b68 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b983 	b.w	80a03a4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
#include "Particle.h"

int last_day = Time.day(); // just initializing the variable so we can use it in the loop without resetting it every time the loop repeats
bool new_day = false; // a boolean we can flip to true if it's a new day

void setup() {
 80a00ae:	4770      	bx	lr

080a00b0 <loop>:
}


void loop() {
 80a00b0:	b538      	push	{r3, r4, r5, lr}
  int day = Time.day(); // an integer to tell us what day of the month it is currently
 80a00b2:	f000 fb67 	bl	80a0784 <_ZN9TimeClass3dayEv>
  if (day > last_day)
 80a00b6:	4d09      	ldr	r5, [pc, #36]	; (80a00dc <loop+0x2c>)
 80a00b8:	4c09      	ldr	r4, [pc, #36]	; (80a00e0 <loop+0x30>)
 80a00ba:	682b      	ldr	r3, [r5, #0]
 80a00bc:	4298      	cmp	r0, r3
 80a00be:	dd04      	ble.n	80a00ca <loop+0x1a>
  {
    new_day = true; // it's a new dawn, it's a new day.
 80a00c0:	2301      	movs	r3, #1
 80a00c2:	7023      	strb	r3, [r4, #0]
    last_day = Time.day(); // update last_day to today's date
 80a00c4:	f000 fb5e 	bl	80a0784 <_ZN9TimeClass3dayEv>
 80a00c8:	6028      	str	r0, [r5, #0]
  }
  if (new_day == true)
 80a00ca:	7823      	ldrb	r3, [r4, #0]
 80a00cc:	b123      	cbz	r3, 80a00d8 <loop+0x28>
  {
    // do your stuff here that you want to run every time the day of month is incremented and then wait an hour
    delay(3600000); // 1 hour delay in ms
  }
 80a00ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    last_day = Time.day(); // update last_day to today's date
  }
  if (new_day == true)
  {
    // do your stuff here that you want to run every time the day of month is incremented and then wait an hour
    delay(3600000); // 1 hour delay in ms
 80a00d2:	4804      	ldr	r0, [pc, #16]	; (80a00e4 <loop+0x34>)
 80a00d4:	f000 b97e 	b.w	80a03d4 <delay>
 80a00d8:	bd38      	pop	{r3, r4, r5, pc}
 80a00da:	bf00      	nop
 80a00dc:	200000c0 	.word	0x200000c0
 80a00e0:	200000bc 	.word	0x200000bc
 80a00e4:	0036ee80 	.word	0x0036ee80

080a00e8 <_GLOBAL__sub_I_last_day>:
  }
 80a00e8:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00ea:	f000 f82f 	bl	80a014c <HAL_Pin_Map>
 * Date:
 */

#include "Particle.h"

int last_day = Time.day(); // just initializing the variable so we can use it in the loop without resetting it every time the loop repeats
 80a00ee:	f000 fb49 	bl	80a0784 <_ZN9TimeClass3dayEv>
 80a00f2:	4b01      	ldr	r3, [pc, #4]	; (80a00f8 <_GLOBAL__sub_I_last_day+0x10>)
 80a00f4:	6018      	str	r0, [r3, #0]
 80a00f6:	bd08      	pop	{r3, pc}
 80a00f8:	200000c0 	.word	0x200000c0

080a00fc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a00fc:	b508      	push	{r3, lr}
 80a00fe:	4b02      	ldr	r3, [pc, #8]	; (80a0108 <os_mutex_create+0xc>)
 80a0100:	681b      	ldr	r3, [r3, #0]
 80a0102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0104:	9301      	str	r3, [sp, #4]
 80a0106:	bd08      	pop	{r3, pc}
 80a0108:	080601d0 	.word	0x080601d0

080a010c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a010c:	b508      	push	{r3, lr}
 80a010e:	4b02      	ldr	r3, [pc, #8]	; (80a0118 <HAL_RNG_GetRandomNumber+0xc>)
 80a0110:	681b      	ldr	r3, [r3, #0]
 80a0112:	685b      	ldr	r3, [r3, #4]
 80a0114:	9301      	str	r3, [sp, #4]
 80a0116:	bd08      	pop	{r3, pc}
 80a0118:	0806019c 	.word	0x0806019c

080a011c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a011c:	b508      	push	{r3, lr}
 80a011e:	4b02      	ldr	r3, [pc, #8]	; (80a0128 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0120:	681b      	ldr	r3, [r3, #0]
 80a0122:	695b      	ldr	r3, [r3, #20]
 80a0124:	9301      	str	r3, [sp, #4]
 80a0126:	bd08      	pop	{r3, pc}
 80a0128:	0806019c 	.word	0x0806019c

080a012c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a012c:	b508      	push	{r3, lr}
 80a012e:	4b02      	ldr	r3, [pc, #8]	; (80a0138 <HAL_RTC_Get_UnixTime+0xc>)
 80a0130:	681b      	ldr	r3, [r3, #0]
 80a0132:	69db      	ldr	r3, [r3, #28]
 80a0134:	9301      	str	r3, [sp, #4]
 80a0136:	bd08      	pop	{r3, pc}
 80a0138:	0806019c 	.word	0x0806019c

080a013c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a013c:	b508      	push	{r3, lr}
 80a013e:	4b02      	ldr	r3, [pc, #8]	; (80a0148 <HAL_RTC_Time_Is_Valid+0xc>)
 80a0140:	681b      	ldr	r3, [r3, #0]
 80a0142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0144:	9301      	str	r3, [sp, #4]
 80a0146:	bd08      	pop	{r3, pc}
 80a0148:	0806019c 	.word	0x0806019c

080a014c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a014c:	b508      	push	{r3, lr}
 80a014e:	4b02      	ldr	r3, [pc, #8]	; (80a0158 <HAL_Pin_Map+0xc>)
 80a0150:	681b      	ldr	r3, [r3, #0]
 80a0152:	681b      	ldr	r3, [r3, #0]
 80a0154:	9301      	str	r3, [sp, #4]
 80a0156:	bd08      	pop	{r3, pc}
 80a0158:	080601b0 	.word	0x080601b0

080a015c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a015c:	b508      	push	{r3, lr}
 80a015e:	4b02      	ldr	r3, [pc, #8]	; (80a0168 <HAL_SPI_Init+0xc>)
 80a0160:	681b      	ldr	r3, [r3, #0]
 80a0162:	69db      	ldr	r3, [r3, #28]
 80a0164:	9301      	str	r3, [sp, #4]
 80a0166:	bd08      	pop	{r3, pc}
 80a0168:	080601b4 	.word	0x080601b4

080a016c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a016c:	b508      	push	{r3, lr}
 80a016e:	4b02      	ldr	r3, [pc, #8]	; (80a0178 <HAL_USART_Init+0xc>)
 80a0170:	681b      	ldr	r3, [r3, #0]
 80a0172:	699b      	ldr	r3, [r3, #24]
 80a0174:	9301      	str	r3, [sp, #4]
 80a0176:	bd08      	pop	{r3, pc}
 80a0178:	080601c4 	.word	0x080601c4

080a017c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a017c:	b508      	push	{r3, lr}
 80a017e:	4b02      	ldr	r3, [pc, #8]	; (80a0188 <HAL_USART_Write_Data+0xc>)
 80a0180:	681b      	ldr	r3, [r3, #0]
 80a0182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0184:	9301      	str	r3, [sp, #4]
 80a0186:	bd08      	pop	{r3, pc}
 80a0188:	080601c4 	.word	0x080601c4

080a018c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a018c:	b508      	push	{r3, lr}
 80a018e:	4b02      	ldr	r3, [pc, #8]	; (80a0198 <HAL_USART_Available_Data+0xc>)
 80a0190:	681b      	ldr	r3, [r3, #0]
 80a0192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0194:	9301      	str	r3, [sp, #4]
 80a0196:	bd08      	pop	{r3, pc}
 80a0198:	080601c4 	.word	0x080601c4

080a019c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a019c:	b508      	push	{r3, lr}
 80a019e:	4b02      	ldr	r3, [pc, #8]	; (80a01a8 <HAL_USART_Read_Data+0xc>)
 80a01a0:	681b      	ldr	r3, [r3, #0]
 80a01a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a01a4:	9301      	str	r3, [sp, #4]
 80a01a6:	bd08      	pop	{r3, pc}
 80a01a8:	080601c4 	.word	0x080601c4

080a01ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a01ac:	b508      	push	{r3, lr}
 80a01ae:	4b02      	ldr	r3, [pc, #8]	; (80a01b8 <HAL_USART_Peek_Data+0xc>)
 80a01b0:	681b      	ldr	r3, [r3, #0]
 80a01b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01b4:	9301      	str	r3, [sp, #4]
 80a01b6:	bd08      	pop	{r3, pc}
 80a01b8:	080601c4 	.word	0x080601c4

080a01bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a01bc:	b508      	push	{r3, lr}
 80a01be:	4b02      	ldr	r3, [pc, #8]	; (80a01c8 <HAL_USART_Flush_Data+0xc>)
 80a01c0:	681b      	ldr	r3, [r3, #0]
 80a01c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a01c4:	9301      	str	r3, [sp, #4]
 80a01c6:	bd08      	pop	{r3, pc}
 80a01c8:	080601c4 	.word	0x080601c4

080a01cc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a01cc:	b508      	push	{r3, lr}
 80a01ce:	4b02      	ldr	r3, [pc, #8]	; (80a01d8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a01d0:	681b      	ldr	r3, [r3, #0]
 80a01d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a01d4:	9301      	str	r3, [sp, #4]
 80a01d6:	bd08      	pop	{r3, pc}
 80a01d8:	080601c4 	.word	0x080601c4

080a01dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a01dc:	b508      	push	{r3, lr}
 80a01de:	4b02      	ldr	r3, [pc, #8]	; (80a01e8 <HAL_USB_USART_Init+0xc>)
 80a01e0:	681b      	ldr	r3, [r3, #0]
 80a01e2:	681b      	ldr	r3, [r3, #0]
 80a01e4:	9301      	str	r3, [sp, #4]
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	080601d8 	.word	0x080601d8

080a01ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <HAL_USB_USART_Available_Data+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	691b      	ldr	r3, [r3, #16]
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601d8 	.word	0x080601d8

080a01fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b02      	ldr	r3, [pc, #8]	; (80a0208 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	695b      	ldr	r3, [r3, #20]
 80a0204:	9301      	str	r3, [sp, #4]
 80a0206:	bd08      	pop	{r3, pc}
 80a0208:	080601d8 	.word	0x080601d8

080a020c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <HAL_USB_USART_Receive_Data+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	699b      	ldr	r3, [r3, #24]
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	080601d8 	.word	0x080601d8

080a021c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <HAL_USB_USART_Send_Data+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	69db      	ldr	r3, [r3, #28]
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	080601d8 	.word	0x080601d8

080a022c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <HAL_USB_USART_Flush_Data+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	6a1b      	ldr	r3, [r3, #32]
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	080601d8 	.word	0x080601d8

080a023c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <inet_gethostbyname+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	080601c0 	.word	0x080601c0

080a024c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <system_mode+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	681b      	ldr	r3, [r3, #0]
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	080601a4 	.word	0x080601a4

080a025c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <set_system_mode+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	685b      	ldr	r3, [r3, #4]
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	080601a4 	.word	0x080601a4

080a026c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <system_delay_ms+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	695b      	ldr	r3, [r3, #20]
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	080601a4 	.word	0x080601a4

080a027c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b02      	ldr	r3, [pc, #8]	; (80a0288 <system_thread_get_state+0xc>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0284:	9301      	str	r3, [sp, #4]
 80a0286:	bd08      	pop	{r3, pc}
 80a0288:	080601a4 	.word	0x080601a4

080a028c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b03      	ldr	r3, [pc, #12]	; (80a029c <system_ctrl_set_app_request_handler+0x10>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0296:	9301      	str	r3, [sp, #4]
 80a0298:	bd08      	pop	{r3, pc}
 80a029a:	0000      	.short	0x0000
 80a029c:	080601a4 	.word	0x080601a4

080a02a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b03      	ldr	r3, [pc, #12]	; (80a02b0 <system_ctrl_set_result+0x10>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a02aa:	9301      	str	r3, [sp, #4]
 80a02ac:	bd08      	pop	{r3, pc}
 80a02ae:	0000      	.short	0x0000
 80a02b0:	080601a4 	.word	0x080601a4

080a02b4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <spark_process+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	689b      	ldr	r3, [r3, #8]
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601cc 	.word	0x080601cc

080a02c4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <spark_cloud_flag_connected+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	695b      	ldr	r3, [r3, #20]
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601cc 	.word	0x080601cc

080a02d4 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <spark_sync_time_pending+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601cc 	.word	0x080601cc

080a02e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601cc 	.word	0x080601cc

080a02f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <network_connect+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	685b      	ldr	r3, [r3, #4]
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601c8 	.word	0x080601c8

080a0304 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <network_connecting+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	689b      	ldr	r3, [r3, #8]
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601c8 	.word	0x080601c8

080a0314 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <network_disconnect+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	68db      	ldr	r3, [r3, #12]
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601c8 	.word	0x080601c8

080a0324 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <network_ready+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	691b      	ldr	r3, [r3, #16]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601c8 	.word	0x080601c8

080a0334 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <network_on+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	695b      	ldr	r3, [r3, #20]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601c8 	.word	0x080601c8

080a0344 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <network_off+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	699b      	ldr	r3, [r3, #24]
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601c8 	.word	0x080601c8

080a0354 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <network_listen+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	69db      	ldr	r3, [r3, #28]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601c8 	.word	0x080601c8

080a0364 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <network_listening+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	6a1b      	ldr	r3, [r3, #32]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	080601c8 	.word	0x080601c8

080a0374 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <network_set_listen_timeout+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	080601c8 	.word	0x080601c8

080a0384 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <network_get_listen_timeout+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601c8 	.word	0x080601c8

080a0394 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <malloc+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	681b      	ldr	r3, [r3, #0]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601a0 	.word	0x080601a0

080a03a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <free+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	685b      	ldr	r3, [r3, #4]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601a0 	.word	0x080601a0

080a03b4 <siscanf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <siscanf+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	699b      	ldr	r3, [r3, #24]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601a0 	.word	0x080601a0

080a03c4 <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <_malloc_r+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601a0 	.word	0x080601a0

080a03d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a03d4:	2100      	movs	r1, #0
 80a03d6:	f7ff bf49 	b.w	80a026c <system_delay_ms>

080a03da <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a03da:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a03dc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a03de:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a03e0:	b113      	cbz	r3, 80a03e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a03e2:	2203      	movs	r2, #3
 80a03e4:	4601      	mov	r1, r0
 80a03e6:	4798      	blx	r3
    }
 80a03e8:	4620      	mov	r0, r4
 80a03ea:	bd10      	pop	{r4, pc}

080a03ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a03ec:	4770      	bx	lr

080a03ee <_ZN9IPAddressD0Ev>:
 80a03ee:	b510      	push	{r4, lr}
 80a03f0:	4604      	mov	r4, r0
 80a03f2:	2118      	movs	r1, #24
 80a03f4:	f000 fc61 	bl	80a0cba <_ZdlPvj>
 80a03f8:	4620      	mov	r0, r4
 80a03fa:	bd10      	pop	{r4, pc}

080a03fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a03fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03fe:	460f      	mov	r7, r1
 80a0400:	f100 0608 	add.w	r6, r0, #8
 80a0404:	1d05      	adds	r5, r0, #4
 80a0406:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0408:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a040c:	220a      	movs	r2, #10
 80a040e:	4638      	mov	r0, r7
 80a0410:	f000 f911 	bl	80a0636 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0414:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0416:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0418:	d007      	beq.n	80a042a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a041a:	2c00      	cmp	r4, #0
 80a041c:	d0f4      	beq.n	80a0408 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a041e:	212e      	movs	r1, #46	; 0x2e
 80a0420:	4638      	mov	r0, r7
 80a0422:	f000 f8db 	bl	80a05dc <_ZN5Print5printEc>
 80a0426:	4404      	add	r4, r0
 80a0428:	e7ee      	b.n	80a0408 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a042a:	4620      	mov	r0, r4
 80a042c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0430 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0430:	b510      	push	{r4, lr}
 80a0432:	4604      	mov	r4, r0
 80a0434:	4b04      	ldr	r3, [pc, #16]	; (80a0448 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0436:	2211      	movs	r2, #17
 80a0438:	f840 3b04 	str.w	r3, [r0], #4
 80a043c:	2100      	movs	r1, #0
 80a043e:	f000 fe98 	bl	80a1172 <memset>
{
    clear();
}
 80a0442:	4620      	mov	r0, r4
 80a0444:	bd10      	pop	{r4, pc}
 80a0446:	bf00      	nop
 80a0448:	080a1980 	.word	0x080a1980

080a044c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a044c:	4603      	mov	r3, r0
 80a044e:	4a07      	ldr	r2, [pc, #28]	; (80a046c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0450:	b510      	push	{r4, lr}
 80a0452:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0456:	f101 0210 	add.w	r2, r1, #16
 80a045a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a045e:	4291      	cmp	r1, r2
 80a0460:	f843 4b04 	str.w	r4, [r3], #4
 80a0464:	d1f9      	bne.n	80a045a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0466:	780a      	ldrb	r2, [r1, #0]
 80a0468:	701a      	strb	r2, [r3, #0]
}
 80a046a:	bd10      	pop	{r4, pc}
 80a046c:	080a1980 	.word	0x080a1980

080a0470 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0470:	4a02      	ldr	r2, [pc, #8]	; (80a047c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0472:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0474:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0476:	2204      	movs	r2, #4
 80a0478:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a047a:	4770      	bx	lr
 80a047c:	080a1980 	.word	0x080a1980

080a0480 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0480:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0482:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0486:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a048a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a048e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0492:	2304      	movs	r3, #4
 80a0494:	6041      	str	r1, [r0, #4]
 80a0496:	7503      	strb	r3, [r0, #20]
 80a0498:	bd10      	pop	{r4, pc}
	...

080a049c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a049c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a049e:	4d04      	ldr	r5, [pc, #16]	; (80a04b0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a04a0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a04a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a04a6:	9500      	str	r5, [sp, #0]
 80a04a8:	f7ff ffea 	bl	80a0480 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a04ac:	b003      	add	sp, #12
 80a04ae:	bd30      	pop	{r4, r5, pc}
 80a04b0:	080a1980 	.word	0x080a1980

080a04b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a04b4:	4a01      	ldr	r2, [pc, #4]	; (80a04bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a04b8:	601a      	str	r2, [r3, #0]
 80a04ba:	4770      	bx	lr
 80a04bc:	080a1a02 	.word	0x080a1a02
 80a04c0:	200000c4 	.word	0x200000c4

080a04c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a04c4:	2300      	movs	r3, #0
 80a04c6:	461a      	mov	r2, r3
 80a04c8:	6840      	ldr	r0, [r0, #4]
 80a04ca:	f7ff bf13 	b.w	80a02f4 <network_connect>

080a04ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a04ce:	2200      	movs	r2, #0
 80a04d0:	2102      	movs	r1, #2
 80a04d2:	6840      	ldr	r0, [r0, #4]
 80a04d4:	f7ff bf1e 	b.w	80a0314 <network_disconnect>

080a04d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a04d8:	2200      	movs	r2, #0
 80a04da:	4611      	mov	r1, r2
 80a04dc:	6840      	ldr	r0, [r0, #4]
 80a04de:	f7ff bf11 	b.w	80a0304 <network_connecting>

080a04e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a04e2:	2200      	movs	r2, #0
 80a04e4:	4611      	mov	r1, r2
 80a04e6:	6840      	ldr	r0, [r0, #4]
 80a04e8:	f7ff bf1c 	b.w	80a0324 <network_ready>

080a04ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a04ec:	2300      	movs	r3, #0
 80a04ee:	461a      	mov	r2, r3
 80a04f0:	4619      	mov	r1, r3
 80a04f2:	6840      	ldr	r0, [r0, #4]
 80a04f4:	f7ff bf1e 	b.w	80a0334 <network_on>

080a04f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a04f8:	2300      	movs	r3, #0
 80a04fa:	461a      	mov	r2, r3
 80a04fc:	4619      	mov	r1, r3
 80a04fe:	6840      	ldr	r0, [r0, #4]
 80a0500:	f7ff bf20 	b.w	80a0344 <network_off>

080a0504 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0504:	2200      	movs	r2, #0
 80a0506:	f081 0101 	eor.w	r1, r1, #1
 80a050a:	6840      	ldr	r0, [r0, #4]
 80a050c:	f7ff bf22 	b.w	80a0354 <network_listen>

080a0510 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0510:	2200      	movs	r2, #0
 80a0512:	6840      	ldr	r0, [r0, #4]
 80a0514:	f7ff bf2e 	b.w	80a0374 <network_set_listen_timeout>

080a0518 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0518:	2200      	movs	r2, #0
 80a051a:	4611      	mov	r1, r2
 80a051c:	6840      	ldr	r0, [r0, #4]
 80a051e:	f7ff bf31 	b.w	80a0384 <network_get_listen_timeout>

080a0522 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0522:	2200      	movs	r2, #0
 80a0524:	4611      	mov	r1, r2
 80a0526:	6840      	ldr	r0, [r0, #4]
 80a0528:	f7ff bf1c 	b.w	80a0364 <network_listening>

080a052c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a052c:	b570      	push	{r4, r5, r6, lr}
 80a052e:	4616      	mov	r6, r2
 80a0530:	b08e      	sub	sp, #56	; 0x38
 80a0532:	4604      	mov	r4, r0
    IPAddress addr;
 80a0534:	a808      	add	r0, sp, #32
 80a0536:	f7ff ff7b 	bl	80a0430 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a053a:	2211      	movs	r2, #17
 80a053c:	2100      	movs	r1, #0
 80a053e:	a803      	add	r0, sp, #12
 80a0540:	f000 fe17 	bl	80a1172 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0544:	4630      	mov	r0, r6
 80a0546:	f000 fe57 	bl	80a11f8 <strlen>
 80a054a:	2500      	movs	r5, #0
 80a054c:	4b0a      	ldr	r3, [pc, #40]	; (80a0578 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a054e:	9500      	str	r5, [sp, #0]
 80a0550:	b281      	uxth	r1, r0
 80a0552:	685b      	ldr	r3, [r3, #4]
 80a0554:	aa03      	add	r2, sp, #12
 80a0556:	4630      	mov	r0, r6
 80a0558:	f7ff fe70 	bl	80a023c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a055c:	b120      	cbz	r0, 80a0568 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a055e:	4629      	mov	r1, r5
 80a0560:	4620      	mov	r0, r4
 80a0562:	f7ff ff85 	bl	80a0470 <_ZN9IPAddressC1Em>
 80a0566:	e003      	b.n	80a0570 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0568:	a903      	add	r1, sp, #12
 80a056a:	4620      	mov	r0, r4
 80a056c:	f7ff ff6e 	bl	80a044c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0570:	4620      	mov	r0, r4
 80a0572:	b00e      	add	sp, #56	; 0x38
 80a0574:	bd70      	pop	{r4, r5, r6, pc}
 80a0576:	bf00      	nop
 80a0578:	20000578 	.word	0x20000578

080a057c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a057c:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a057e:	4a03      	ldr	r2, [pc, #12]	; (80a058c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0580:	601a      	str	r2, [r3, #0]
 80a0582:	2200      	movs	r2, #0
 80a0584:	605a      	str	r2, [r3, #4]
 80a0586:	4770      	bx	lr
 80a0588:	200000c8 	.word	0x200000c8
 80a058c:	080a1a78 	.word	0x080a1a78

080a0590 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0592:	4606      	mov	r6, r0
 80a0594:	460d      	mov	r5, r1
 80a0596:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0598:	2400      	movs	r4, #0
  while (size--) {
 80a059a:	42bd      	cmp	r5, r7
 80a059c:	d00c      	beq.n	80a05b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a059e:	6833      	ldr	r3, [r6, #0]
 80a05a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a05a4:	689b      	ldr	r3, [r3, #8]
 80a05a6:	4630      	mov	r0, r6
 80a05a8:	4798      	blx	r3
     if (chunk>=0)
 80a05aa:	2800      	cmp	r0, #0
 80a05ac:	db01      	blt.n	80a05b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a05ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a05b0:	e7f3      	b.n	80a059a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a05b2:	2c00      	cmp	r4, #0
 80a05b4:	bf08      	it	eq
 80a05b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a05b8:	4620      	mov	r0, r4
 80a05ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a05bc:	b570      	push	{r4, r5, r6, lr}
 80a05be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a05c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a05c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a05c4:	b149      	cbz	r1, 80a05da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a05c6:	f000 fe17 	bl	80a11f8 <strlen>
 80a05ca:	682b      	ldr	r3, [r5, #0]
 80a05cc:	4602      	mov	r2, r0
 80a05ce:	4621      	mov	r1, r4
 80a05d0:	4628      	mov	r0, r5
    }
 80a05d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a05d6:	68db      	ldr	r3, [r3, #12]
 80a05d8:	4718      	bx	r3
    }
 80a05da:	bd70      	pop	{r4, r5, r6, pc}

080a05dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a05dc:	6803      	ldr	r3, [r0, #0]
 80a05de:	689b      	ldr	r3, [r3, #8]
 80a05e0:	4718      	bx	r3

080a05e2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a05e2:	2a01      	cmp	r2, #1
 80a05e4:	bf98      	it	ls
 80a05e6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a05e8:	b530      	push	{r4, r5, lr}
 80a05ea:	460b      	mov	r3, r1
 80a05ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a05ee:	2100      	movs	r1, #0
 80a05f0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a05f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a05f8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a05fc:	fb05 3312 	mls	r3, r5, r2, r3
 80a0600:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0602:	2b09      	cmp	r3, #9
 80a0604:	bf94      	ite	ls
 80a0606:	3330      	addls	r3, #48	; 0x30
 80a0608:	3337      	addhi	r3, #55	; 0x37
 80a060a:	b2db      	uxtb	r3, r3
 80a060c:	4621      	mov	r1, r4
 80a060e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0612:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0614:	2d00      	cmp	r5, #0
 80a0616:	d1ef      	bne.n	80a05f8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0618:	f7ff ffd0 	bl	80a05bc <_ZN5Print5writeEPKc>
}
 80a061c:	b00b      	add	sp, #44	; 0x2c
 80a061e:	bd30      	pop	{r4, r5, pc}

080a0620 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0620:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0622:	b922      	cbnz	r2, 80a062e <_ZN5Print5printEmi+0xe>
 80a0624:	6803      	ldr	r3, [r0, #0]
 80a0626:	b2c9      	uxtb	r1, r1
 80a0628:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a062a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a062c:	4718      	bx	r3
  else return printNumber(n, base);
 80a062e:	b2d2      	uxtb	r2, r2
}
 80a0630:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0632:	f7ff bfd6 	b.w	80a05e2 <_ZN5Print11printNumberEmh>

080a0636 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0636:	f7ff bff3 	b.w	80a0620 <_ZN5Print5printEmi>

080a063a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a063a:	b510      	push	{r4, lr}
 80a063c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a063e:	f7ff fecc 	bl	80a03da <_ZNSt14_Function_baseD1Ev>
 80a0642:	4620      	mov	r0, r4
 80a0644:	bd10      	pop	{r4, pc}
	...

080a0648 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0648:	4803      	ldr	r0, [pc, #12]	; (80a0658 <_GLOBAL__sub_I_RGB+0x10>)
 80a064a:	2300      	movs	r3, #0
 80a064c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a064e:	4a03      	ldr	r2, [pc, #12]	; (80a065c <_GLOBAL__sub_I_RGB+0x14>)
 80a0650:	4903      	ldr	r1, [pc, #12]	; (80a0660 <_GLOBAL__sub_I_RGB+0x18>)
 80a0652:	f000 bb2d 	b.w	80a0cb0 <__aeabi_atexit>
 80a0656:	bf00      	nop
 80a0658:	200000d0 	.word	0x200000d0
 80a065c:	200000b8 	.word	0x200000b8
 80a0660:	080a063b 	.word	0x080a063b

080a0664 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0664:	4770      	bx	lr

080a0666 <_ZN8SPIClassD0Ev>:
 80a0666:	b510      	push	{r4, lr}
 80a0668:	4604      	mov	r4, r0
 80a066a:	2110      	movs	r1, #16
 80a066c:	f000 fb25 	bl	80a0cba <_ZdlPvj>
 80a0670:	4620      	mov	r0, r4
 80a0672:	bd10      	pop	{r4, pc}

080a0674 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0674:	b570      	push	{r4, r5, r6, lr}
 80a0676:	4604      	mov	r4, r0
 80a0678:	460e      	mov	r6, r1
 80a067a:	4b07      	ldr	r3, [pc, #28]	; (80a0698 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a067c:	2500      	movs	r5, #0
 80a067e:	6003      	str	r3, [r0, #0]
 80a0680:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0684:	f7ff fd3a 	bl	80a00fc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0688:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a068a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a068c:	f7ff fd66 	bl	80a015c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0690:	60a5      	str	r5, [r4, #8]
}
 80a0692:	4620      	mov	r0, r4
 80a0694:	bd70      	pop	{r4, r5, r6, pc}
 80a0696:	bf00      	nop
 80a0698:	080a1aac 	.word	0x080a1aac

080a069c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a069c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a06a0:	4b03      	ldr	r3, [pc, #12]	; (80a06b0 <_GLOBAL__sub_I_System+0x14>)
 80a06a2:	2000      	movs	r0, #0
 80a06a4:	7018      	strb	r0, [r3, #0]
 80a06a6:	8058      	strh	r0, [r3, #2]
 80a06a8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06aa:	f7ff bdd7 	b.w	80a025c <set_system_mode>
 80a06ae:	bf00      	nop
 80a06b0:	200000e0 	.word	0x200000e0

080a06b4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a06b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a06b6:	4b14      	ldr	r3, [pc, #80]	; (80a0708 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a06b8:	4f14      	ldr	r7, [pc, #80]	; (80a070c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a06ba:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a06bc:	4b14      	ldr	r3, [pc, #80]	; (80a0710 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a06be:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a06c0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a06c2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a06c4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a06c6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a06c8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a06ca:	d01b      	beq.n	80a0704 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a06cc:	a80a      	add	r0, sp, #40	; 0x28
 80a06ce:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a06d2:	f000 fc4b 	bl	80a0f6c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a06d6:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a06d8:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a06da:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a06dc:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a06e0:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a06e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a06e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a06e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a06e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a06ea:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a06ee:	4c09      	ldr	r4, [pc, #36]	; (80a0714 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a06f0:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a06f4:	ad01      	add	r5, sp, #4
 80a06f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a06f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a06fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a06fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a06fe:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a0700:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a0704:	b00b      	add	sp, #44	; 0x2c
 80a0706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0708:	20000118 	.word	0x20000118
 80a070c:	20000114 	.word	0x20000114
 80a0710:	20000110 	.word	0x20000110
 80a0714:	200000e8 	.word	0x200000e8

080a0718 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a0718:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a071a:	2000      	movs	r0, #0
 80a071c:	f7ff fdda 	bl	80a02d4 <spark_sync_time_pending>
 80a0720:	b128      	cbz	r0, 80a072e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0722:	f7ff fdcf 	bl	80a02c4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a0726:	f080 0001 	eor.w	r0, r0, #1
 80a072a:	b2c0      	uxtb	r0, r0
 80a072c:	bd08      	pop	{r3, pc}
 80a072e:	2001      	movs	r0, #1
    }
 80a0730:	bd08      	pop	{r3, pc}

080a0732 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a0732:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a0734:	2000      	movs	r0, #0
 80a0736:	f7ff fd01 	bl	80a013c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a073a:	4604      	mov	r4, r0
 80a073c:	b968      	cbnz	r0, 80a075a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a073e:	f7ff fd85 	bl	80a024c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a0742:	2801      	cmp	r0, #1
 80a0744:	d10b      	bne.n	80a075e <_ZN9TimeClass7isValidEv+0x2c>
 80a0746:	4620      	mov	r0, r4
 80a0748:	f7ff fd98 	bl	80a027c <system_thread_get_state>
 80a074c:	b938      	cbnz	r0, 80a075e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a074e:	f7ff ffe3 	bl	80a0718 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0752:	b930      	cbnz	r0, 80a0762 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a0754:	f7ff fdae 	bl	80a02b4 <spark_process>
 80a0758:	e7f9      	b.n	80a074e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a075a:	2001      	movs	r0, #1
 80a075c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a075e:	2000      	movs	r0, #0
 80a0760:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a0762:	f7ff ffd9 	bl	80a0718 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a0766:	2000      	movs	r0, #0
 80a0768:	f7ff fce8 	bl	80a013c <HAL_RTC_Time_Is_Valid>
 80a076c:	3000      	adds	r0, #0
 80a076e:	bf18      	it	ne
 80a0770:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a0772:	bd10      	pop	{r4, pc}

080a0774 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a0774:	b508      	push	{r3, lr}
    (void)isValid();
 80a0776:	f7ff ffdc 	bl	80a0732 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a077a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a077e:	f7ff bcd5 	b.w	80a012c <HAL_RTC_Get_UnixTime>
	...

080a0784 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a0784:	b508      	push	{r3, lr}
	return day(now());
 80a0786:	f7ff fff5 	bl	80a0774 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a078a:	f7ff ff93 	bl	80a06b4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a078e:	4b01      	ldr	r3, [pc, #4]	; (80a0794 <_ZN9TimeClass3dayEv+0x10>)
 80a0790:	68d8      	ldr	r0, [r3, #12]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	200000e8 	.word	0x200000e8

080a0798 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0798:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a079a:	681a      	ldr	r2, [r3, #0]
 80a079c:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a079e:	601a      	str	r2, [r3, #0]
 80a07a0:	4770      	bx	lr
 80a07a2:	bf00      	nop
 80a07a4:	20000000 	.word	0x20000000
 80a07a8:	2000010c 	.word	0x2000010c

080a07ac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a07ac:	4770      	bx	lr

080a07ae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a07ae:	7441      	strb	r1, [r0, #17]
 80a07b0:	4770      	bx	lr

080a07b2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a07b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a07b4:	7c00      	ldrb	r0, [r0, #16]
 80a07b6:	f7ff fd09 	bl	80a01cc <HAL_USART_Available_Data_For_Write>
}
 80a07ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07be:	bd08      	pop	{r3, pc}

080a07c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a07c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a07c2:	7c00      	ldrb	r0, [r0, #16]
 80a07c4:	f7ff fce2 	bl	80a018c <HAL_USART_Available_Data>
}
 80a07c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07cc:	bd08      	pop	{r3, pc}

080a07ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a07ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a07d0:	7c00      	ldrb	r0, [r0, #16]
 80a07d2:	f7ff fceb 	bl	80a01ac <HAL_USART_Peek_Data>
}
 80a07d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a07da:	bf28      	it	cs
 80a07dc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a07e0:	bd08      	pop	{r3, pc}

080a07e2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a07e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a07e4:	7c00      	ldrb	r0, [r0, #16]
 80a07e6:	f7ff fcd9 	bl	80a019c <HAL_USART_Read_Data>
}
 80a07ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a07ee:	bf28      	it	cs
 80a07f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a07f4:	bd08      	pop	{r3, pc}

080a07f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a07f6:	7c00      	ldrb	r0, [r0, #16]
 80a07f8:	f7ff bce0 	b.w	80a01bc <HAL_USART_Flush_Data>

080a07fc <_ZN11USARTSerialD0Ev>:
 80a07fc:	b510      	push	{r4, lr}
 80a07fe:	4604      	mov	r4, r0
 80a0800:	2114      	movs	r1, #20
 80a0802:	f000 fa5a 	bl	80a0cba <_ZdlPvj>
 80a0806:	4620      	mov	r0, r4
 80a0808:	bd10      	pop	{r4, pc}

080a080a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a080a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a080c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a080e:	4604      	mov	r4, r0
 80a0810:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0812:	b925      	cbnz	r5, 80a081e <_ZN11USARTSerial5writeEh+0x14>
 80a0814:	7c00      	ldrb	r0, [r0, #16]
 80a0816:	f7ff fcd9 	bl	80a01cc <HAL_USART_Available_Data_For_Write>
 80a081a:	2800      	cmp	r0, #0
 80a081c:	dd05      	ble.n	80a082a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a081e:	4631      	mov	r1, r6
 80a0820:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0826:	f7ff bca9 	b.w	80a017c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a082a:	4628      	mov	r0, r5
 80a082c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0830 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0830:	b510      	push	{r4, lr}
 80a0832:	4604      	mov	r4, r0
 80a0834:	4608      	mov	r0, r1
 80a0836:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0838:	2200      	movs	r2, #0
 80a083a:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0840:	60a2      	str	r2, [r4, #8]
 80a0842:	4a05      	ldr	r2, [pc, #20]	; (80a0858 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0844:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0846:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0848:	2201      	movs	r2, #1
 80a084a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a084c:	461a      	mov	r2, r3
 80a084e:	f7ff fc8d 	bl	80a016c <HAL_USART_Init>
}
 80a0852:	4620      	mov	r0, r4
 80a0854:	bd10      	pop	{r4, pc}
 80a0856:	bf00      	nop
 80a0858:	080a1ae4 	.word	0x080a1ae4

080a085c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a085c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a085e:	4d0c      	ldr	r5, [pc, #48]	; (80a0890 <_Z22__fetch_global_Serial1v+0x34>)
 80a0860:	6829      	ldr	r1, [r5, #0]
 80a0862:	f011 0401 	ands.w	r4, r1, #1
 80a0866:	d111      	bne.n	80a088c <_Z22__fetch_global_Serial1v+0x30>
 80a0868:	4628      	mov	r0, r5
 80a086a:	f7ff fc18 	bl	80a009e <__cxa_guard_acquire>
 80a086e:	b168      	cbz	r0, 80a088c <_Z22__fetch_global_Serial1v+0x30>
 80a0870:	4a08      	ldr	r2, [pc, #32]	; (80a0894 <_Z22__fetch_global_Serial1v+0x38>)
 80a0872:	4621      	mov	r1, r4
 80a0874:	4b08      	ldr	r3, [pc, #32]	; (80a0898 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0876:	4809      	ldr	r0, [pc, #36]	; (80a089c <_Z22__fetch_global_Serial1v+0x40>)
 80a0878:	f7ff ffda 	bl	80a0830 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a087c:	4628      	mov	r0, r5
 80a087e:	f7ff fc13 	bl	80a00a8 <__cxa_guard_release>
 80a0882:	4a07      	ldr	r2, [pc, #28]	; (80a08a0 <_Z22__fetch_global_Serial1v+0x44>)
 80a0884:	4907      	ldr	r1, [pc, #28]	; (80a08a4 <_Z22__fetch_global_Serial1v+0x48>)
 80a0886:	4805      	ldr	r0, [pc, #20]	; (80a089c <_Z22__fetch_global_Serial1v+0x40>)
 80a0888:	f000 fa12 	bl	80a0cb0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a088c:	4803      	ldr	r0, [pc, #12]	; (80a089c <_Z22__fetch_global_Serial1v+0x40>)
 80a088e:	bd38      	pop	{r3, r4, r5, pc}
 80a0890:	200001b4 	.word	0x200001b4
 80a0894:	200001b8 	.word	0x200001b8
 80a0898:	20000130 	.word	0x20000130
 80a089c:	2000011c 	.word	0x2000011c
 80a08a0:	200000b8 	.word	0x200000b8
 80a08a4:	080a07ad 	.word	0x080a07ad

080a08a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a08a8:	7441      	strb	r1, [r0, #17]
 80a08aa:	4770      	bx	lr

080a08ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a08ac:	4770      	bx	lr

080a08ae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a08ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a08b0:	2100      	movs	r1, #0
 80a08b2:	7c00      	ldrb	r0, [r0, #16]
 80a08b4:	f7ff fcaa 	bl	80a020c <HAL_USB_USART_Receive_Data>
}
 80a08b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a08bc:	bf28      	it	cs
 80a08be:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a08c2:	bd08      	pop	{r3, pc}

080a08c4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a08c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a08c6:	2101      	movs	r1, #1
 80a08c8:	7c00      	ldrb	r0, [r0, #16]
 80a08ca:	f7ff fc9f 	bl	80a020c <HAL_USB_USART_Receive_Data>
}
 80a08ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a08d2:	bf28      	it	cs
 80a08d4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a08d8:	bd08      	pop	{r3, pc}

080a08da <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a08da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a08dc:	7c00      	ldrb	r0, [r0, #16]
 80a08de:	f7ff fc8d 	bl	80a01fc <HAL_USB_USART_Available_Data_For_Write>
}
 80a08e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a08e6:	bd08      	pop	{r3, pc}

080a08e8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a08e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a08ea:	7c00      	ldrb	r0, [r0, #16]
 80a08ec:	f7ff fc7e 	bl	80a01ec <HAL_USB_USART_Available_Data>
}
 80a08f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a08f4:	bd08      	pop	{r3, pc}

080a08f6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a08f6:	7c00      	ldrb	r0, [r0, #16]
 80a08f8:	f7ff bc98 	b.w	80a022c <HAL_USB_USART_Flush_Data>

080a08fc <_ZN9USBSerialD0Ev>:
 80a08fc:	b510      	push	{r4, lr}
 80a08fe:	4604      	mov	r4, r0
 80a0900:	2114      	movs	r1, #20
 80a0902:	f000 f9da 	bl	80a0cba <_ZdlPvj>
 80a0906:	4620      	mov	r0, r4
 80a0908:	bd10      	pop	{r4, pc}

080a090a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a090a:	b538      	push	{r3, r4, r5, lr}
 80a090c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a090e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0910:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0912:	f7ff fc73 	bl	80a01fc <HAL_USB_USART_Available_Data_For_Write>
 80a0916:	2800      	cmp	r0, #0
 80a0918:	dc01      	bgt.n	80a091e <_ZN9USBSerial5writeEh+0x14>
 80a091a:	7c60      	ldrb	r0, [r4, #17]
 80a091c:	b128      	cbz	r0, 80a092a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a091e:	4629      	mov	r1, r5
 80a0920:	7c20      	ldrb	r0, [r4, #16]
 80a0922:	f7ff fc7b 	bl	80a021c <HAL_USB_USART_Send_Data>
 80a0926:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a092a:	bd38      	pop	{r3, r4, r5, pc}

080a092c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a092c:	b510      	push	{r4, lr}
 80a092e:	4604      	mov	r4, r0
 80a0930:	2300      	movs	r3, #0
 80a0932:	6063      	str	r3, [r4, #4]
 80a0934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0938:	60a3      	str	r3, [r4, #8]
 80a093a:	4b05      	ldr	r3, [pc, #20]	; (80a0950 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a093c:	4608      	mov	r0, r1
 80a093e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0940:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0942:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0944:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0946:	4611      	mov	r1, r2
 80a0948:	f7ff fc48 	bl	80a01dc <HAL_USB_USART_Init>
}
 80a094c:	4620      	mov	r0, r4
 80a094e:	bd10      	pop	{r4, pc}
 80a0950:	080a1b14 	.word	0x080a1b14

080a0954 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0954:	b510      	push	{r4, lr}
 80a0956:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0958:	2214      	movs	r2, #20
 80a095a:	2100      	movs	r1, #0
 80a095c:	f000 fc09 	bl	80a1172 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0960:	4b05      	ldr	r3, [pc, #20]	; (80a0978 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0962:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0964:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0966:	4b05      	ldr	r3, [pc, #20]	; (80a097c <_Z19acquireSerialBufferv+0x28>)
 80a0968:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a096a:	f240 1301 	movw	r3, #257	; 0x101
 80a096e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0970:	2381      	movs	r3, #129	; 0x81
 80a0972:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0974:	bd10      	pop	{r4, pc}
 80a0976:	bf00      	nop
 80a0978:	200002c1 	.word	0x200002c1
 80a097c:	20000240 	.word	0x20000240

080a0980 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0980:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0982:	4d0e      	ldr	r5, [pc, #56]	; (80a09bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0984:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0986:	a801      	add	r0, sp, #4
 80a0988:	f7ff ffe4 	bl	80a0954 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a098c:	6829      	ldr	r1, [r5, #0]
 80a098e:	f011 0401 	ands.w	r4, r1, #1
 80a0992:	d110      	bne.n	80a09b6 <_Z16_fetch_usbserialv+0x36>
 80a0994:	4628      	mov	r0, r5
 80a0996:	f7ff fb82 	bl	80a009e <__cxa_guard_acquire>
 80a099a:	b160      	cbz	r0, 80a09b6 <_Z16_fetch_usbserialv+0x36>
 80a099c:	aa01      	add	r2, sp, #4
 80a099e:	4621      	mov	r1, r4
 80a09a0:	4807      	ldr	r0, [pc, #28]	; (80a09c0 <_Z16_fetch_usbserialv+0x40>)
 80a09a2:	f7ff ffc3 	bl	80a092c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a09a6:	4628      	mov	r0, r5
 80a09a8:	f7ff fb7e 	bl	80a00a8 <__cxa_guard_release>
 80a09ac:	4a05      	ldr	r2, [pc, #20]	; (80a09c4 <_Z16_fetch_usbserialv+0x44>)
 80a09ae:	4906      	ldr	r1, [pc, #24]	; (80a09c8 <_Z16_fetch_usbserialv+0x48>)
 80a09b0:	4803      	ldr	r0, [pc, #12]	; (80a09c0 <_Z16_fetch_usbserialv+0x40>)
 80a09b2:	f000 f97d 	bl	80a0cb0 <__aeabi_atexit>
	return _usbserial;
}
 80a09b6:	4802      	ldr	r0, [pc, #8]	; (80a09c0 <_Z16_fetch_usbserialv+0x40>)
 80a09b8:	b007      	add	sp, #28
 80a09ba:	bd30      	pop	{r4, r5, pc}
 80a09bc:	2000023c 	.word	0x2000023c
 80a09c0:	200003c4 	.word	0x200003c4
 80a09c4:	200000b8 	.word	0x200000b8
 80a09c8:	080a08ad 	.word	0x080a08ad

080a09cc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a09cc:	b510      	push	{r4, lr}
 80a09ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09d0:	2214      	movs	r2, #20
 80a09d2:	2100      	movs	r1, #0
 80a09d4:	f000 fbcd 	bl	80a1172 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a09d8:	4b05      	ldr	r3, [pc, #20]	; (80a09f0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09da:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a09dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a09de:	4b05      	ldr	r3, [pc, #20]	; (80a09f4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a09e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09e2:	f240 1301 	movw	r3, #257	; 0x101
 80a09e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09e8:	2381      	movs	r3, #129	; 0x81
 80a09ea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a09ec:	bd10      	pop	{r4, pc}
 80a09ee:	bf00      	nop
 80a09f0:	20000474 	.word	0x20000474
 80a09f4:	200003dc 	.word	0x200003dc

080a09f8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a09f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a09fa:	4c0e      	ldr	r4, [pc, #56]	; (80a0a34 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a09fc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a09fe:	a801      	add	r0, sp, #4
 80a0a00:	f7ff ffe4 	bl	80a09cc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a04:	6823      	ldr	r3, [r4, #0]
 80a0a06:	07db      	lsls	r3, r3, #31
 80a0a08:	d410      	bmi.n	80a0a2c <_Z17_fetch_usbserial1v+0x34>
 80a0a0a:	4620      	mov	r0, r4
 80a0a0c:	f7ff fb47 	bl	80a009e <__cxa_guard_acquire>
 80a0a10:	b160      	cbz	r0, 80a0a2c <_Z17_fetch_usbserial1v+0x34>
 80a0a12:	aa01      	add	r2, sp, #4
 80a0a14:	2101      	movs	r1, #1
 80a0a16:	4808      	ldr	r0, [pc, #32]	; (80a0a38 <_Z17_fetch_usbserial1v+0x40>)
 80a0a18:	f7ff ff88 	bl	80a092c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a1c:	4620      	mov	r0, r4
 80a0a1e:	f7ff fb43 	bl	80a00a8 <__cxa_guard_release>
 80a0a22:	4a06      	ldr	r2, [pc, #24]	; (80a0a3c <_Z17_fetch_usbserial1v+0x44>)
 80a0a24:	4906      	ldr	r1, [pc, #24]	; (80a0a40 <_Z17_fetch_usbserial1v+0x48>)
 80a0a26:	4804      	ldr	r0, [pc, #16]	; (80a0a38 <_Z17_fetch_usbserial1v+0x40>)
 80a0a28:	f000 f942 	bl	80a0cb0 <__aeabi_atexit>
  return _usbserial1;
}
 80a0a2c:	4802      	ldr	r0, [pc, #8]	; (80a0a38 <_Z17_fetch_usbserial1v+0x40>)
 80a0a2e:	b006      	add	sp, #24
 80a0a30:	bd10      	pop	{r4, pc}
 80a0a32:	bf00      	nop
 80a0a34:	200003d8 	.word	0x200003d8
 80a0a38:	20000460 	.word	0x20000460
 80a0a3c:	200000b8 	.word	0x200000b8
 80a0a40:	080a08ad 	.word	0x080a08ad

080a0a44 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0a44:	2200      	movs	r2, #0
 80a0a46:	4611      	mov	r1, r2
 80a0a48:	6840      	ldr	r0, [r0, #4]
 80a0a4a:	f7ff bc6b 	b.w	80a0324 <network_ready>

080a0a4e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a50:	4616      	mov	r6, r2
 80a0a52:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0a54:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0a56:	460f      	mov	r7, r1
 80a0a58:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0a5a:	2100      	movs	r1, #0
 80a0a5c:	a803      	add	r0, sp, #12
 80a0a5e:	f000 fb88 	bl	80a1172 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0a62:	4630      	mov	r0, r6
 80a0a64:	f000 fbc8 	bl	80a11f8 <strlen>
 80a0a68:	2500      	movs	r5, #0
 80a0a6a:	9500      	str	r5, [sp, #0]
 80a0a6c:	b281      	uxth	r1, r0
 80a0a6e:	687b      	ldr	r3, [r7, #4]
 80a0a70:	aa03      	add	r2, sp, #12
 80a0a72:	4630      	mov	r0, r6
 80a0a74:	f7ff fbe2 	bl	80a023c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0a78:	b120      	cbz	r0, 80a0a84 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0a7a:	4629      	mov	r1, r5
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	f7ff fcf7 	bl	80a0470 <_ZN9IPAddressC1Em>
 80a0a82:	e003      	b.n	80a0a8c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0a84:	a903      	add	r1, sp, #12
 80a0a86:	4620      	mov	r0, r4
 80a0a88:	f7ff fce0 	bl	80a044c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0a8c:	4620      	mov	r0, r4
 80a0a8e:	b009      	add	sp, #36	; 0x24
 80a0a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a92 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0a92:	2200      	movs	r2, #0
 80a0a94:	4611      	mov	r1, r2
 80a0a96:	6840      	ldr	r0, [r0, #4]
 80a0a98:	f7ff bc64 	b.w	80a0364 <network_listening>

080a0a9c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0a9c:	2200      	movs	r2, #0
 80a0a9e:	4611      	mov	r1, r2
 80a0aa0:	6840      	ldr	r0, [r0, #4]
 80a0aa2:	f7ff bc6f 	b.w	80a0384 <network_get_listen_timeout>

080a0aa6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0aa6:	2200      	movs	r2, #0
 80a0aa8:	6840      	ldr	r0, [r0, #4]
 80a0aaa:	f7ff bc63 	b.w	80a0374 <network_set_listen_timeout>

080a0aae <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0aae:	2200      	movs	r2, #0
 80a0ab0:	f081 0101 	eor.w	r1, r1, #1
 80a0ab4:	6840      	ldr	r0, [r0, #4]
 80a0ab6:	f7ff bc4d 	b.w	80a0354 <network_listen>

080a0aba <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0aba:	2300      	movs	r3, #0
 80a0abc:	461a      	mov	r2, r3
 80a0abe:	4619      	mov	r1, r3
 80a0ac0:	6840      	ldr	r0, [r0, #4]
 80a0ac2:	f7ff bc3f 	b.w	80a0344 <network_off>

080a0ac6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0ac6:	2300      	movs	r3, #0
 80a0ac8:	461a      	mov	r2, r3
 80a0aca:	4619      	mov	r1, r3
 80a0acc:	6840      	ldr	r0, [r0, #4]
 80a0ace:	f7ff bc31 	b.w	80a0334 <network_on>

080a0ad2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0ad2:	2200      	movs	r2, #0
 80a0ad4:	4611      	mov	r1, r2
 80a0ad6:	6840      	ldr	r0, [r0, #4]
 80a0ad8:	f7ff bc14 	b.w	80a0304 <network_connecting>

080a0adc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0adc:	2200      	movs	r2, #0
 80a0ade:	2102      	movs	r1, #2
 80a0ae0:	6840      	ldr	r0, [r0, #4]
 80a0ae2:	f7ff bc17 	b.w	80a0314 <network_disconnect>

080a0ae6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0ae6:	2300      	movs	r3, #0
 80a0ae8:	461a      	mov	r2, r3
 80a0aea:	6840      	ldr	r0, [r0, #4]
 80a0aec:	f7ff bc02 	b.w	80a02f4 <network_connect>

080a0af0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0af0:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0af2:	2204      	movs	r2, #4
 80a0af4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0af6:	4a02      	ldr	r2, [pc, #8]	; (80a0b00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0af8:	601a      	str	r2, [r3, #0]
 80a0afa:	4770      	bx	lr
 80a0afc:	20000578 	.word	0x20000578
 80a0b00:	080a1b44 	.word	0x080a1b44

080a0b04 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0b04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0b06:	4b14      	ldr	r3, [pc, #80]	; (80a0b58 <serialEventRun+0x54>)
 80a0b08:	b133      	cbz	r3, 80a0b18 <serialEventRun+0x14>
 80a0b0a:	f7ff ff39 	bl	80a0980 <_Z16_fetch_usbserialv>
 80a0b0e:	6803      	ldr	r3, [r0, #0]
 80a0b10:	691b      	ldr	r3, [r3, #16]
 80a0b12:	4798      	blx	r3
 80a0b14:	2800      	cmp	r0, #0
 80a0b16:	dc16      	bgt.n	80a0b46 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0b18:	4b10      	ldr	r3, [pc, #64]	; (80a0b5c <serialEventRun+0x58>)
 80a0b1a:	b133      	cbz	r3, 80a0b2a <serialEventRun+0x26>
 80a0b1c:	f7ff fe9e 	bl	80a085c <_Z22__fetch_global_Serial1v>
 80a0b20:	6803      	ldr	r3, [r0, #0]
 80a0b22:	691b      	ldr	r3, [r3, #16]
 80a0b24:	4798      	blx	r3
 80a0b26:	2800      	cmp	r0, #0
 80a0b28:	dc10      	bgt.n	80a0b4c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0b2a:	4b0d      	ldr	r3, [pc, #52]	; (80a0b60 <serialEventRun+0x5c>)
 80a0b2c:	b10b      	cbz	r3, 80a0b32 <serialEventRun+0x2e>
 80a0b2e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0b32:	4b0c      	ldr	r3, [pc, #48]	; (80a0b64 <serialEventRun+0x60>)
 80a0b34:	b17b      	cbz	r3, 80a0b56 <serialEventRun+0x52>
 80a0b36:	f7ff ff5f 	bl	80a09f8 <_Z17_fetch_usbserial1v>
 80a0b3a:	6803      	ldr	r3, [r0, #0]
 80a0b3c:	691b      	ldr	r3, [r3, #16]
 80a0b3e:	4798      	blx	r3
 80a0b40:	2800      	cmp	r0, #0
 80a0b42:	dc06      	bgt.n	80a0b52 <serialEventRun+0x4e>
 80a0b44:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0b46:	f3af 8000 	nop.w
 80a0b4a:	e7e5      	b.n	80a0b18 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0b4c:	f3af 8000 	nop.w
 80a0b50:	e7eb      	b.n	80a0b2a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0b52:	f3af 8000 	nop.w
 80a0b56:	bd08      	pop	{r3, pc}
	...

080a0b68 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0b68:	b508      	push	{r3, lr}
	serialEventRun();
 80a0b6a:	f7ff ffcb 	bl	80a0b04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0b6e:	f7ff fad5 	bl	80a011c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0b72:	4b01      	ldr	r3, [pc, #4]	; (80a0b78 <_post_loop+0x10>)
 80a0b74:	6018      	str	r0, [r3, #0]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	20000588 	.word	0x20000588

080a0b7c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0b7c:	4802      	ldr	r0, [pc, #8]	; (80a0b88 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0b7e:	4a03      	ldr	r2, [pc, #12]	; (80a0b8c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0b80:	4903      	ldr	r1, [pc, #12]	; (80a0b90 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0b82:	1a12      	subs	r2, r2, r0
 80a0b84:	f000 baea 	b.w	80a115c <memcpy>
 80a0b88:	40024000 	.word	0x40024000
 80a0b8c:	40024004 	.word	0x40024004
 80a0b90:	080a1db0 	.word	0x080a1db0

080a0b94 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0b94:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b96:	2300      	movs	r3, #0
 80a0b98:	9300      	str	r3, [sp, #0]
 80a0b9a:	461a      	mov	r2, r3
 80a0b9c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0ba0:	f7ff fb7e 	bl	80a02a0 <system_ctrl_set_result>
}
 80a0ba4:	b003      	add	sp, #12
 80a0ba6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0bac <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0bac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0bae:	8843      	ldrh	r3, [r0, #2]
 80a0bb0:	2b0a      	cmp	r3, #10
 80a0bb2:	d008      	beq.n	80a0bc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0bb4:	2b50      	cmp	r3, #80	; 0x50
 80a0bb6:	d109      	bne.n	80a0bcc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0bb8:	4b09      	ldr	r3, [pc, #36]	; (80a0be0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0bba:	681b      	ldr	r3, [r3, #0]
 80a0bbc:	b13b      	cbz	r3, 80a0bce <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0bbe:	b003      	add	sp, #12
 80a0bc0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0bc4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0bc6:	f7ff ffe5 	bl	80a0b94 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0bca:	e006      	b.n	80a0bda <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0bcc:	2300      	movs	r3, #0
 80a0bce:	9300      	str	r3, [sp, #0]
 80a0bd0:	461a      	mov	r2, r3
 80a0bd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0bd6:	f7ff fb63 	bl	80a02a0 <system_ctrl_set_result>
        break;
    }
}
 80a0bda:	b003      	add	sp, #12
 80a0bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0be0:	20000580 	.word	0x20000580

080a0be4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0be4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0be6:	4c10      	ldr	r4, [pc, #64]	; (80a0c28 <module_user_init_hook+0x44>)
 80a0be8:	4d10      	ldr	r5, [pc, #64]	; (80a0c2c <module_user_init_hook+0x48>)
 80a0bea:	6823      	ldr	r3, [r4, #0]
 80a0bec:	42ab      	cmp	r3, r5
 80a0bee:	4b10      	ldr	r3, [pc, #64]	; (80a0c30 <module_user_init_hook+0x4c>)
 80a0bf0:	bf0c      	ite	eq
 80a0bf2:	2201      	moveq	r2, #1
 80a0bf4:	2200      	movne	r2, #0
 80a0bf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0bf8:	d002      	beq.n	80a0c00 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0bfa:	f7ff ffbf 	bl	80a0b7c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0bfe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0c00:	f7ff fa84 	bl	80a010c <HAL_RNG_GetRandomNumber>
 80a0c04:	4604      	mov	r4, r0
    srand(seed);
 80a0c06:	f000 fabd 	bl	80a1184 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0c0a:	4b0a      	ldr	r3, [pc, #40]	; (80a0c34 <module_user_init_hook+0x50>)
 80a0c0c:	b113      	cbz	r3, 80a0c14 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0c0e:	4620      	mov	r0, r4
 80a0c10:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0c14:	2100      	movs	r1, #0
 80a0c16:	4807      	ldr	r0, [pc, #28]	; (80a0c34 <module_user_init_hook+0x50>)
 80a0c18:	f7ff fb64 	bl	80a02e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0c20:	2100      	movs	r1, #0
 80a0c22:	4805      	ldr	r0, [pc, #20]	; (80a0c38 <module_user_init_hook+0x54>)
 80a0c24:	f7ff bb32 	b.w	80a028c <system_ctrl_set_app_request_handler>
 80a0c28:	40024000 	.word	0x40024000
 80a0c2c:	9a271c1e 	.word	0x9a271c1e
 80a0c30:	20000584 	.word	0x20000584
 80a0c34:	00000000 	.word	0x00000000
 80a0c38:	080a0bad 	.word	0x080a0bad

080a0c3c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0c3c:	b513      	push	{r0, r1, r4, lr}
 80a0c3e:	4c08      	ldr	r4, [pc, #32]	; (80a0c60 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0c40:	2300      	movs	r3, #0
 80a0c42:	461a      	mov	r2, r3
 80a0c44:	4619      	mov	r1, r3
 80a0c46:	9300      	str	r3, [sp, #0]
 80a0c48:	4620      	mov	r0, r4
 80a0c4a:	f7ff fc27 	bl	80a049c <_ZN9IPAddressC1Ehhhh>
 80a0c4e:	4620      	mov	r0, r4
 80a0c50:	4a04      	ldr	r2, [pc, #16]	; (80a0c64 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0c52:	4905      	ldr	r1, [pc, #20]	; (80a0c68 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0c54:	b002      	add	sp, #8
 80a0c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c5a:	f000 b829 	b.w	80a0cb0 <__aeabi_atexit>
 80a0c5e:	bf00      	nop
 80a0c60:	2000058c 	.word	0x2000058c
 80a0c64:	200000b8 	.word	0x200000b8
 80a0c68:	080a03ed 	.word	0x080a03ed

080a0c6c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0c6c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0c6e:	4c0c      	ldr	r4, [pc, #48]	; (80a0ca0 <_GLOBAL__sub_I_SPI+0x34>)
 80a0c70:	4e0c      	ldr	r6, [pc, #48]	; (80a0ca4 <_GLOBAL__sub_I_SPI+0x38>)
 80a0c72:	4d0d      	ldr	r5, [pc, #52]	; (80a0ca8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0c74:	2100      	movs	r1, #0
 80a0c76:	4620      	mov	r0, r4
 80a0c78:	f7ff fcfc 	bl	80a0674 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0c7c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0c7e:	4c0b      	ldr	r4, [pc, #44]	; (80a0cac <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0c80:	4632      	mov	r2, r6
 80a0c82:	4629      	mov	r1, r5
 80a0c84:	f000 f814 	bl	80a0cb0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0c88:	2101      	movs	r1, #1
 80a0c8a:	4620      	mov	r0, r4
 80a0c8c:	f7ff fcf2 	bl	80a0674 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0c90:	4632      	mov	r2, r6
 80a0c92:	4629      	mov	r1, r5
 80a0c94:	4620      	mov	r0, r4
 80a0c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0c9a:	f000 b809 	b.w	80a0cb0 <__aeabi_atexit>
 80a0c9e:	bf00      	nop
 80a0ca0:	200005a4 	.word	0x200005a4
 80a0ca4:	200000b8 	.word	0x200000b8
 80a0ca8:	080a0665 	.word	0x080a0665
 80a0cac:	200005b4 	.word	0x200005b4

080a0cb0 <__aeabi_atexit>:
 80a0cb0:	460b      	mov	r3, r1
 80a0cb2:	4601      	mov	r1, r0
 80a0cb4:	4618      	mov	r0, r3
 80a0cb6:	f000 b94b 	b.w	80a0f50 <__cxa_atexit>

080a0cba <_ZdlPvj>:
 80a0cba:	f7ff b9ee 	b.w	80a009a <_ZdlPv>
	...

080a0cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0cc0:	4b24      	ldr	r3, [pc, #144]	; (80a0d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0cc2:	681a      	ldr	r2, [r3, #0]
 80a0cc4:	07d0      	lsls	r0, r2, #31
 80a0cc6:	bf5c      	itt	pl
 80a0cc8:	2201      	movpl	r2, #1
 80a0cca:	601a      	strpl	r2, [r3, #0]
 80a0ccc:	4b22      	ldr	r3, [pc, #136]	; (80a0d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0cce:	681a      	ldr	r2, [r3, #0]
 80a0cd0:	07d1      	lsls	r1, r2, #31
 80a0cd2:	bf5c      	itt	pl
 80a0cd4:	2201      	movpl	r2, #1
 80a0cd6:	601a      	strpl	r2, [r3, #0]
 80a0cd8:	4b20      	ldr	r3, [pc, #128]	; (80a0d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0cda:	681a      	ldr	r2, [r3, #0]
 80a0cdc:	07d2      	lsls	r2, r2, #31
 80a0cde:	bf5c      	itt	pl
 80a0ce0:	2201      	movpl	r2, #1
 80a0ce2:	601a      	strpl	r2, [r3, #0]
 80a0ce4:	4b1e      	ldr	r3, [pc, #120]	; (80a0d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0ce6:	681a      	ldr	r2, [r3, #0]
 80a0ce8:	07d0      	lsls	r0, r2, #31
 80a0cea:	bf5c      	itt	pl
 80a0cec:	2201      	movpl	r2, #1
 80a0cee:	601a      	strpl	r2, [r3, #0]
 80a0cf0:	4b1c      	ldr	r3, [pc, #112]	; (80a0d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0cf2:	681a      	ldr	r2, [r3, #0]
 80a0cf4:	07d1      	lsls	r1, r2, #31
 80a0cf6:	bf5c      	itt	pl
 80a0cf8:	2201      	movpl	r2, #1
 80a0cfa:	601a      	strpl	r2, [r3, #0]
 80a0cfc:	4b1a      	ldr	r3, [pc, #104]	; (80a0d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0cfe:	681a      	ldr	r2, [r3, #0]
 80a0d00:	07d2      	lsls	r2, r2, #31
 80a0d02:	bf5c      	itt	pl
 80a0d04:	2201      	movpl	r2, #1
 80a0d06:	601a      	strpl	r2, [r3, #0]
 80a0d08:	4b18      	ldr	r3, [pc, #96]	; (80a0d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0d0a:	681a      	ldr	r2, [r3, #0]
 80a0d0c:	07d0      	lsls	r0, r2, #31
 80a0d0e:	bf5c      	itt	pl
 80a0d10:	2201      	movpl	r2, #1
 80a0d12:	601a      	strpl	r2, [r3, #0]
 80a0d14:	4b16      	ldr	r3, [pc, #88]	; (80a0d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0d16:	681a      	ldr	r2, [r3, #0]
 80a0d18:	07d1      	lsls	r1, r2, #31
 80a0d1a:	bf5c      	itt	pl
 80a0d1c:	2201      	movpl	r2, #1
 80a0d1e:	601a      	strpl	r2, [r3, #0]
 80a0d20:	4b14      	ldr	r3, [pc, #80]	; (80a0d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0d22:	681a      	ldr	r2, [r3, #0]
 80a0d24:	07d2      	lsls	r2, r2, #31
 80a0d26:	bf5c      	itt	pl
 80a0d28:	2201      	movpl	r2, #1
 80a0d2a:	601a      	strpl	r2, [r3, #0]
 80a0d2c:	4b12      	ldr	r3, [pc, #72]	; (80a0d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0d2e:	681a      	ldr	r2, [r3, #0]
 80a0d30:	07d0      	lsls	r0, r2, #31
 80a0d32:	bf5c      	itt	pl
 80a0d34:	2201      	movpl	r2, #1
 80a0d36:	601a      	strpl	r2, [r3, #0]
 80a0d38:	4b10      	ldr	r3, [pc, #64]	; (80a0d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0d3a:	681a      	ldr	r2, [r3, #0]
 80a0d3c:	07d1      	lsls	r1, r2, #31
 80a0d3e:	bf5c      	itt	pl
 80a0d40:	2201      	movpl	r2, #1
 80a0d42:	601a      	strpl	r2, [r3, #0]
 80a0d44:	4b0e      	ldr	r3, [pc, #56]	; (80a0d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0d46:	681a      	ldr	r2, [r3, #0]
 80a0d48:	07d2      	lsls	r2, r2, #31
 80a0d4a:	bf5c      	itt	pl
 80a0d4c:	2201      	movpl	r2, #1
 80a0d4e:	601a      	strpl	r2, [r3, #0]
 80a0d50:	4770      	bx	lr
 80a0d52:	bf00      	nop
 80a0d54:	200005f0 	.word	0x200005f0
 80a0d58:	200005ec 	.word	0x200005ec
 80a0d5c:	200005e8 	.word	0x200005e8
 80a0d60:	200005e4 	.word	0x200005e4
 80a0d64:	200005e0 	.word	0x200005e0
 80a0d68:	200005dc 	.word	0x200005dc
 80a0d6c:	200005d8 	.word	0x200005d8
 80a0d70:	200005d4 	.word	0x200005d4
 80a0d74:	200005d0 	.word	0x200005d0
 80a0d78:	200005cc 	.word	0x200005cc
 80a0d7c:	200005c8 	.word	0x200005c8
 80a0d80:	200005c4 	.word	0x200005c4

080a0d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0d84:	4b18      	ldr	r3, [pc, #96]	; (80a0de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0d86:	681a      	ldr	r2, [r3, #0]
 80a0d88:	07d1      	lsls	r1, r2, #31
 80a0d8a:	bf5c      	itt	pl
 80a0d8c:	2201      	movpl	r2, #1
 80a0d8e:	601a      	strpl	r2, [r3, #0]
 80a0d90:	4b16      	ldr	r3, [pc, #88]	; (80a0dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0d92:	681a      	ldr	r2, [r3, #0]
 80a0d94:	07d2      	lsls	r2, r2, #31
 80a0d96:	bf5c      	itt	pl
 80a0d98:	2201      	movpl	r2, #1
 80a0d9a:	601a      	strpl	r2, [r3, #0]
 80a0d9c:	4b14      	ldr	r3, [pc, #80]	; (80a0df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0d9e:	681a      	ldr	r2, [r3, #0]
 80a0da0:	07d0      	lsls	r0, r2, #31
 80a0da2:	bf5c      	itt	pl
 80a0da4:	2201      	movpl	r2, #1
 80a0da6:	601a      	strpl	r2, [r3, #0]
 80a0da8:	4b12      	ldr	r3, [pc, #72]	; (80a0df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0daa:	681a      	ldr	r2, [r3, #0]
 80a0dac:	07d1      	lsls	r1, r2, #31
 80a0dae:	bf5c      	itt	pl
 80a0db0:	2201      	movpl	r2, #1
 80a0db2:	601a      	strpl	r2, [r3, #0]
 80a0db4:	4b10      	ldr	r3, [pc, #64]	; (80a0df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0db6:	681a      	ldr	r2, [r3, #0]
 80a0db8:	07d2      	lsls	r2, r2, #31
 80a0dba:	bf5c      	itt	pl
 80a0dbc:	2201      	movpl	r2, #1
 80a0dbe:	601a      	strpl	r2, [r3, #0]
 80a0dc0:	4b0e      	ldr	r3, [pc, #56]	; (80a0dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0dc2:	681a      	ldr	r2, [r3, #0]
 80a0dc4:	07d0      	lsls	r0, r2, #31
 80a0dc6:	bf5c      	itt	pl
 80a0dc8:	2201      	movpl	r2, #1
 80a0dca:	601a      	strpl	r2, [r3, #0]
 80a0dcc:	4b0c      	ldr	r3, [pc, #48]	; (80a0e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0dce:	681a      	ldr	r2, [r3, #0]
 80a0dd0:	07d1      	lsls	r1, r2, #31
 80a0dd2:	bf5c      	itt	pl
 80a0dd4:	2201      	movpl	r2, #1
 80a0dd6:	601a      	strpl	r2, [r3, #0]
 80a0dd8:	4b0a      	ldr	r3, [pc, #40]	; (80a0e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0dda:	681a      	ldr	r2, [r3, #0]
 80a0ddc:	07d2      	lsls	r2, r2, #31
 80a0dde:	bf5c      	itt	pl
 80a0de0:	2201      	movpl	r2, #1
 80a0de2:	601a      	strpl	r2, [r3, #0]
 80a0de4:	4770      	bx	lr
 80a0de6:	bf00      	nop
 80a0de8:	20000610 	.word	0x20000610
 80a0dec:	2000060c 	.word	0x2000060c
 80a0df0:	20000608 	.word	0x20000608
 80a0df4:	20000604 	.word	0x20000604
 80a0df8:	20000600 	.word	0x20000600
 80a0dfc:	200005fc 	.word	0x200005fc
 80a0e00:	200005f8 	.word	0x200005f8
 80a0e04:	200005f4 	.word	0x200005f4

080a0e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0e08:	4b18      	ldr	r3, [pc, #96]	; (80a0e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0e0a:	681a      	ldr	r2, [r3, #0]
 80a0e0c:	07d1      	lsls	r1, r2, #31
 80a0e0e:	bf5c      	itt	pl
 80a0e10:	2201      	movpl	r2, #1
 80a0e12:	601a      	strpl	r2, [r3, #0]
 80a0e14:	4b16      	ldr	r3, [pc, #88]	; (80a0e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0e16:	681a      	ldr	r2, [r3, #0]
 80a0e18:	07d2      	lsls	r2, r2, #31
 80a0e1a:	bf5c      	itt	pl
 80a0e1c:	2201      	movpl	r2, #1
 80a0e1e:	601a      	strpl	r2, [r3, #0]
 80a0e20:	4b14      	ldr	r3, [pc, #80]	; (80a0e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0e22:	681a      	ldr	r2, [r3, #0]
 80a0e24:	07d0      	lsls	r0, r2, #31
 80a0e26:	bf5c      	itt	pl
 80a0e28:	2201      	movpl	r2, #1
 80a0e2a:	601a      	strpl	r2, [r3, #0]
 80a0e2c:	4b12      	ldr	r3, [pc, #72]	; (80a0e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0e2e:	681a      	ldr	r2, [r3, #0]
 80a0e30:	07d1      	lsls	r1, r2, #31
 80a0e32:	bf5c      	itt	pl
 80a0e34:	2201      	movpl	r2, #1
 80a0e36:	601a      	strpl	r2, [r3, #0]
 80a0e38:	4b10      	ldr	r3, [pc, #64]	; (80a0e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0e3a:	681a      	ldr	r2, [r3, #0]
 80a0e3c:	07d2      	lsls	r2, r2, #31
 80a0e3e:	bf5c      	itt	pl
 80a0e40:	2201      	movpl	r2, #1
 80a0e42:	601a      	strpl	r2, [r3, #0]
 80a0e44:	4b0e      	ldr	r3, [pc, #56]	; (80a0e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0e46:	681a      	ldr	r2, [r3, #0]
 80a0e48:	07d0      	lsls	r0, r2, #31
 80a0e4a:	bf5c      	itt	pl
 80a0e4c:	2201      	movpl	r2, #1
 80a0e4e:	601a      	strpl	r2, [r3, #0]
 80a0e50:	4b0c      	ldr	r3, [pc, #48]	; (80a0e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0e52:	681a      	ldr	r2, [r3, #0]
 80a0e54:	07d1      	lsls	r1, r2, #31
 80a0e56:	bf5c      	itt	pl
 80a0e58:	2201      	movpl	r2, #1
 80a0e5a:	601a      	strpl	r2, [r3, #0]
 80a0e5c:	4b0a      	ldr	r3, [pc, #40]	; (80a0e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0e5e:	681a      	ldr	r2, [r3, #0]
 80a0e60:	07d2      	lsls	r2, r2, #31
 80a0e62:	bf5c      	itt	pl
 80a0e64:	2201      	movpl	r2, #1
 80a0e66:	601a      	strpl	r2, [r3, #0]
 80a0e68:	4770      	bx	lr
 80a0e6a:	bf00      	nop
 80a0e6c:	20000630 	.word	0x20000630
 80a0e70:	2000062c 	.word	0x2000062c
 80a0e74:	20000628 	.word	0x20000628
 80a0e78:	20000624 	.word	0x20000624
 80a0e7c:	20000620 	.word	0x20000620
 80a0e80:	2000061c 	.word	0x2000061c
 80a0e84:	20000618 	.word	0x20000618
 80a0e88:	20000614 	.word	0x20000614

080a0e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0e8c:	4b24      	ldr	r3, [pc, #144]	; (80a0f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0e8e:	681a      	ldr	r2, [r3, #0]
 80a0e90:	07d0      	lsls	r0, r2, #31
 80a0e92:	bf5c      	itt	pl
 80a0e94:	2201      	movpl	r2, #1
 80a0e96:	601a      	strpl	r2, [r3, #0]
 80a0e98:	4b22      	ldr	r3, [pc, #136]	; (80a0f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0e9a:	681a      	ldr	r2, [r3, #0]
 80a0e9c:	07d1      	lsls	r1, r2, #31
 80a0e9e:	bf5c      	itt	pl
 80a0ea0:	2201      	movpl	r2, #1
 80a0ea2:	601a      	strpl	r2, [r3, #0]
 80a0ea4:	4b20      	ldr	r3, [pc, #128]	; (80a0f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0ea6:	681a      	ldr	r2, [r3, #0]
 80a0ea8:	07d2      	lsls	r2, r2, #31
 80a0eaa:	bf5c      	itt	pl
 80a0eac:	2201      	movpl	r2, #1
 80a0eae:	601a      	strpl	r2, [r3, #0]
 80a0eb0:	4b1e      	ldr	r3, [pc, #120]	; (80a0f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0eb2:	681a      	ldr	r2, [r3, #0]
 80a0eb4:	07d0      	lsls	r0, r2, #31
 80a0eb6:	bf5c      	itt	pl
 80a0eb8:	2201      	movpl	r2, #1
 80a0eba:	601a      	strpl	r2, [r3, #0]
 80a0ebc:	4b1c      	ldr	r3, [pc, #112]	; (80a0f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0ebe:	681a      	ldr	r2, [r3, #0]
 80a0ec0:	07d1      	lsls	r1, r2, #31
 80a0ec2:	bf5c      	itt	pl
 80a0ec4:	2201      	movpl	r2, #1
 80a0ec6:	601a      	strpl	r2, [r3, #0]
 80a0ec8:	4b1a      	ldr	r3, [pc, #104]	; (80a0f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0eca:	681a      	ldr	r2, [r3, #0]
 80a0ecc:	07d2      	lsls	r2, r2, #31
 80a0ece:	bf5c      	itt	pl
 80a0ed0:	2201      	movpl	r2, #1
 80a0ed2:	601a      	strpl	r2, [r3, #0]
 80a0ed4:	4b18      	ldr	r3, [pc, #96]	; (80a0f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0ed6:	681a      	ldr	r2, [r3, #0]
 80a0ed8:	07d0      	lsls	r0, r2, #31
 80a0eda:	bf5c      	itt	pl
 80a0edc:	2201      	movpl	r2, #1
 80a0ede:	601a      	strpl	r2, [r3, #0]
 80a0ee0:	4b16      	ldr	r3, [pc, #88]	; (80a0f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0ee2:	681a      	ldr	r2, [r3, #0]
 80a0ee4:	07d1      	lsls	r1, r2, #31
 80a0ee6:	bf5c      	itt	pl
 80a0ee8:	2201      	movpl	r2, #1
 80a0eea:	601a      	strpl	r2, [r3, #0]
 80a0eec:	4b14      	ldr	r3, [pc, #80]	; (80a0f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0eee:	681a      	ldr	r2, [r3, #0]
 80a0ef0:	07d2      	lsls	r2, r2, #31
 80a0ef2:	bf5c      	itt	pl
 80a0ef4:	2201      	movpl	r2, #1
 80a0ef6:	601a      	strpl	r2, [r3, #0]
 80a0ef8:	4b12      	ldr	r3, [pc, #72]	; (80a0f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0efa:	681a      	ldr	r2, [r3, #0]
 80a0efc:	07d0      	lsls	r0, r2, #31
 80a0efe:	bf5c      	itt	pl
 80a0f00:	2201      	movpl	r2, #1
 80a0f02:	601a      	strpl	r2, [r3, #0]
 80a0f04:	4b10      	ldr	r3, [pc, #64]	; (80a0f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0f06:	681a      	ldr	r2, [r3, #0]
 80a0f08:	07d1      	lsls	r1, r2, #31
 80a0f0a:	bf5c      	itt	pl
 80a0f0c:	2201      	movpl	r2, #1
 80a0f0e:	601a      	strpl	r2, [r3, #0]
 80a0f10:	4b0e      	ldr	r3, [pc, #56]	; (80a0f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0f12:	681a      	ldr	r2, [r3, #0]
 80a0f14:	07d2      	lsls	r2, r2, #31
 80a0f16:	bf5c      	itt	pl
 80a0f18:	2201      	movpl	r2, #1
 80a0f1a:	601a      	strpl	r2, [r3, #0]
 80a0f1c:	4770      	bx	lr
 80a0f1e:	bf00      	nop
 80a0f20:	20000660 	.word	0x20000660
 80a0f24:	2000065c 	.word	0x2000065c
 80a0f28:	20000658 	.word	0x20000658
 80a0f2c:	20000654 	.word	0x20000654
 80a0f30:	20000650 	.word	0x20000650
 80a0f34:	2000064c 	.word	0x2000064c
 80a0f38:	20000648 	.word	0x20000648
 80a0f3c:	20000644 	.word	0x20000644
 80a0f40:	20000640 	.word	0x20000640
 80a0f44:	2000063c 	.word	0x2000063c
 80a0f48:	20000638 	.word	0x20000638
 80a0f4c:	20000634 	.word	0x20000634

080a0f50 <__cxa_atexit>:
 80a0f50:	b510      	push	{r4, lr}
 80a0f52:	4c05      	ldr	r4, [pc, #20]	; (80a0f68 <__cxa_atexit+0x18>)
 80a0f54:	4613      	mov	r3, r2
 80a0f56:	b12c      	cbz	r4, 80a0f64 <__cxa_atexit+0x14>
 80a0f58:	460a      	mov	r2, r1
 80a0f5a:	4601      	mov	r1, r0
 80a0f5c:	2002      	movs	r0, #2
 80a0f5e:	f3af 8000 	nop.w
 80a0f62:	bd10      	pop	{r4, pc}
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	bd10      	pop	{r4, pc}
 80a0f68:	00000000 	.word	0x00000000

080a0f6c <localtime>:
 80a0f6c:	b538      	push	{r3, r4, r5, lr}
 80a0f6e:	4b07      	ldr	r3, [pc, #28]	; (80a0f8c <localtime+0x20>)
 80a0f70:	4605      	mov	r5, r0
 80a0f72:	681c      	ldr	r4, [r3, #0]
 80a0f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a0f76:	b91b      	cbnz	r3, 80a0f80 <localtime+0x14>
 80a0f78:	2024      	movs	r0, #36	; 0x24
 80a0f7a:	f7ff fa0b 	bl	80a0394 <malloc>
 80a0f7e:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a0f80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0f82:	4628      	mov	r0, r5
 80a0f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0f88:	f000 b802 	b.w	80a0f90 <localtime_r>
 80a0f8c:	20000068 	.word	0x20000068

080a0f90 <localtime_r>:
 80a0f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0f94:	460c      	mov	r4, r1
 80a0f96:	4680      	mov	r8, r0
 80a0f98:	f000 fc48 	bl	80a182c <__gettzinfo>
 80a0f9c:	4621      	mov	r1, r4
 80a0f9e:	4607      	mov	r7, r0
 80a0fa0:	4640      	mov	r0, r8
 80a0fa2:	f000 fc47 	bl	80a1834 <gmtime_r>
 80a0fa6:	6946      	ldr	r6, [r0, #20]
 80a0fa8:	4604      	mov	r4, r0
 80a0faa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a0fae:	07b3      	lsls	r3, r6, #30
 80a0fb0:	d105      	bne.n	80a0fbe <localtime_r+0x2e>
 80a0fb2:	2264      	movs	r2, #100	; 0x64
 80a0fb4:	fb96 f3f2 	sdiv	r3, r6, r2
 80a0fb8:	fb02 6313 	mls	r3, r2, r3, r6
 80a0fbc:	b94b      	cbnz	r3, 80a0fd2 <localtime_r+0x42>
 80a0fbe:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a0fc2:	fb96 f3f5 	sdiv	r3, r6, r5
 80a0fc6:	fb05 6513 	mls	r5, r5, r3, r6
 80a0fca:	fab5 f385 	clz	r3, r5
 80a0fce:	095b      	lsrs	r3, r3, #5
 80a0fd0:	e000      	b.n	80a0fd4 <localtime_r+0x44>
 80a0fd2:	2301      	movs	r3, #1
 80a0fd4:	4a5f      	ldr	r2, [pc, #380]	; (80a1154 <localtime_r+0x1c4>)
 80a0fd6:	2530      	movs	r5, #48	; 0x30
 80a0fd8:	fb05 2503 	mla	r5, r5, r3, r2
 80a0fdc:	f000 fa5a 	bl	80a1494 <__tz_lock>
 80a0fe0:	f000 fa5a 	bl	80a1498 <_tzset_unlocked>
 80a0fe4:	4b5c      	ldr	r3, [pc, #368]	; (80a1158 <localtime_r+0x1c8>)
 80a0fe6:	681b      	ldr	r3, [r3, #0]
 80a0fe8:	b1f3      	cbz	r3, 80a1028 <localtime_r+0x98>
 80a0fea:	687b      	ldr	r3, [r7, #4]
 80a0fec:	429e      	cmp	r6, r3
 80a0fee:	d105      	bne.n	80a0ffc <localtime_r+0x6c>
 80a0ff0:	6839      	ldr	r1, [r7, #0]
 80a0ff2:	f8d8 3000 	ldr.w	r3, [r8]
 80a0ff6:	69fa      	ldr	r2, [r7, #28]
 80a0ff8:	b941      	cbnz	r1, 80a100c <localtime_r+0x7c>
 80a0ffa:	e00a      	b.n	80a1012 <localtime_r+0x82>
 80a0ffc:	4630      	mov	r0, r6
 80a0ffe:	f000 f9a1 	bl	80a1344 <__tzcalc_limits>
 80a1002:	2800      	cmp	r0, #0
 80a1004:	d1f4      	bne.n	80a0ff0 <localtime_r+0x60>
 80a1006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a100a:	e00d      	b.n	80a1028 <localtime_r+0x98>
 80a100c:	4293      	cmp	r3, r2
 80a100e:	db08      	blt.n	80a1022 <localtime_r+0x92>
 80a1010:	e001      	b.n	80a1016 <localtime_r+0x86>
 80a1012:	4293      	cmp	r3, r2
 80a1014:	da07      	bge.n	80a1026 <localtime_r+0x96>
 80a1016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a1018:	4293      	cmp	r3, r2
 80a101a:	bfac      	ite	ge
 80a101c:	2300      	movge	r3, #0
 80a101e:	2301      	movlt	r3, #1
 80a1020:	e002      	b.n	80a1028 <localtime_r+0x98>
 80a1022:	2300      	movs	r3, #0
 80a1024:	e000      	b.n	80a1028 <localtime_r+0x98>
 80a1026:	2301      	movs	r3, #1
 80a1028:	6223      	str	r3, [r4, #32]
 80a102a:	6a23      	ldr	r3, [r4, #32]
 80a102c:	203c      	movs	r0, #60	; 0x3c
 80a102e:	2b01      	cmp	r3, #1
 80a1030:	bf0c      	ite	eq
 80a1032:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a1034:	6a39      	ldrne	r1, [r7, #32]
 80a1036:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a103a:	fb91 f6f3 	sdiv	r6, r1, r3
 80a103e:	fb03 1316 	mls	r3, r3, r6, r1
 80a1042:	fb93 f2f0 	sdiv	r2, r3, r0
 80a1046:	fb00 3012 	mls	r0, r0, r2, r3
 80a104a:	6861      	ldr	r1, [r4, #4]
 80a104c:	6823      	ldr	r3, [r4, #0]
 80a104e:	1a89      	subs	r1, r1, r2
 80a1050:	68a2      	ldr	r2, [r4, #8]
 80a1052:	1a1b      	subs	r3, r3, r0
 80a1054:	1b92      	subs	r2, r2, r6
 80a1056:	2b3b      	cmp	r3, #59	; 0x3b
 80a1058:	6023      	str	r3, [r4, #0]
 80a105a:	6061      	str	r1, [r4, #4]
 80a105c:	60a2      	str	r2, [r4, #8]
 80a105e:	dd03      	ble.n	80a1068 <localtime_r+0xd8>
 80a1060:	3101      	adds	r1, #1
 80a1062:	6061      	str	r1, [r4, #4]
 80a1064:	3b3c      	subs	r3, #60	; 0x3c
 80a1066:	e004      	b.n	80a1072 <localtime_r+0xe2>
 80a1068:	2b00      	cmp	r3, #0
 80a106a:	da03      	bge.n	80a1074 <localtime_r+0xe4>
 80a106c:	3901      	subs	r1, #1
 80a106e:	6061      	str	r1, [r4, #4]
 80a1070:	333c      	adds	r3, #60	; 0x3c
 80a1072:	6023      	str	r3, [r4, #0]
 80a1074:	6863      	ldr	r3, [r4, #4]
 80a1076:	2b3b      	cmp	r3, #59	; 0x3b
 80a1078:	dd03      	ble.n	80a1082 <localtime_r+0xf2>
 80a107a:	3201      	adds	r2, #1
 80a107c:	60a2      	str	r2, [r4, #8]
 80a107e:	3b3c      	subs	r3, #60	; 0x3c
 80a1080:	e004      	b.n	80a108c <localtime_r+0xfc>
 80a1082:	2b00      	cmp	r3, #0
 80a1084:	da03      	bge.n	80a108e <localtime_r+0xfe>
 80a1086:	3a01      	subs	r2, #1
 80a1088:	60a2      	str	r2, [r4, #8]
 80a108a:	333c      	adds	r3, #60	; 0x3c
 80a108c:	6063      	str	r3, [r4, #4]
 80a108e:	68a3      	ldr	r3, [r4, #8]
 80a1090:	2b17      	cmp	r3, #23
 80a1092:	dd22      	ble.n	80a10da <localtime_r+0x14a>
 80a1094:	69e2      	ldr	r2, [r4, #28]
 80a1096:	3b18      	subs	r3, #24
 80a1098:	3201      	adds	r2, #1
 80a109a:	61e2      	str	r2, [r4, #28]
 80a109c:	69a2      	ldr	r2, [r4, #24]
 80a109e:	60a3      	str	r3, [r4, #8]
 80a10a0:	3201      	adds	r2, #1
 80a10a2:	2a06      	cmp	r2, #6
 80a10a4:	bfc8      	it	gt
 80a10a6:	2200      	movgt	r2, #0
 80a10a8:	61a2      	str	r2, [r4, #24]
 80a10aa:	68e2      	ldr	r2, [r4, #12]
 80a10ac:	6923      	ldr	r3, [r4, #16]
 80a10ae:	3201      	adds	r2, #1
 80a10b0:	60e2      	str	r2, [r4, #12]
 80a10b2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a10b6:	428a      	cmp	r2, r1
 80a10b8:	dd46      	ble.n	80a1148 <localtime_r+0x1b8>
 80a10ba:	3301      	adds	r3, #1
 80a10bc:	2b0c      	cmp	r3, #12
 80a10be:	bf08      	it	eq
 80a10c0:	6963      	ldreq	r3, [r4, #20]
 80a10c2:	eba2 0201 	sub.w	r2, r2, r1
 80a10c6:	60e2      	str	r2, [r4, #12]
 80a10c8:	bf05      	ittet	eq
 80a10ca:	3301      	addeq	r3, #1
 80a10cc:	2200      	moveq	r2, #0
 80a10ce:	6123      	strne	r3, [r4, #16]
 80a10d0:	6122      	streq	r2, [r4, #16]
 80a10d2:	bf04      	itt	eq
 80a10d4:	6163      	streq	r3, [r4, #20]
 80a10d6:	61e2      	streq	r2, [r4, #28]
 80a10d8:	e036      	b.n	80a1148 <localtime_r+0x1b8>
 80a10da:	2b00      	cmp	r3, #0
 80a10dc:	da34      	bge.n	80a1148 <localtime_r+0x1b8>
 80a10de:	69e2      	ldr	r2, [r4, #28]
 80a10e0:	3318      	adds	r3, #24
 80a10e2:	3a01      	subs	r2, #1
 80a10e4:	61e2      	str	r2, [r4, #28]
 80a10e6:	69a2      	ldr	r2, [r4, #24]
 80a10e8:	60a3      	str	r3, [r4, #8]
 80a10ea:	3a01      	subs	r2, #1
 80a10ec:	bf48      	it	mi
 80a10ee:	2206      	movmi	r2, #6
 80a10f0:	61a2      	str	r2, [r4, #24]
 80a10f2:	68e2      	ldr	r2, [r4, #12]
 80a10f4:	3a01      	subs	r2, #1
 80a10f6:	60e2      	str	r2, [r4, #12]
 80a10f8:	bb32      	cbnz	r2, 80a1148 <localtime_r+0x1b8>
 80a10fa:	6923      	ldr	r3, [r4, #16]
 80a10fc:	3b01      	subs	r3, #1
 80a10fe:	d401      	bmi.n	80a1104 <localtime_r+0x174>
 80a1100:	6123      	str	r3, [r4, #16]
 80a1102:	e01d      	b.n	80a1140 <localtime_r+0x1b0>
 80a1104:	230b      	movs	r3, #11
 80a1106:	6123      	str	r3, [r4, #16]
 80a1108:	6963      	ldr	r3, [r4, #20]
 80a110a:	1e5a      	subs	r2, r3, #1
 80a110c:	f012 0f03 	tst.w	r2, #3
 80a1110:	6162      	str	r2, [r4, #20]
 80a1112:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a1116:	d105      	bne.n	80a1124 <localtime_r+0x194>
 80a1118:	2164      	movs	r1, #100	; 0x64
 80a111a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a111e:	fb01 3212 	mls	r2, r1, r2, r3
 80a1122:	b94a      	cbnz	r2, 80a1138 <localtime_r+0x1a8>
 80a1124:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a1128:	fb93 f2f1 	sdiv	r2, r3, r1
 80a112c:	fb01 3312 	mls	r3, r1, r2, r3
 80a1130:	fab3 f383 	clz	r3, r3
 80a1134:	095b      	lsrs	r3, r3, #5
 80a1136:	e000      	b.n	80a113a <localtime_r+0x1aa>
 80a1138:	2301      	movs	r3, #1
 80a113a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a113e:	61e3      	str	r3, [r4, #28]
 80a1140:	6923      	ldr	r3, [r4, #16]
 80a1142:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a1146:	60e3      	str	r3, [r4, #12]
 80a1148:	f000 f9a5 	bl	80a1496 <__tz_unlock>
 80a114c:	4620      	mov	r0, r4
 80a114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1152:	bf00      	nop
 80a1154:	080a1cd8 	.word	0x080a1cd8
 80a1158:	20000680 	.word	0x20000680

080a115c <memcpy>:
 80a115c:	b510      	push	{r4, lr}
 80a115e:	1e43      	subs	r3, r0, #1
 80a1160:	440a      	add	r2, r1
 80a1162:	4291      	cmp	r1, r2
 80a1164:	d004      	beq.n	80a1170 <memcpy+0x14>
 80a1166:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a116a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a116e:	e7f8      	b.n	80a1162 <memcpy+0x6>
 80a1170:	bd10      	pop	{r4, pc}

080a1172 <memset>:
 80a1172:	4603      	mov	r3, r0
 80a1174:	4402      	add	r2, r0
 80a1176:	4293      	cmp	r3, r2
 80a1178:	d002      	beq.n	80a1180 <memset+0xe>
 80a117a:	f803 1b01 	strb.w	r1, [r3], #1
 80a117e:	e7fa      	b.n	80a1176 <memset+0x4>
 80a1180:	4770      	bx	lr
	...

080a1184 <srand>:
 80a1184:	b538      	push	{r3, r4, r5, lr}
 80a1186:	4b12      	ldr	r3, [pc, #72]	; (80a11d0 <srand+0x4c>)
 80a1188:	4605      	mov	r5, r0
 80a118a:	681c      	ldr	r4, [r3, #0]
 80a118c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a118e:	b9d3      	cbnz	r3, 80a11c6 <srand+0x42>
 80a1190:	2018      	movs	r0, #24
 80a1192:	f7ff f8ff 	bl	80a0394 <malloc>
 80a1196:	f243 330e 	movw	r3, #13070	; 0x330e
 80a119a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a119c:	8003      	strh	r3, [r0, #0]
 80a119e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a11a2:	8043      	strh	r3, [r0, #2]
 80a11a4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a11a8:	8083      	strh	r3, [r0, #4]
 80a11aa:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a11ae:	80c3      	strh	r3, [r0, #6]
 80a11b0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a11b4:	8103      	strh	r3, [r0, #8]
 80a11b6:	2305      	movs	r3, #5
 80a11b8:	8143      	strh	r3, [r0, #10]
 80a11ba:	230b      	movs	r3, #11
 80a11bc:	8183      	strh	r3, [r0, #12]
 80a11be:	2201      	movs	r2, #1
 80a11c0:	2300      	movs	r3, #0
 80a11c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a11c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a11c8:	2200      	movs	r2, #0
 80a11ca:	611d      	str	r5, [r3, #16]
 80a11cc:	615a      	str	r2, [r3, #20]
 80a11ce:	bd38      	pop	{r3, r4, r5, pc}
 80a11d0:	20000068 	.word	0x20000068

080a11d4 <strcmp>:
 80a11d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a11d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a11dc:	2a01      	cmp	r2, #1
 80a11de:	bf28      	it	cs
 80a11e0:	429a      	cmpcs	r2, r3
 80a11e2:	d0f7      	beq.n	80a11d4 <strcmp>
 80a11e4:	1ad0      	subs	r0, r2, r3
 80a11e6:	4770      	bx	lr

080a11e8 <strcpy>:
 80a11e8:	4603      	mov	r3, r0
 80a11ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a11ee:	f803 2b01 	strb.w	r2, [r3], #1
 80a11f2:	2a00      	cmp	r2, #0
 80a11f4:	d1f9      	bne.n	80a11ea <strcpy+0x2>
 80a11f6:	4770      	bx	lr

080a11f8 <strlen>:
 80a11f8:	4603      	mov	r3, r0
 80a11fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a11fe:	2a00      	cmp	r2, #0
 80a1200:	d1fb      	bne.n	80a11fa <strlen+0x2>
 80a1202:	1a18      	subs	r0, r3, r0
 80a1204:	3801      	subs	r0, #1
 80a1206:	4770      	bx	lr

080a1208 <strncmp>:
 80a1208:	b530      	push	{r4, r5, lr}
 80a120a:	b182      	cbz	r2, 80a122e <strncmp+0x26>
 80a120c:	1e45      	subs	r5, r0, #1
 80a120e:	3901      	subs	r1, #1
 80a1210:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a1214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a1218:	42a3      	cmp	r3, r4
 80a121a:	d106      	bne.n	80a122a <strncmp+0x22>
 80a121c:	43ec      	mvns	r4, r5
 80a121e:	4414      	add	r4, r2
 80a1220:	42e0      	cmn	r0, r4
 80a1222:	d001      	beq.n	80a1228 <strncmp+0x20>
 80a1224:	2b00      	cmp	r3, #0
 80a1226:	d1f3      	bne.n	80a1210 <strncmp+0x8>
 80a1228:	461c      	mov	r4, r3
 80a122a:	1b18      	subs	r0, r3, r4
 80a122c:	bd30      	pop	{r4, r5, pc}
 80a122e:	4610      	mov	r0, r2
 80a1230:	bd30      	pop	{r4, r5, pc}
	...

080a1234 <_strtoul_r>:
 80a1234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1238:	460e      	mov	r6, r1
 80a123a:	4680      	mov	r8, r0
 80a123c:	483b      	ldr	r0, [pc, #236]	; (80a132c <_strtoul_r+0xf8>)
 80a123e:	f8d0 9000 	ldr.w	r9, [r0]
 80a1242:	4635      	mov	r5, r6
 80a1244:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1248:	eb09 0004 	add.w	r0, r9, r4
 80a124c:	7840      	ldrb	r0, [r0, #1]
 80a124e:	f000 0008 	and.w	r0, r0, #8
 80a1252:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a1256:	b108      	cbz	r0, 80a125c <_strtoul_r+0x28>
 80a1258:	462e      	mov	r6, r5
 80a125a:	e7f2      	b.n	80a1242 <_strtoul_r+0xe>
 80a125c:	2c2d      	cmp	r4, #45	; 0x2d
 80a125e:	d103      	bne.n	80a1268 <_strtoul_r+0x34>
 80a1260:	1cb5      	adds	r5, r6, #2
 80a1262:	7874      	ldrb	r4, [r6, #1]
 80a1264:	2701      	movs	r7, #1
 80a1266:	e003      	b.n	80a1270 <_strtoul_r+0x3c>
 80a1268:	2c2b      	cmp	r4, #43	; 0x2b
 80a126a:	bf04      	itt	eq
 80a126c:	7874      	ldrbeq	r4, [r6, #1]
 80a126e:	1cb5      	addeq	r5, r6, #2
 80a1270:	b113      	cbz	r3, 80a1278 <_strtoul_r+0x44>
 80a1272:	2b10      	cmp	r3, #16
 80a1274:	d10a      	bne.n	80a128c <_strtoul_r+0x58>
 80a1276:	e053      	b.n	80a1320 <_strtoul_r+0xec>
 80a1278:	2c30      	cmp	r4, #48	; 0x30
 80a127a:	d14f      	bne.n	80a131c <_strtoul_r+0xe8>
 80a127c:	7828      	ldrb	r0, [r5, #0]
 80a127e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1282:	2858      	cmp	r0, #88	; 0x58
 80a1284:	d145      	bne.n	80a1312 <_strtoul_r+0xde>
 80a1286:	786c      	ldrb	r4, [r5, #1]
 80a1288:	2310      	movs	r3, #16
 80a128a:	3502      	adds	r5, #2
 80a128c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a1290:	fbbc fcf3 	udiv	ip, ip, r3
 80a1294:	fb03 fa0c 	mul.w	sl, r3, ip
 80a1298:	2600      	movs	r6, #0
 80a129a:	ea6f 0a0a 	mvn.w	sl, sl
 80a129e:	4630      	mov	r0, r6
 80a12a0:	eb09 0e04 	add.w	lr, r9, r4
 80a12a4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a12a8:	f01e 0f04 	tst.w	lr, #4
 80a12ac:	d001      	beq.n	80a12b2 <_strtoul_r+0x7e>
 80a12ae:	3c30      	subs	r4, #48	; 0x30
 80a12b0:	e00b      	b.n	80a12ca <_strtoul_r+0x96>
 80a12b2:	f01e 0e03 	ands.w	lr, lr, #3
 80a12b6:	d01a      	beq.n	80a12ee <_strtoul_r+0xba>
 80a12b8:	f1be 0f01 	cmp.w	lr, #1
 80a12bc:	bf0c      	ite	eq
 80a12be:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a12c2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a12c6:	ebce 0404 	rsb	r4, lr, r4
 80a12ca:	42a3      	cmp	r3, r4
 80a12cc:	dd0f      	ble.n	80a12ee <_strtoul_r+0xba>
 80a12ce:	2e00      	cmp	r6, #0
 80a12d0:	db08      	blt.n	80a12e4 <_strtoul_r+0xb0>
 80a12d2:	4560      	cmp	r0, ip
 80a12d4:	d806      	bhi.n	80a12e4 <_strtoul_r+0xb0>
 80a12d6:	d101      	bne.n	80a12dc <_strtoul_r+0xa8>
 80a12d8:	4554      	cmp	r4, sl
 80a12da:	dc03      	bgt.n	80a12e4 <_strtoul_r+0xb0>
 80a12dc:	fb03 4000 	mla	r0, r3, r0, r4
 80a12e0:	2601      	movs	r6, #1
 80a12e2:	e001      	b.n	80a12e8 <_strtoul_r+0xb4>
 80a12e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a12e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a12ec:	e7d8      	b.n	80a12a0 <_strtoul_r+0x6c>
 80a12ee:	2e00      	cmp	r6, #0
 80a12f0:	da07      	bge.n	80a1302 <_strtoul_r+0xce>
 80a12f2:	2322      	movs	r3, #34	; 0x22
 80a12f4:	f8c8 3000 	str.w	r3, [r8]
 80a12f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a12fc:	b92a      	cbnz	r2, 80a130a <_strtoul_r+0xd6>
 80a12fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1302:	b107      	cbz	r7, 80a1306 <_strtoul_r+0xd2>
 80a1304:	4240      	negs	r0, r0
 80a1306:	b172      	cbz	r2, 80a1326 <_strtoul_r+0xf2>
 80a1308:	b106      	cbz	r6, 80a130c <_strtoul_r+0xd8>
 80a130a:	1e69      	subs	r1, r5, #1
 80a130c:	6011      	str	r1, [r2, #0]
 80a130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1312:	2430      	movs	r4, #48	; 0x30
 80a1314:	2b00      	cmp	r3, #0
 80a1316:	d1b9      	bne.n	80a128c <_strtoul_r+0x58>
 80a1318:	2308      	movs	r3, #8
 80a131a:	e7b7      	b.n	80a128c <_strtoul_r+0x58>
 80a131c:	230a      	movs	r3, #10
 80a131e:	e7b5      	b.n	80a128c <_strtoul_r+0x58>
 80a1320:	2c30      	cmp	r4, #48	; 0x30
 80a1322:	d0ab      	beq.n	80a127c <_strtoul_r+0x48>
 80a1324:	e7b2      	b.n	80a128c <_strtoul_r+0x58>
 80a1326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a132a:	bf00      	nop
 80a132c:	20000004 	.word	0x20000004

080a1330 <strtoul>:
 80a1330:	4613      	mov	r3, r2
 80a1332:	460a      	mov	r2, r1
 80a1334:	4601      	mov	r1, r0
 80a1336:	4802      	ldr	r0, [pc, #8]	; (80a1340 <strtoul+0x10>)
 80a1338:	6800      	ldr	r0, [r0, #0]
 80a133a:	f7ff bf7b 	b.w	80a1234 <_strtoul_r>
 80a133e:	bf00      	nop
 80a1340:	20000068 	.word	0x20000068

080a1344 <__tzcalc_limits>:
 80a1344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1348:	4604      	mov	r4, r0
 80a134a:	f000 fa6f 	bl	80a182c <__gettzinfo>
 80a134e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a1352:	429c      	cmp	r4, r3
 80a1354:	f340 8096 	ble.w	80a1484 <__tzcalc_limits+0x140>
 80a1358:	f240 156d 	movw	r5, #365	; 0x16d
 80a135c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a1360:	18e3      	adds	r3, r4, r3
 80a1362:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a1366:	109b      	asrs	r3, r3, #2
 80a1368:	fb05 3502 	mla	r5, r5, r2, r3
 80a136c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a1370:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a1374:	fb92 f3f3 	sdiv	r3, r2, r3
 80a1378:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a137c:	442b      	add	r3, r5
 80a137e:	18a5      	adds	r5, r4, r2
 80a1380:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a1384:	fb94 f7f2 	sdiv	r7, r4, r2
 80a1388:	fb95 f5f2 	sdiv	r5, r5, r2
 80a138c:	fb02 4717 	mls	r7, r2, r7, r4
 80a1390:	441d      	add	r5, r3
 80a1392:	2364      	movs	r3, #100	; 0x64
 80a1394:	fb94 f6f3 	sdiv	r6, r4, r3
 80a1398:	fab7 fe87 	clz	lr, r7
 80a139c:	4601      	mov	r1, r0
 80a139e:	fb03 4616 	mls	r6, r3, r6, r4
 80a13a2:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a13a6:	9301      	str	r3, [sp, #4]
 80a13a8:	f004 0303 	and.w	r3, r4, #3
 80a13ac:	6044      	str	r4, [r0, #4]
 80a13ae:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a13b2:	9300      	str	r3, [sp, #0]
 80a13b4:	f04f 0c07 	mov.w	ip, #7
 80a13b8:	7a0b      	ldrb	r3, [r1, #8]
 80a13ba:	2b4a      	cmp	r3, #74	; 0x4a
 80a13bc:	d10e      	bne.n	80a13dc <__tzcalc_limits+0x98>
 80a13be:	694b      	ldr	r3, [r1, #20]
 80a13c0:	9a00      	ldr	r2, [sp, #0]
 80a13c2:	18ec      	adds	r4, r5, r3
 80a13c4:	b902      	cbnz	r2, 80a13c8 <__tzcalc_limits+0x84>
 80a13c6:	b906      	cbnz	r6, 80a13ca <__tzcalc_limits+0x86>
 80a13c8:	b927      	cbnz	r7, 80a13d4 <__tzcalc_limits+0x90>
 80a13ca:	2b3b      	cmp	r3, #59	; 0x3b
 80a13cc:	bfd4      	ite	le
 80a13ce:	2300      	movle	r3, #0
 80a13d0:	2301      	movgt	r3, #1
 80a13d2:	e000      	b.n	80a13d6 <__tzcalc_limits+0x92>
 80a13d4:	2300      	movs	r3, #0
 80a13d6:	4423      	add	r3, r4
 80a13d8:	3b01      	subs	r3, #1
 80a13da:	e03f      	b.n	80a145c <__tzcalc_limits+0x118>
 80a13dc:	2b44      	cmp	r3, #68	; 0x44
 80a13de:	d102      	bne.n	80a13e6 <__tzcalc_limits+0xa2>
 80a13e0:	694b      	ldr	r3, [r1, #20]
 80a13e2:	442b      	add	r3, r5
 80a13e4:	e03a      	b.n	80a145c <__tzcalc_limits+0x118>
 80a13e6:	9b00      	ldr	r3, [sp, #0]
 80a13e8:	b92b      	cbnz	r3, 80a13f6 <__tzcalc_limits+0xb2>
 80a13ea:	2e00      	cmp	r6, #0
 80a13ec:	bf0c      	ite	eq
 80a13ee:	46f0      	moveq	r8, lr
 80a13f0:	f04f 0801 	movne.w	r8, #1
 80a13f4:	e000      	b.n	80a13f8 <__tzcalc_limits+0xb4>
 80a13f6:	46f0      	mov	r8, lr
 80a13f8:	46a9      	mov	r9, r5
 80a13fa:	4b24      	ldr	r3, [pc, #144]	; (80a148c <__tzcalc_limits+0x148>)
 80a13fc:	2230      	movs	r2, #48	; 0x30
 80a13fe:	fb02 3808 	mla	r8, r2, r8, r3
 80a1402:	68cc      	ldr	r4, [r1, #12]
 80a1404:	f1a8 0a04 	sub.w	sl, r8, #4
 80a1408:	2301      	movs	r3, #1
 80a140a:	42a3      	cmp	r3, r4
 80a140c:	da04      	bge.n	80a1418 <__tzcalc_limits+0xd4>
 80a140e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a1412:	3301      	adds	r3, #1
 80a1414:	44d9      	add	r9, fp
 80a1416:	e7f8      	b.n	80a140a <__tzcalc_limits+0xc6>
 80a1418:	f109 0304 	add.w	r3, r9, #4
 80a141c:	fb93 fbfc 	sdiv	fp, r3, ip
 80a1420:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a1424:	ebca 0a03 	rsb	sl, sl, r3
 80a1428:	694b      	ldr	r3, [r1, #20]
 80a142a:	2c01      	cmp	r4, #1
 80a142c:	bfb8      	it	lt
 80a142e:	2401      	movlt	r4, #1
 80a1430:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a1434:	690b      	ldr	r3, [r1, #16]
 80a1436:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a143a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a143e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a1442:	bf48      	it	mi
 80a1444:	f10a 0a07 	addmi.w	sl, sl, #7
 80a1448:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a144c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a1450:	4453      	add	r3, sl
 80a1452:	42a3      	cmp	r3, r4
 80a1454:	db01      	blt.n	80a145a <__tzcalc_limits+0x116>
 80a1456:	3b07      	subs	r3, #7
 80a1458:	e7fb      	b.n	80a1452 <__tzcalc_limits+0x10e>
 80a145a:	444b      	add	r3, r9
 80a145c:	698c      	ldr	r4, [r1, #24]
 80a145e:	4a0c      	ldr	r2, [pc, #48]	; (80a1490 <__tzcalc_limits+0x14c>)
 80a1460:	fb02 4303 	mla	r3, r2, r3, r4
 80a1464:	6a0c      	ldr	r4, [r1, #32]
 80a1466:	4423      	add	r3, r4
 80a1468:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a146c:	9b01      	ldr	r3, [sp, #4]
 80a146e:	4299      	cmp	r1, r3
 80a1470:	d1a2      	bne.n	80a13b8 <__tzcalc_limits+0x74>
 80a1472:	69c3      	ldr	r3, [r0, #28]
 80a1474:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a1476:	4293      	cmp	r3, r2
 80a1478:	bfac      	ite	ge
 80a147a:	2300      	movge	r3, #0
 80a147c:	2301      	movlt	r3, #1
 80a147e:	6003      	str	r3, [r0, #0]
 80a1480:	2001      	movs	r0, #1
 80a1482:	e000      	b.n	80a1486 <__tzcalc_limits+0x142>
 80a1484:	2000      	movs	r0, #0
 80a1486:	b003      	add	sp, #12
 80a1488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a148c:	080a1cd8 	.word	0x080a1cd8
 80a1490:	00015180 	.word	0x00015180

080a1494 <__tz_lock>:
 80a1494:	4770      	bx	lr

080a1496 <__tz_unlock>:
 80a1496:	4770      	bx	lr

080a1498 <_tzset_unlocked>:
 80a1498:	4b01      	ldr	r3, [pc, #4]	; (80a14a0 <_tzset_unlocked+0x8>)
 80a149a:	6818      	ldr	r0, [r3, #0]
 80a149c:	f000 b802 	b.w	80a14a4 <_tzset_unlocked_r>
 80a14a0:	20000068 	.word	0x20000068

080a14a4 <_tzset_unlocked_r>:
 80a14a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14a8:	b08d      	sub	sp, #52	; 0x34
 80a14aa:	4607      	mov	r7, r0
 80a14ac:	f000 f9be 	bl	80a182c <__gettzinfo>
 80a14b0:	49b0      	ldr	r1, [pc, #704]	; (80a1774 <_tzset_unlocked_r+0x2d0>)
 80a14b2:	4604      	mov	r4, r0
 80a14b4:	4638      	mov	r0, r7
 80a14b6:	f000 f9b1 	bl	80a181c <_getenv_r>
 80a14ba:	4eaf      	ldr	r6, [pc, #700]	; (80a1778 <_tzset_unlocked_r+0x2d4>)
 80a14bc:	4605      	mov	r5, r0
 80a14be:	b960      	cbnz	r0, 80a14da <_tzset_unlocked_r+0x36>
 80a14c0:	4bae      	ldr	r3, [pc, #696]	; (80a177c <_tzset_unlocked_r+0x2d8>)
 80a14c2:	4aaf      	ldr	r2, [pc, #700]	; (80a1780 <_tzset_unlocked_r+0x2dc>)
 80a14c4:	6018      	str	r0, [r3, #0]
 80a14c6:	4baf      	ldr	r3, [pc, #700]	; (80a1784 <_tzset_unlocked_r+0x2e0>)
 80a14c8:	6018      	str	r0, [r3, #0]
 80a14ca:	4baf      	ldr	r3, [pc, #700]	; (80a1788 <_tzset_unlocked_r+0x2e4>)
 80a14cc:	6830      	ldr	r0, [r6, #0]
 80a14ce:	601a      	str	r2, [r3, #0]
 80a14d0:	605a      	str	r2, [r3, #4]
 80a14d2:	f7fe ff67 	bl	80a03a4 <free>
 80a14d6:	6035      	str	r5, [r6, #0]
 80a14d8:	e148      	b.n	80a176c <_tzset_unlocked_r+0x2c8>
 80a14da:	6831      	ldr	r1, [r6, #0]
 80a14dc:	b979      	cbnz	r1, 80a14fe <_tzset_unlocked_r+0x5a>
 80a14de:	6830      	ldr	r0, [r6, #0]
 80a14e0:	f7fe ff60 	bl	80a03a4 <free>
 80a14e4:	4628      	mov	r0, r5
 80a14e6:	f7ff fe87 	bl	80a11f8 <strlen>
 80a14ea:	1c41      	adds	r1, r0, #1
 80a14ec:	4638      	mov	r0, r7
 80a14ee:	f7fe ff69 	bl	80a03c4 <_malloc_r>
 80a14f2:	6030      	str	r0, [r6, #0]
 80a14f4:	b148      	cbz	r0, 80a150a <_tzset_unlocked_r+0x66>
 80a14f6:	4629      	mov	r1, r5
 80a14f8:	f7ff fe76 	bl	80a11e8 <strcpy>
 80a14fc:	e005      	b.n	80a150a <_tzset_unlocked_r+0x66>
 80a14fe:	f7ff fe69 	bl	80a11d4 <strcmp>
 80a1502:	2800      	cmp	r0, #0
 80a1504:	f000 8132 	beq.w	80a176c <_tzset_unlocked_r+0x2c8>
 80a1508:	e7e9      	b.n	80a14de <_tzset_unlocked_r+0x3a>
 80a150a:	782b      	ldrb	r3, [r5, #0]
 80a150c:	ae0a      	add	r6, sp, #40	; 0x28
 80a150e:	2b3a      	cmp	r3, #58	; 0x3a
 80a1510:	bf08      	it	eq
 80a1512:	3501      	addeq	r5, #1
 80a1514:	4633      	mov	r3, r6
 80a1516:	4a9d      	ldr	r2, [pc, #628]	; (80a178c <_tzset_unlocked_r+0x2e8>)
 80a1518:	499d      	ldr	r1, [pc, #628]	; (80a1790 <_tzset_unlocked_r+0x2ec>)
 80a151a:	4628      	mov	r0, r5
 80a151c:	f7fe ff4a 	bl	80a03b4 <siscanf>
 80a1520:	2800      	cmp	r0, #0
 80a1522:	f340 8123 	ble.w	80a176c <_tzset_unlocked_r+0x2c8>
 80a1526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1528:	18ef      	adds	r7, r5, r3
 80a152a:	5ceb      	ldrb	r3, [r5, r3]
 80a152c:	2b2d      	cmp	r3, #45	; 0x2d
 80a152e:	d103      	bne.n	80a1538 <_tzset_unlocked_r+0x94>
 80a1530:	3701      	adds	r7, #1
 80a1532:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a1536:	e003      	b.n	80a1540 <_tzset_unlocked_r+0x9c>
 80a1538:	2b2b      	cmp	r3, #43	; 0x2b
 80a153a:	bf08      	it	eq
 80a153c:	3701      	addeq	r7, #1
 80a153e:	2501      	movs	r5, #1
 80a1540:	f10d 0a20 	add.w	sl, sp, #32
 80a1544:	f10d 0b1e 	add.w	fp, sp, #30
 80a1548:	f04f 0800 	mov.w	r8, #0
 80a154c:	9603      	str	r6, [sp, #12]
 80a154e:	f8cd a008 	str.w	sl, [sp, #8]
 80a1552:	9601      	str	r6, [sp, #4]
 80a1554:	f8cd b000 	str.w	fp, [sp]
 80a1558:	4633      	mov	r3, r6
 80a155a:	aa07      	add	r2, sp, #28
 80a155c:	498d      	ldr	r1, [pc, #564]	; (80a1794 <_tzset_unlocked_r+0x2f0>)
 80a155e:	4638      	mov	r0, r7
 80a1560:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a1564:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a1568:	f7fe ff24 	bl	80a03b4 <siscanf>
 80a156c:	4540      	cmp	r0, r8
 80a156e:	f340 80fd 	ble.w	80a176c <_tzset_unlocked_r+0x2c8>
 80a1572:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a1576:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a157a:	213c      	movs	r1, #60	; 0x3c
 80a157c:	fb01 3302 	mla	r3, r1, r2, r3
 80a1580:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a1584:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1588:	fb01 3302 	mla	r3, r1, r2, r3
 80a158c:	435d      	muls	r5, r3
 80a158e:	4b7f      	ldr	r3, [pc, #508]	; (80a178c <_tzset_unlocked_r+0x2e8>)
 80a1590:	6225      	str	r5, [r4, #32]
 80a1592:	4d7d      	ldr	r5, [pc, #500]	; (80a1788 <_tzset_unlocked_r+0x2e4>)
 80a1594:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a17a0 <_tzset_unlocked_r+0x2fc>
 80a1598:	602b      	str	r3, [r5, #0]
 80a159a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a159c:	464a      	mov	r2, r9
 80a159e:	441f      	add	r7, r3
 80a15a0:	497b      	ldr	r1, [pc, #492]	; (80a1790 <_tzset_unlocked_r+0x2ec>)
 80a15a2:	4633      	mov	r3, r6
 80a15a4:	4638      	mov	r0, r7
 80a15a6:	f7fe ff05 	bl	80a03b4 <siscanf>
 80a15aa:	4540      	cmp	r0, r8
 80a15ac:	dc08      	bgt.n	80a15c0 <_tzset_unlocked_r+0x11c>
 80a15ae:	682b      	ldr	r3, [r5, #0]
 80a15b0:	6a22      	ldr	r2, [r4, #32]
 80a15b2:	606b      	str	r3, [r5, #4]
 80a15b4:	4b71      	ldr	r3, [pc, #452]	; (80a177c <_tzset_unlocked_r+0x2d8>)
 80a15b6:	601a      	str	r2, [r3, #0]
 80a15b8:	4b72      	ldr	r3, [pc, #456]	; (80a1784 <_tzset_unlocked_r+0x2e0>)
 80a15ba:	f8c3 8000 	str.w	r8, [r3]
 80a15be:	e0d5      	b.n	80a176c <_tzset_unlocked_r+0x2c8>
 80a15c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a15c2:	f8c5 9004 	str.w	r9, [r5, #4]
 80a15c6:	18fd      	adds	r5, r7, r3
 80a15c8:	5cfb      	ldrb	r3, [r7, r3]
 80a15ca:	2b2d      	cmp	r3, #45	; 0x2d
 80a15cc:	d103      	bne.n	80a15d6 <_tzset_unlocked_r+0x132>
 80a15ce:	3501      	adds	r5, #1
 80a15d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a15d4:	e003      	b.n	80a15de <_tzset_unlocked_r+0x13a>
 80a15d6:	2b2b      	cmp	r3, #43	; 0x2b
 80a15d8:	bf08      	it	eq
 80a15da:	3501      	addeq	r5, #1
 80a15dc:	2701      	movs	r7, #1
 80a15de:	2300      	movs	r3, #0
 80a15e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a15e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a15e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a15ec:	930a      	str	r3, [sp, #40]	; 0x28
 80a15ee:	9603      	str	r6, [sp, #12]
 80a15f0:	f8cd a008 	str.w	sl, [sp, #8]
 80a15f4:	9601      	str	r6, [sp, #4]
 80a15f6:	f8cd b000 	str.w	fp, [sp]
 80a15fa:	4633      	mov	r3, r6
 80a15fc:	aa07      	add	r2, sp, #28
 80a15fe:	4965      	ldr	r1, [pc, #404]	; (80a1794 <_tzset_unlocked_r+0x2f0>)
 80a1600:	4628      	mov	r0, r5
 80a1602:	f7fe fed7 	bl	80a03b4 <siscanf>
 80a1606:	2800      	cmp	r0, #0
 80a1608:	dc04      	bgt.n	80a1614 <_tzset_unlocked_r+0x170>
 80a160a:	6a23      	ldr	r3, [r4, #32]
 80a160c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a1610:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a1612:	e00e      	b.n	80a1632 <_tzset_unlocked_r+0x18e>
 80a1614:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a1618:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a161c:	213c      	movs	r1, #60	; 0x3c
 80a161e:	fb01 3302 	mla	r3, r1, r2, r3
 80a1622:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a1626:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a162a:	fb01 3302 	mla	r3, r1, r2, r3
 80a162e:	435f      	muls	r7, r3
 80a1630:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a1632:	4627      	mov	r7, r4
 80a1634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1636:	f04f 0900 	mov.w	r9, #0
 80a163a:	441d      	add	r5, r3
 80a163c:	782b      	ldrb	r3, [r5, #0]
 80a163e:	2b2c      	cmp	r3, #44	; 0x2c
 80a1640:	bf08      	it	eq
 80a1642:	3501      	addeq	r5, #1
 80a1644:	f895 8000 	ldrb.w	r8, [r5]
 80a1648:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a164c:	d126      	bne.n	80a169c <_tzset_unlocked_r+0x1f8>
 80a164e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a1652:	9302      	str	r3, [sp, #8]
 80a1654:	ab09      	add	r3, sp, #36	; 0x24
 80a1656:	9300      	str	r3, [sp, #0]
 80a1658:	9603      	str	r6, [sp, #12]
 80a165a:	9601      	str	r6, [sp, #4]
 80a165c:	4633      	mov	r3, r6
 80a165e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a1662:	494d      	ldr	r1, [pc, #308]	; (80a1798 <_tzset_unlocked_r+0x2f4>)
 80a1664:	4628      	mov	r0, r5
 80a1666:	f7fe fea5 	bl	80a03b4 <siscanf>
 80a166a:	2803      	cmp	r0, #3
 80a166c:	d17e      	bne.n	80a176c <_tzset_unlocked_r+0x2c8>
 80a166e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a1672:	1e4b      	subs	r3, r1, #1
 80a1674:	2b0b      	cmp	r3, #11
 80a1676:	d879      	bhi.n	80a176c <_tzset_unlocked_r+0x2c8>
 80a1678:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a167c:	1e53      	subs	r3, r2, #1
 80a167e:	2b04      	cmp	r3, #4
 80a1680:	d874      	bhi.n	80a176c <_tzset_unlocked_r+0x2c8>
 80a1682:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a1686:	2b06      	cmp	r3, #6
 80a1688:	d870      	bhi.n	80a176c <_tzset_unlocked_r+0x2c8>
 80a168a:	f887 8008 	strb.w	r8, [r7, #8]
 80a168e:	60f9      	str	r1, [r7, #12]
 80a1690:	613a      	str	r2, [r7, #16]
 80a1692:	617b      	str	r3, [r7, #20]
 80a1694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1696:	eb05 0803 	add.w	r8, r5, r3
 80a169a:	e02a      	b.n	80a16f2 <_tzset_unlocked_r+0x24e>
 80a169c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a16a0:	bf06      	itte	eq
 80a16a2:	4643      	moveq	r3, r8
 80a16a4:	3501      	addeq	r5, #1
 80a16a6:	2344      	movne	r3, #68	; 0x44
 80a16a8:	220a      	movs	r2, #10
 80a16aa:	a90b      	add	r1, sp, #44	; 0x2c
 80a16ac:	4628      	mov	r0, r5
 80a16ae:	9305      	str	r3, [sp, #20]
 80a16b0:	f7ff fe3e 	bl	80a1330 <strtoul>
 80a16b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a16b8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a16bc:	4545      	cmp	r5, r8
 80a16be:	9b05      	ldr	r3, [sp, #20]
 80a16c0:	d114      	bne.n	80a16ec <_tzset_unlocked_r+0x248>
 80a16c2:	234d      	movs	r3, #77	; 0x4d
 80a16c4:	f1b9 0f00 	cmp.w	r9, #0
 80a16c8:	d107      	bne.n	80a16da <_tzset_unlocked_r+0x236>
 80a16ca:	7223      	strb	r3, [r4, #8]
 80a16cc:	2303      	movs	r3, #3
 80a16ce:	60e3      	str	r3, [r4, #12]
 80a16d0:	2302      	movs	r3, #2
 80a16d2:	6123      	str	r3, [r4, #16]
 80a16d4:	f8c4 9014 	str.w	r9, [r4, #20]
 80a16d8:	e00b      	b.n	80a16f2 <_tzset_unlocked_r+0x24e>
 80a16da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a16de:	230b      	movs	r3, #11
 80a16e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80a16e2:	2301      	movs	r3, #1
 80a16e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a16e6:	2300      	movs	r3, #0
 80a16e8:	6323      	str	r3, [r4, #48]	; 0x30
 80a16ea:	e002      	b.n	80a16f2 <_tzset_unlocked_r+0x24e>
 80a16ec:	b280      	uxth	r0, r0
 80a16ee:	723b      	strb	r3, [r7, #8]
 80a16f0:	6178      	str	r0, [r7, #20]
 80a16f2:	2302      	movs	r3, #2
 80a16f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a16f8:	2300      	movs	r3, #0
 80a16fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a16fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a1702:	930a      	str	r3, [sp, #40]	; 0x28
 80a1704:	f898 3000 	ldrb.w	r3, [r8]
 80a1708:	2b2f      	cmp	r3, #47	; 0x2f
 80a170a:	d10b      	bne.n	80a1724 <_tzset_unlocked_r+0x280>
 80a170c:	9603      	str	r6, [sp, #12]
 80a170e:	f8cd a008 	str.w	sl, [sp, #8]
 80a1712:	9601      	str	r6, [sp, #4]
 80a1714:	f8cd b000 	str.w	fp, [sp]
 80a1718:	4633      	mov	r3, r6
 80a171a:	aa07      	add	r2, sp, #28
 80a171c:	491f      	ldr	r1, [pc, #124]	; (80a179c <_tzset_unlocked_r+0x2f8>)
 80a171e:	4640      	mov	r0, r8
 80a1720:	f7fe fe48 	bl	80a03b4 <siscanf>
 80a1724:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a1728:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a172c:	213c      	movs	r1, #60	; 0x3c
 80a172e:	fb01 3302 	mla	r3, r1, r2, r3
 80a1732:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a1736:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a173a:	fb01 3302 	mla	r3, r1, r2, r3
 80a173e:	61bb      	str	r3, [r7, #24]
 80a1740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a1742:	f109 0901 	add.w	r9, r9, #1
 80a1746:	f1b9 0f02 	cmp.w	r9, #2
 80a174a:	4445      	add	r5, r8
 80a174c:	f107 071c 	add.w	r7, r7, #28
 80a1750:	f47f af74 	bne.w	80a163c <_tzset_unlocked_r+0x198>
 80a1754:	6860      	ldr	r0, [r4, #4]
 80a1756:	f7ff fdf5 	bl	80a1344 <__tzcalc_limits>
 80a175a:	6a22      	ldr	r2, [r4, #32]
 80a175c:	4b07      	ldr	r3, [pc, #28]	; (80a177c <_tzset_unlocked_r+0x2d8>)
 80a175e:	601a      	str	r2, [r3, #0]
 80a1760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1762:	1a9b      	subs	r3, r3, r2
 80a1764:	4a07      	ldr	r2, [pc, #28]	; (80a1784 <_tzset_unlocked_r+0x2e0>)
 80a1766:	bf18      	it	ne
 80a1768:	2301      	movne	r3, #1
 80a176a:	6013      	str	r3, [r2, #0]
 80a176c:	b00d      	add	sp, #52	; 0x34
 80a176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1772:	bf00      	nop
 80a1774:	080a1d38 	.word	0x080a1d38
 80a1778:	2000067c 	.word	0x2000067c
 80a177c:	20000684 	.word	0x20000684
 80a1780:	080a1d3b 	.word	0x080a1d3b
 80a1784:	20000680 	.word	0x20000680
 80a1788:	2000006c 	.word	0x2000006c
 80a178c:	2000066f 	.word	0x2000066f
 80a1790:	080a1d3f 	.word	0x080a1d3f
 80a1794:	080a1d62 	.word	0x080a1d62
 80a1798:	080a1d4e 	.word	0x080a1d4e
 80a179c:	080a1d61 	.word	0x080a1d61
 80a17a0:	20000664 	.word	0x20000664

080a17a4 <_findenv_r>:
 80a17a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a17a8:	4607      	mov	r7, r0
 80a17aa:	468b      	mov	fp, r1
 80a17ac:	4690      	mov	r8, r2
 80a17ae:	f000 f8d7 	bl	80a1960 <__env_lock>
 80a17b2:	4b19      	ldr	r3, [pc, #100]	; (80a1818 <_findenv_r+0x74>)
 80a17b4:	681d      	ldr	r5, [r3, #0]
 80a17b6:	469a      	mov	sl, r3
 80a17b8:	b13d      	cbz	r5, 80a17ca <_findenv_r+0x26>
 80a17ba:	465c      	mov	r4, fp
 80a17bc:	4623      	mov	r3, r4
 80a17be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a17c2:	b142      	cbz	r2, 80a17d6 <_findenv_r+0x32>
 80a17c4:	2a3d      	cmp	r2, #61	; 0x3d
 80a17c6:	461c      	mov	r4, r3
 80a17c8:	d1f8      	bne.n	80a17bc <_findenv_r+0x18>
 80a17ca:	4638      	mov	r0, r7
 80a17cc:	f000 f8c9 	bl	80a1962 <__env_unlock>
 80a17d0:	2000      	movs	r0, #0
 80a17d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a17d6:	ebcb 0404 	rsb	r4, fp, r4
 80a17da:	46a9      	mov	r9, r5
 80a17dc:	f859 0b04 	ldr.w	r0, [r9], #4
 80a17e0:	2800      	cmp	r0, #0
 80a17e2:	d0f2      	beq.n	80a17ca <_findenv_r+0x26>
 80a17e4:	4622      	mov	r2, r4
 80a17e6:	4659      	mov	r1, fp
 80a17e8:	f7ff fd0e 	bl	80a1208 <strncmp>
 80a17ec:	b988      	cbnz	r0, 80a1812 <_findenv_r+0x6e>
 80a17ee:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a17f2:	191e      	adds	r6, r3, r4
 80a17f4:	5d1b      	ldrb	r3, [r3, r4]
 80a17f6:	2b3d      	cmp	r3, #61	; 0x3d
 80a17f8:	d10b      	bne.n	80a1812 <_findenv_r+0x6e>
 80a17fa:	f8da 3000 	ldr.w	r3, [sl]
 80a17fe:	4638      	mov	r0, r7
 80a1800:	1aed      	subs	r5, r5, r3
 80a1802:	10ad      	asrs	r5, r5, #2
 80a1804:	f8c8 5000 	str.w	r5, [r8]
 80a1808:	f000 f8ab 	bl	80a1962 <__env_unlock>
 80a180c:	1c70      	adds	r0, r6, #1
 80a180e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1812:	464d      	mov	r5, r9
 80a1814:	e7e1      	b.n	80a17da <_findenv_r+0x36>
 80a1816:	bf00      	nop
 80a1818:	200000b4 	.word	0x200000b4

080a181c <_getenv_r>:
 80a181c:	b507      	push	{r0, r1, r2, lr}
 80a181e:	aa01      	add	r2, sp, #4
 80a1820:	f7ff ffc0 	bl	80a17a4 <_findenv_r>
 80a1824:	b003      	add	sp, #12
 80a1826:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a182c <__gettzinfo>:
 80a182c:	4800      	ldr	r0, [pc, #0]	; (80a1830 <__gettzinfo+0x4>)
 80a182e:	4770      	bx	lr
 80a1830:	20000074 	.word	0x20000074

080a1834 <gmtime_r>:
 80a1834:	6802      	ldr	r2, [r0, #0]
 80a1836:	4b46      	ldr	r3, [pc, #280]	; (80a1950 <gmtime_r+0x11c>)
 80a1838:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a183a:	fb92 f4f3 	sdiv	r4, r2, r3
 80a183e:	fb03 2214 	mls	r2, r3, r4, r2
 80a1842:	2a00      	cmp	r2, #0
 80a1844:	bfbc      	itt	lt
 80a1846:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a184a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a184e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a1852:	fb92 f3f0 	sdiv	r3, r2, r0
 80a1856:	fb00 2213 	mls	r2, r0, r3, r2
 80a185a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a185e:	608b      	str	r3, [r1, #8]
 80a1860:	fb92 f3f0 	sdiv	r3, r2, r0
 80a1864:	fb00 2213 	mls	r2, r0, r3, r2
 80a1868:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a186c:	bfac      	ite	ge
 80a186e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a1872:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a1876:	604b      	str	r3, [r1, #4]
 80a1878:	600a      	str	r2, [r1, #0]
 80a187a:	2307      	movs	r3, #7
 80a187c:	1ce2      	adds	r2, r4, #3
 80a187e:	fb92 f3f3 	sdiv	r3, r2, r3
 80a1882:	4d34      	ldr	r5, [pc, #208]	; (80a1954 <gmtime_r+0x120>)
 80a1884:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1888:	fb94 f5f5 	sdiv	r5, r4, r5
 80a188c:	1ad3      	subs	r3, r2, r3
 80a188e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a1892:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a1896:	618b      	str	r3, [r1, #24]
 80a1898:	4b2f      	ldr	r3, [pc, #188]	; (80a1958 <gmtime_r+0x124>)
 80a189a:	4830      	ldr	r0, [pc, #192]	; (80a195c <gmtime_r+0x128>)
 80a189c:	fb03 4405 	mla	r4, r3, r5, r4
 80a18a0:	fbb4 f2f2 	udiv	r2, r4, r2
 80a18a4:	fbb4 f3f7 	udiv	r3, r4, r7
 80a18a8:	fbb4 f0f0 	udiv	r0, r4, r0
 80a18ac:	4422      	add	r2, r4
 80a18ae:	1ad2      	subs	r2, r2, r3
 80a18b0:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a18b4:	1a13      	subs	r3, r2, r0
 80a18b6:	f240 126d 	movw	r2, #365	; 0x16d
 80a18ba:	fbb3 f6f6 	udiv	r6, r3, r6
 80a18be:	fbb3 f0f2 	udiv	r0, r3, r2
 80a18c2:	fbb3 f3f7 	udiv	r3, r3, r7
 80a18c6:	4434      	add	r4, r6
 80a18c8:	1ae3      	subs	r3, r4, r3
 80a18ca:	fb02 3310 	mls	r3, r2, r0, r3
 80a18ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a18d2:	2499      	movs	r4, #153	; 0x99
 80a18d4:	3202      	adds	r2, #2
 80a18d6:	fbb2 f2f4 	udiv	r2, r2, r4
 80a18da:	4354      	muls	r4, r2
 80a18dc:	1ca6      	adds	r6, r4, #2
 80a18de:	2405      	movs	r4, #5
 80a18e0:	fbb6 f4f4 	udiv	r4, r6, r4
 80a18e4:	2a0a      	cmp	r2, #10
 80a18e6:	bf34      	ite	cc
 80a18e8:	2602      	movcc	r6, #2
 80a18ea:	f06f 0609 	mvncs.w	r6, #9
 80a18ee:	4416      	add	r6, r2
 80a18f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a18f4:	fb02 0505 	mla	r5, r2, r5, r0
 80a18f8:	1c5f      	adds	r7, r3, #1
 80a18fa:	2e01      	cmp	r6, #1
 80a18fc:	bf98      	it	ls
 80a18fe:	3501      	addls	r5, #1
 80a1900:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a1904:	eba7 0704 	sub.w	r7, r7, r4
 80a1908:	d302      	bcc.n	80a1910 <gmtime_r+0xdc>
 80a190a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a190e:	e014      	b.n	80a193a <gmtime_r+0x106>
 80a1910:	0782      	lsls	r2, r0, #30
 80a1912:	d105      	bne.n	80a1920 <gmtime_r+0xec>
 80a1914:	2464      	movs	r4, #100	; 0x64
 80a1916:	fbb0 f2f4 	udiv	r2, r0, r4
 80a191a:	fb04 0212 	mls	r2, r4, r2, r0
 80a191e:	b94a      	cbnz	r2, 80a1934 <gmtime_r+0x100>
 80a1920:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a1924:	fbb0 f4f2 	udiv	r4, r0, r2
 80a1928:	fb02 0014 	mls	r0, r2, r4, r0
 80a192c:	fab0 f280 	clz	r2, r0
 80a1930:	0952      	lsrs	r2, r2, #5
 80a1932:	e000      	b.n	80a1936 <gmtime_r+0x102>
 80a1934:	2201      	movs	r2, #1
 80a1936:	333b      	adds	r3, #59	; 0x3b
 80a1938:	441a      	add	r2, r3
 80a193a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a193e:	2300      	movs	r3, #0
 80a1940:	61ca      	str	r2, [r1, #28]
 80a1942:	614d      	str	r5, [r1, #20]
 80a1944:	610e      	str	r6, [r1, #16]
 80a1946:	60cf      	str	r7, [r1, #12]
 80a1948:	620b      	str	r3, [r1, #32]
 80a194a:	4608      	mov	r0, r1
 80a194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a194e:	bf00      	nop
 80a1950:	00015180 	.word	0x00015180
 80a1954:	00023ab1 	.word	0x00023ab1
 80a1958:	fffdc54f 	.word	0xfffdc54f
 80a195c:	00023ab0 	.word	0x00023ab0

080a1960 <__env_lock>:
 80a1960:	4770      	bx	lr

080a1962 <__env_unlock>:
 80a1962:	4770      	bx	lr

080a1964 <dynalib_user>:
 80a1964:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1974:	0000 0000                                   ....

080a1978 <_ZTV9IPAddress>:
	...
 80a1980:	03fd 080a 03ed 080a 03ef 080a 6162 6475     ............baud
 80a1990:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a19a0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a19b0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a19c0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a19d0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a19e0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a19f0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1a00:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1a10:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1a20:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1a30:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1a40:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1a50:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1a60:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1a70 <_ZTVN5spark12NetworkClassE>:
	...
 80a1a78:	04c5 080a 04cf 080a 04d9 080a 04e3 080a     ................
 80a1a88:	04ed 080a 04f9 080a 0505 080a 0511 080a     ................
 80a1a98:	0519 080a 0523 080a 052d 080a               ....#...-...

080a1aa4 <_ZTV8SPIClass>:
	...
 80a1aac:	0665 080a 0667 080a 2b25 3330 3a64 3025     e...g...%+03d:%0
 80a1abc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a1acc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a1adc <_ZTV11USARTSerial>:
	...
 80a1ae4:	07ad 080a 07fd 080a 080b 080a 0591 080a     ................
 80a1af4:	07c1 080a 07e3 080a 07cf 080a 07f7 080a     ................
 80a1b04:	07af 080a 07b3 080a                         ........

080a1b0c <_ZTV9USBSerial>:
	...
 80a1b14:	08ad 080a 08fd 080a 090b 080a 0591 080a     ................
 80a1b24:	08e9 080a 08af 080a 08c5 080a 08f7 080a     ................
 80a1b34:	08db 080a 08a9 080a                         ........

080a1b3c <_ZTVN5spark9WiFiClassE>:
	...
 80a1b44:	0ae7 080a 0add 080a 0ad3 080a 0a45 080a     ............E...
 80a1b54:	0ac7 080a 0abb 080a 0aaf 080a 0aa7 080a     ................
 80a1b64:	0a9d 080a 0a93 080a 0a4f 080a               ........O...

080a1b70 <_ctype_>:
 80a1b70:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a1b80:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a1b90:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a1ba0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a1bb0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a1bc0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a1bd0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a1be0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a1bf0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a1c74 <__sf_fake_stdin>:
	...

080a1c94 <__sf_fake_stdout>:
	...

080a1cb4 <__sf_fake_stderr>:
	...
 80a1cd4:	0043 0000                                   C...

080a1cd8 <__month_lengths>:
 80a1cd8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a1ce8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a1cf8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a1d08:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a1d18:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a1d28:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a1d38:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a1d48:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a1d58:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a1d68:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a1d74 <link_const_variable_data_end>:
 80a1d74:	080a00e9 	.word	0x080a00e9
 80a1d78:	080a04b5 	.word	0x080a04b5
 80a1d7c:	080a057d 	.word	0x080a057d
 80a1d80:	080a0649 	.word	0x080a0649
 80a1d84:	080a069d 	.word	0x080a069d
 80a1d88:	080a0799 	.word	0x080a0799
 80a1d8c:	080a0af1 	.word	0x080a0af1
 80a1d90:	080a0c3d 	.word	0x080a0c3d
 80a1d94:	080a0c6d 	.word	0x080a0c6d
 80a1d98:	080a0cc1 	.word	0x080a0cc1
 80a1d9c:	080a0d85 	.word	0x080a0d85
 80a1da0:	080a0e09 	.word	0x080a0e09
 80a1da4:	080a0e8d 	.word	0x080a0e8d

080a1da8 <link_constructors_end>:
	...
