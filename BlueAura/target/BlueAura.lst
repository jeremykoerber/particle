
/Users/jeremykoerber/code/particle/BlueAura/target/BlueAura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e58  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2e70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a2e74  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005a0  20000368  20000368  00030368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a2edc  080a2edc  00022edc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2f04  080a2f04  00022f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00093b10  00000000  00000000  00022f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000dbc1  00000000  00000000  000b6a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010946  00000000  00000000  000c45d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b00  00000000  00000000  000d4f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002c38  00000000  00000000  000d6a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022ddd  00000000  00000000  000d9657  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f336  00000000  00000000  000fc434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00096957  00000000  00000000  0011b76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000aad0  00000000  00000000  001b20c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	e0 2b 0a 08                                         .+..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fd93 	bl	80a2b58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fd98 	bl	80a2b6e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2e74 	.word	0x080a2e74
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	20000908 	.word	0x20000908
 80a0058:	20000908 	.word	0x20000908

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff11 	bl	80a1e84 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2e34 	.word	0x080a2e34
 80a0084:	080a2e68 	.word	0x080a2e68

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b90c 	b.w	80a02a4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f80e 	bl	80a00ae <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 beb7 	b.w	80a1e08 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bc01 	b.w	80a18a0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <loop>:
  strip.show(); // Initialize all pixels to 'off'
  FadeInOut(0xff, 0x00, 0x00); // red
  FadeIn(0x00, 0x00, 0xff); // blue
}

void loop() {
 80a00ae:	4770      	bx	lr

080a00b0 <_Z9showStripv>:
}

void showStrip() {
  strip.show();
 80a00b0:	4801      	ldr	r0, [pc, #4]	; (80a00b8 <_Z9showStripv+0x8>)
 80a00b2:	f000 b9a3 	b.w	80a03fc <_ZN17Adafruit_NeoPixel4showEv>
 80a00b6:	bf00      	nop
 80a00b8:	2000036c 	.word	0x2000036c

080a00bc <_Z8setPixelihhh>:
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 80a00bc:	b510      	push	{r4, lr}
 80a00be:	4604      	mov	r4, r0
 80a00c0:	4608      	mov	r0, r1
 80a00c2:	4611      	mov	r1, r2
  strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 80a00c4:	461a      	mov	r2, r3
 80a00c6:	f001 fa9e 	bl	80a1606 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a00ca:	b2a1      	uxth	r1, r4
 80a00cc:	4602      	mov	r2, r0
}
 80a00ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void showStrip() {
  strip.show();
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
  strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 80a00d2:	4801      	ldr	r0, [pc, #4]	; (80a00d8 <_Z8setPixelihhh+0x1c>)
 80a00d4:	f001 ba4c 	b.w	80a1570 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a00d8:	2000036c 	.word	0x2000036c

080a00dc <_Z6setAllhhh>:
}

void setAll(byte red, byte green, byte blue) {
 80a00dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a00de:	4605      	mov	r5, r0
 80a00e0:	460e      	mov	r6, r1
 80a00e2:	4617      	mov	r7, r2
  for(int i = 0; i < NUM_LEDS; i++ ) {
 80a00e4:	2400      	movs	r4, #0
    setPixel(i, red, green, blue);
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	463b      	mov	r3, r7
 80a00ea:	4632      	mov	r2, r6
 80a00ec:	4629      	mov	r1, r5
void setPixel(int Pixel, byte red, byte green, byte blue) {
  strip.setPixelColor(Pixel, strip.Color(red, green, blue));
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i < NUM_LEDS; i++ ) {
 80a00ee:	3401      	adds	r4, #1
    setPixel(i, red, green, blue);
 80a00f0:	f7ff ffe4 	bl	80a00bc <_Z8setPixelihhh>
void setPixel(int Pixel, byte red, byte green, byte blue) {
  strip.setPixelColor(Pixel, strip.Color(red, green, blue));
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i < NUM_LEDS; i++ ) {
 80a00f4:	2c44      	cmp	r4, #68	; 0x44
 80a00f6:	d1f6      	bne.n	80a00e6 <_Z6setAllhhh+0xa>
    setPixel(i, red, green, blue);
  }
  showStrip();
}
 80a00f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i < NUM_LEDS; i++ ) {
    setPixel(i, red, green, blue);
  }
  showStrip();
 80a00fc:	f7ff bfd8 	b.w	80a00b0 <_Z9showStripv>

080a0100 <_Z9FadeInOuthhh>:
}

void FadeInOut(byte red, byte green, byte blue){
 80a0100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0104:	4683      	mov	fp, r0
 80a0106:	468a      	mov	sl, r1
 80a0108:	4691      	mov	r9, r2
 80a010a:	b087      	sub	sp, #28
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
 80a010c:	2400      	movs	r4, #0
    r = (k/256.0)*red;
 80a010e:	4620      	mov	r0, r4
 80a0110:	f002 fa2c 	bl	80a256c <__aeabi_i2d>
 80a0114:	2200      	movs	r2, #0
 80a0116:	4b3f      	ldr	r3, [pc, #252]	; (80a0214 <_Z9FadeInOuthhh+0x114>)
 80a0118:	f002 fa8e 	bl	80a2638 <__aeabi_dmul>
 80a011c:	4606      	mov	r6, r0
 80a011e:	4658      	mov	r0, fp
 80a0120:	460f      	mov	r7, r1
 80a0122:	f002 fa23 	bl	80a256c <__aeabi_i2d>
 80a0126:	e9cd 0100 	strd	r0, r1, [sp]
    g = (k/256.0)*green;
 80a012a:	4650      	mov	r0, sl
 80a012c:	f002 fa1e 	bl	80a256c <__aeabi_i2d>
 80a0130:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b = (k/256.0)*blue;
 80a0134:	4648      	mov	r0, r9
 80a0136:	f002 fa19 	bl	80a256c <__aeabi_i2d>
    setAll(r,g,b);
 80a013a:	4602      	mov	r2, r0
 80a013c:	460b      	mov	r3, r1
void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
 80a013e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    setAll(r,g,b);
 80a0142:	4630      	mov	r0, r6
 80a0144:	4639      	mov	r1, r7
 80a0146:	f002 fa77 	bl	80a2638 <__aeabi_dmul>
 80a014a:	f002 fc87 	bl	80a2a5c <__aeabi_d2f>
 80a014e:	f002 fcd5 	bl	80a2afc <__aeabi_f2uiz>
 80a0152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a0156:	fa5f f880 	uxtb.w	r8, r0
 80a015a:	4639      	mov	r1, r7
 80a015c:	4630      	mov	r0, r6
 80a015e:	f002 fa6b 	bl	80a2638 <__aeabi_dmul>
 80a0162:	f002 fc7b 	bl	80a2a5c <__aeabi_d2f>
 80a0166:	f002 fcc9 	bl	80a2afc <__aeabi_f2uiz>
 80a016a:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a016e:	b2c5      	uxtb	r5, r0
 80a0170:	4639      	mov	r1, r7
 80a0172:	4630      	mov	r0, r6
 80a0174:	f002 fa60 	bl	80a2638 <__aeabi_dmul>
 80a0178:	f002 fc70 	bl	80a2a5c <__aeabi_d2f>
 80a017c:	f002 fcbe 	bl	80a2afc <__aeabi_f2uiz>
 80a0180:	4642      	mov	r2, r8
 80a0182:	4629      	mov	r1, r5
 80a0184:	b2c0      	uxtb	r0, r0
 80a0186:	f7ff ffa9 	bl	80a00dc <_Z6setAllhhh>
  showStrip();
}

void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
 80a018a:	3401      	adds	r4, #1
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
 80a018c:	f7ff ff90 	bl	80a00b0 <_Z9showStripv>
    delay(10);
 80a0190:	200a      	movs	r0, #10
 80a0192:	f001 fb8d 	bl	80a18b0 <delay>
  showStrip();
}

void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
 80a0196:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80a019a:	d1b8      	bne.n	80a010e <_Z9FadeInOuthhh+0xe>
 80a019c:	24ff      	movs	r4, #255	; 0xff
    showStrip();
    delay(10);
  }
     
  for(int k = 255; k >= 0; k=k-2) {
    r = (k/256.0)*red;
 80a019e:	4620      	mov	r0, r4
 80a01a0:	f002 f9e4 	bl	80a256c <__aeabi_i2d>
 80a01a4:	2200      	movs	r2, #0
 80a01a6:	4b1b      	ldr	r3, [pc, #108]	; (80a0214 <_Z9FadeInOuthhh+0x114>)
 80a01a8:	f002 fa46 	bl	80a2638 <__aeabi_dmul>
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
 80a01ac:	4602      	mov	r2, r0
 80a01ae:	460b      	mov	r3, r1
    showStrip();
    delay(10);
  }
     
  for(int k = 255; k >= 0; k=k-2) {
    r = (k/256.0)*red;
 80a01b0:	4606      	mov	r6, r0
 80a01b2:	460f      	mov	r7, r1
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
 80a01b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a01b8:	f002 fa3e 	bl	80a2638 <__aeabi_dmul>
 80a01bc:	f002 fc4e 	bl	80a2a5c <__aeabi_d2f>
 80a01c0:	f002 fc9c 	bl	80a2afc <__aeabi_f2uiz>
 80a01c4:	4632      	mov	r2, r6
 80a01c6:	463b      	mov	r3, r7
 80a01c8:	fa5f f880 	uxtb.w	r8, r0
 80a01cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a01d0:	f002 fa32 	bl	80a2638 <__aeabi_dmul>
 80a01d4:	f002 fc42 	bl	80a2a5c <__aeabi_d2f>
 80a01d8:	f002 fc90 	bl	80a2afc <__aeabi_f2uiz>
 80a01dc:	463b      	mov	r3, r7
 80a01de:	4632      	mov	r2, r6
 80a01e0:	b2c5      	uxtb	r5, r0
 80a01e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a01e6:	f002 fa27 	bl	80a2638 <__aeabi_dmul>
 80a01ea:	f002 fc37 	bl	80a2a5c <__aeabi_d2f>
 80a01ee:	f002 fc85 	bl	80a2afc <__aeabi_f2uiz>
 80a01f2:	4642      	mov	r2, r8
 80a01f4:	4629      	mov	r1, r5
 80a01f6:	b2c0      	uxtb	r0, r0
 80a01f8:	f7ff ff70 	bl	80a00dc <_Z6setAllhhh>
    setAll(r,g,b);
    showStrip();
    delay(10);
  }
     
  for(int k = 255; k >= 0; k=k-2) {
 80a01fc:	3c02      	subs	r4, #2
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
 80a01fe:	f7ff ff57 	bl	80a00b0 <_Z9showStripv>
    delay(10);
 80a0202:	200a      	movs	r0, #10
 80a0204:	f001 fb54 	bl	80a18b0 <delay>
    setAll(r,g,b);
    showStrip();
    delay(10);
  }
     
  for(int k = 255; k >= 0; k=k-2) {
 80a0208:	1c63      	adds	r3, r4, #1
 80a020a:	d1c8      	bne.n	80a019e <_Z9FadeInOuthhh+0x9e>
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
    delay(10);
  }
}
 80a020c:	b007      	add	sp, #28
 80a020e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0212:	bf00      	nop
 80a0214:	3f700000 	.word	0x3f700000

080a0218 <_Z6FadeInhhh>:

void FadeIn(byte red, byte green, byte blue){
 80a0218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a021c:	4681      	mov	r9, r0
 80a021e:	468a      	mov	sl, r1
 80a0220:	4693      	mov	fp, r2
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
 80a0222:	2400      	movs	r4, #0
    r = (k/256.0)*red;
 80a0224:	4620      	mov	r0, r4
 80a0226:	f002 f9a1 	bl	80a256c <__aeabi_i2d>
 80a022a:	2200      	movs	r2, #0
 80a022c:	4b1c      	ldr	r3, [pc, #112]	; (80a02a0 <_Z6FadeInhhh+0x88>)
 80a022e:	f002 fa03 	bl	80a2638 <__aeabi_dmul>
 80a0232:	4606      	mov	r6, r0
 80a0234:	460f      	mov	r7, r1
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
 80a0236:	4658      	mov	r0, fp
 80a0238:	f002 f998 	bl	80a256c <__aeabi_i2d>
 80a023c:	4632      	mov	r2, r6
 80a023e:	463b      	mov	r3, r7
 80a0240:	f002 f9fa 	bl	80a2638 <__aeabi_dmul>
 80a0244:	f002 fc0a 	bl	80a2a5c <__aeabi_d2f>
 80a0248:	f002 fc58 	bl	80a2afc <__aeabi_f2uiz>
 80a024c:	fa5f f880 	uxtb.w	r8, r0
 80a0250:	4650      	mov	r0, sl
 80a0252:	f002 f98b 	bl	80a256c <__aeabi_i2d>
 80a0256:	4632      	mov	r2, r6
 80a0258:	463b      	mov	r3, r7
 80a025a:	f002 f9ed 	bl	80a2638 <__aeabi_dmul>
 80a025e:	f002 fbfd 	bl	80a2a5c <__aeabi_d2f>
 80a0262:	f002 fc4b 	bl	80a2afc <__aeabi_f2uiz>
 80a0266:	b2c5      	uxtb	r5, r0
 80a0268:	4648      	mov	r0, r9
 80a026a:	f002 f97f 	bl	80a256c <__aeabi_i2d>
 80a026e:	463b      	mov	r3, r7
 80a0270:	4632      	mov	r2, r6
 80a0272:	f002 f9e1 	bl	80a2638 <__aeabi_dmul>
 80a0276:	f002 fbf1 	bl	80a2a5c <__aeabi_d2f>
 80a027a:	f002 fc3f 	bl	80a2afc <__aeabi_f2uiz>
 80a027e:	4642      	mov	r2, r8
 80a0280:	4629      	mov	r1, r5
 80a0282:	b2c0      	uxtb	r0, r0
 80a0284:	f7ff ff2a 	bl	80a00dc <_Z6setAllhhh>
  }
}

void FadeIn(byte red, byte green, byte blue){
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
 80a0288:	3401      	adds	r4, #1
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
 80a028a:	f7ff ff11 	bl	80a00b0 <_Z9showStripv>
    delay(10);
 80a028e:	200a      	movs	r0, #10
 80a0290:	f001 fb0e 	bl	80a18b0 <delay>
  }
}

void FadeIn(byte red, byte green, byte blue){
  float r, g, b;
  for(int k = 0; k < 256; k=k+1) { 
 80a0294:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80a0298:	d1c4      	bne.n	80a0224 <_Z6FadeInhhh+0xc>
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
    delay(10);
  }
}
 80a029a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a029e:	bf00      	nop
 80a02a0:	3f700000 	.word	0x3f700000

080a02a4 <setup>:
#define PIXEL_PIN D2
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(NUM_LEDS, PIXEL_PIN, PIXEL_TYPE);

void setup() {
 80a02a4:	b510      	push	{r4, lr}
  strip.begin();
 80a02a6:	4c09      	ldr	r4, [pc, #36]	; (80a02cc <setup+0x28>)
 80a02a8:	4620      	mov	r0, r4
 80a02aa:	f000 f871 	bl	80a0390 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show(); // Initialize all pixels to 'off'
 80a02ae:	4620      	mov	r0, r4
 80a02b0:	f000 f8a4 	bl	80a03fc <_ZN17Adafruit_NeoPixel4showEv>
  FadeInOut(0xff, 0x00, 0x00); // red
 80a02b4:	2200      	movs	r2, #0
 80a02b6:	4611      	mov	r1, r2
 80a02b8:	20ff      	movs	r0, #255	; 0xff
 80a02ba:	f7ff ff21 	bl	80a0100 <_Z9FadeInOuthhh>
  FadeIn(0x00, 0x00, 0xff); // blue
}
 80a02be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void setup() {
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
  FadeInOut(0xff, 0x00, 0x00); // red
  FadeIn(0x00, 0x00, 0xff); // blue
 80a02c2:	2100      	movs	r1, #0
 80a02c4:	22ff      	movs	r2, #255	; 0xff
 80a02c6:	4608      	mov	r0, r1
 80a02c8:	f7ff bfa6 	b.w	80a0218 <_Z6FadeInhhh>
 80a02cc:	2000036c 	.word	0x2000036c

080a02d0 <_GLOBAL__sub_I_SystemMode>:
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
    delay(10);
  }
 80a02d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02d2:	f001 f9cf 	bl	80a1674 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a02d6:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a02da:	4c13      	ldr	r4, [pc, #76]	; (80a0328 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a02dc:	2500      	movs	r5, #0
 80a02de:	8063      	strh	r3, [r4, #2]
 80a02e0:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a02e4:	2001      	movs	r0, #1
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a02e6:	80a3      	strh	r3, [r4, #4]
 80a02e8:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a02ea:	f001 fa9d 	bl	80a1828 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a02ee:	a802      	add	r0, sp, #8
 80a02f0:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a02f4:	462a      	mov	r2, r5
 80a02f6:	4629      	mov	r1, r5
 80a02f8:	f001 f99c 	bl	80a1634 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a02fc:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a02fe:	2b1e      	cmp	r3, #30
 80a0300:	d104      	bne.n	80a030c <_GLOBAL__sub_I_SystemMode+0x3c>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a0302:	2303      	movs	r3, #3
 80a0304:	7023      	strb	r3, [r4, #0]
 80a0306:	2311      	movs	r3, #17
 80a0308:	8065      	strh	r5, [r4, #2]
 80a030a:	80a3      	strh	r3, [r4, #4]
// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define NUM_LEDS 68
#define PIXEL_PIN D2
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(NUM_LEDS, PIXEL_PIN, PIXEL_TYPE);
 80a030c:	2302      	movs	r3, #2
 80a030e:	461a      	mov	r2, r3
 80a0310:	2144      	movs	r1, #68	; 0x44
 80a0312:	4806      	ldr	r0, [pc, #24]	; (80a032c <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0314:	f000 f861 	bl	80a03da <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0318:	4a05      	ldr	r2, [pc, #20]	; (80a0330 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a031a:	4906      	ldr	r1, [pc, #24]	; (80a0334 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a031c:	4803      	ldr	r0, [pc, #12]	; (80a032c <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a031e:	f001 fe85 	bl	80a202c <__aeabi_atexit>
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
    delay(10);
  }
 80a0322:	b003      	add	sp, #12
 80a0324:	bd30      	pop	{r4, r5, pc}
 80a0326:	bf00      	nop
 80a0328:	20000380 	.word	0x20000380
 80a032c:	2000036c 	.word	0x2000036c
 80a0330:	20000368 	.word	0x20000368
 80a0334:	080a033d 	.word	0x080a033d

080a0338 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0338:	f001 b98c 	b.w	80a1654 <HAL_Timer_Get_Micro_Seconds>

080a033c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a033c:	b510      	push	{r4, lr}
 80a033e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0340:	68c0      	ldr	r0, [r0, #12]
 80a0342:	b108      	cbz	r0, 80a0348 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0344:	f001 faac 	bl	80a18a0 <free>
  if (begun) pinMode(pin, INPUT);
 80a0348:	7823      	ldrb	r3, [r4, #0]
 80a034a:	b11b      	cbz	r3, 80a0354 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a034c:	2100      	movs	r1, #0
 80a034e:	79e0      	ldrb	r0, [r4, #7]
 80a0350:	f001 fde8 	bl	80a1f24 <pinMode>
}
 80a0354:	4620      	mov	r0, r4
 80a0356:	bd10      	pop	{r4, pc}

080a0358 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0358:	b538      	push	{r3, r4, r5, lr}
 80a035a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a035c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a035e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0360:	b108      	cbz	r0, 80a0366 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0362:	f001 fa9d 	bl	80a18a0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0366:	79a3      	ldrb	r3, [r4, #6]
 80a0368:	2b06      	cmp	r3, #6
 80a036a:	bf0c      	ite	eq
 80a036c:	2004      	moveq	r0, #4
 80a036e:	2003      	movne	r0, #3
 80a0370:	4368      	muls	r0, r5
 80a0372:	b280      	uxth	r0, r0
 80a0374:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0376:	f001 fa8b 	bl	80a1890 <malloc>
 80a037a:	60e0      	str	r0, [r4, #12]
 80a037c:	b128      	cbz	r0, 80a038a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a037e:	88a2      	ldrh	r2, [r4, #4]
 80a0380:	2100      	movs	r1, #0
 80a0382:	f002 fbf4 	bl	80a2b6e <memset>
    numLEDs = n;
 80a0386:	8065      	strh	r5, [r4, #2]
 80a0388:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a038a:	80a0      	strh	r0, [r4, #4]
 80a038c:	8060      	strh	r0, [r4, #2]
 80a038e:	bd38      	pop	{r3, r4, r5, pc}

080a0390 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0390:	b510      	push	{r4, lr}
 80a0392:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0394:	2101      	movs	r1, #1
 80a0396:	79c0      	ldrb	r0, [r0, #7]
 80a0398:	f001 fdc4 	bl	80a1f24 <pinMode>
  digitalWrite(pin, LOW);
 80a039c:	2100      	movs	r1, #0
 80a039e:	79e0      	ldrb	r0, [r4, #7]
 80a03a0:	f001 fdd1 	bl	80a1f46 <digitalWrite>
  begun = true;
 80a03a4:	2301      	movs	r3, #1
 80a03a6:	7023      	strb	r3, [r4, #0]
 80a03a8:	bd10      	pop	{r4, pc}

080a03aa <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03aa:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03ac:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03ae:	4605      	mov	r5, r0
 80a03b0:	460c      	mov	r4, r1
    if (begun) {
 80a03b2:	b11b      	cbz	r3, 80a03bc <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03b4:	2100      	movs	r1, #0
 80a03b6:	79c0      	ldrb	r0, [r0, #7]
 80a03b8:	f001 fdb4 	bl	80a1f24 <pinMode>
    }
    pin = p;
    if (begun) {
 80a03bc:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a03be:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a03c0:	b153      	cbz	r3, 80a03d8 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a03c2:	b2a4      	uxth	r4, r4
 80a03c4:	4620      	mov	r0, r4
 80a03c6:	2101      	movs	r1, #1
 80a03c8:	f001 fdac 	bl	80a1f24 <pinMode>
        digitalWrite(p, LOW);
 80a03cc:	4620      	mov	r0, r4
    }
}
 80a03ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a03d2:	2100      	movs	r1, #0
 80a03d4:	f001 bdb7 	b.w	80a1f46 <digitalWrite>
 80a03d8:	bd38      	pop	{r3, r4, r5, pc}

080a03da <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a03da:	b570      	push	{r4, r5, r6, lr}
 80a03dc:	4604      	mov	r4, r0
 80a03de:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a03e0:	2500      	movs	r5, #0
 80a03e2:	7183      	strb	r3, [r0, #6]
 80a03e4:	7005      	strb	r5, [r0, #0]
 80a03e6:	7205      	strb	r5, [r0, #8]
 80a03e8:	60c5      	str	r5, [r0, #12]
 80a03ea:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a03ec:	f7ff ffb4 	bl	80a0358 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a03f0:	4620      	mov	r0, r4
 80a03f2:	4631      	mov	r1, r6
 80a03f4:	f7ff ffd9 	bl	80a03aa <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a03f8:	4620      	mov	r0, r4
 80a03fa:	bd70      	pop	{r4, r5, r6, pc}

080a03fc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a03fc:	68c3      	ldr	r3, [r0, #12]
 80a03fe:	2b00      	cmp	r3, #0
 80a0400:	f000 858e 	beq.w	80a0f20 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0408:	4604      	mov	r4, r0
 80a040a:	7983      	ldrb	r3, [r0, #6]
 80a040c:	b086      	sub	sp, #24
 80a040e:	3b02      	subs	r3, #2
 80a0410:	b2db      	uxtb	r3, r3
 80a0412:	2b04      	cmp	r3, #4
 80a0414:	bf96      	itet	ls
 80a0416:	4a29      	ldrls	r2, [pc, #164]	; (80a04bc <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0418:	2532      	movhi	r5, #50	; 0x32
 80a041a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a041e:	f7ff ff8b 	bl	80a0338 <micros>
 80a0422:	6923      	ldr	r3, [r4, #16]
 80a0424:	1ac0      	subs	r0, r0, r3
 80a0426:	42a8      	cmp	r0, r5
 80a0428:	d3f9      	bcc.n	80a041e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a042a:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a042c:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a042e:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0430:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0432:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0436:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a043a:	f000 8272 	beq.w	80a0922 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a043e:	2907      	cmp	r1, #7
 80a0440:	f000 826f 	beq.w	80a0922 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0444:	2906      	cmp	r1, #6
 80a0446:	f000 8432 	beq.w	80a0cae <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a044a:	2905      	cmp	r1, #5
 80a044c:	f000 83ab 	beq.w	80a0ba6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0450:	2908      	cmp	r1, #8
 80a0452:	f000 83a8 	beq.w	80a0ba6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0456:	2900      	cmp	r1, #0
 80a0458:	f040 8563 	bne.w	80a0f22 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a045c:	4a18      	ldr	r2, [pc, #96]	; (80a04c0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a045e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0462:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0466:	b29b      	uxth	r3, r3
 80a0468:	2b00      	cmp	r3, #0
 80a046a:	f000 8395 	beq.w	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a046e:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0470:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0474:	f10e 0503 	add.w	r5, lr, #3
 80a0478:	3b03      	subs	r3, #3
 80a047a:	b29b      	uxth	r3, r3
 80a047c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0480:	f89e 3000 	ldrb.w	r3, [lr]
 80a0484:	b2db      	uxtb	r3, r3
 80a0486:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a048a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a048e:	b2db      	uxtb	r3, r3
 80a0490:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0494:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0498:	b2db      	uxtb	r3, r3
 80a049a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a049e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a04a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a04a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a04aa:	021b      	lsls	r3, r3, #8
 80a04ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a04b0:	4303      	orrs	r3, r0
 80a04b2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a04b4:	f88d 1005 	strb.w	r1, [sp, #5]
 80a04b8:	e11b      	b.n	80a06f2 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a04ba:	bf00      	nop
 80a04bc:	080a2bf4 	.word	0x080a2bf4
 80a04c0:	20000388 	.word	0x20000388
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a04c4:	4600      	mov	r0, r0
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a05cc:	79e3      	ldrb	r3, [r4, #7]
 80a05ce:	6810      	ldr	r0, [r2, #0]
 80a05d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05d4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05d8:	88bf      	ldrh	r7, [r7, #4]
 80a05da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05de:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a05e0:	4600      	mov	r0, r0
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a06da:	9b04      	ldr	r3, [sp, #16]
 80a06dc:	085b      	lsrs	r3, r3, #1
 80a06de:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a06e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a06e4:	3301      	adds	r3, #1
 80a06e6:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a06e8:	2b17      	cmp	r3, #23
 80a06ea:	f88d 3005 	strb.w	r3, [sp, #5]
 80a06ee:	f200 82db 	bhi.w	80a0ca8 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a06f2:	79e3      	ldrb	r3, [r4, #7]
 80a06f4:	6810      	ldr	r0, [r2, #0]
 80a06f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06fa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06fe:	88bf      	ldrh	r7, [r7, #4]
 80a0700:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0704:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0706:	9803      	ldr	r0, [sp, #12]
 80a0708:	9b04      	ldr	r3, [sp, #16]
 80a070a:	4218      	tst	r0, r3
 80a070c:	f47f aeda 	bne.w	80a04c4 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0710:	4600      	mov	r0, r0
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0762:	79e3      	ldrb	r3, [r4, #7]
 80a0764:	6810      	ldr	r0, [r2, #0]
 80a0766:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a076a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a076e:	88bf      	ldrh	r7, [r7, #4]
 80a0770:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0774:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0776:	4600      	mov	r0, r0
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	e6db      	b.n	80a06da <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0922:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0926:	4a17      	ldr	r2, [pc, #92]	; (80a0984 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0928:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a092a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a092e:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0930:	2b00      	cmp	r3, #0
 80a0932:	f000 8131 	beq.w	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0936:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0938:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a093c:	f10e 0103 	add.w	r1, lr, #3
 80a0940:	3b03      	subs	r3, #3
 80a0942:	b29b      	uxth	r3, r3
 80a0944:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0948:	f89e 3000 	ldrb.w	r3, [lr]
 80a094c:	b2db      	uxtb	r3, r3
 80a094e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0952:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0956:	b2db      	uxtb	r3, r3
 80a0958:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a095c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0960:	b2db      	uxtb	r3, r3
 80a0962:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0966:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a096a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a096e:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0972:	0200      	lsls	r0, r0, #8
 80a0974:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0978:	433b      	orrs	r3, r7
 80a097a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a097c:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0980:	e080      	b.n	80a0a84 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0982:	bf00      	nop
 80a0984:	20000388 	.word	0x20000388
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0988:	4600      	mov	r0, r0
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0a22:	79e3      	ldrb	r3, [r4, #7]
 80a0a24:	6810      	ldr	r0, [r2, #0]
 80a0a26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a2a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a2e:	88bf      	ldrh	r7, [r7, #4]
 80a0a30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a34:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a36:	4600      	mov	r0, r0
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0a6c:	9b04      	ldr	r3, [sp, #16]
 80a0a6e:	085b      	lsrs	r3, r3, #1
 80a0a70:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0a72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0a76:	3301      	adds	r3, #1
 80a0a78:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0a7a:	2b17      	cmp	r3, #23
 80a0a7c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0a80:	f200 8083 	bhi.w	80a0b8a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0a84:	79e3      	ldrb	r3, [r4, #7]
 80a0a86:	6810      	ldr	r0, [r2, #0]
 80a0a88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a8c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a90:	88bf      	ldrh	r7, [r7, #4]
 80a0a92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a96:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a98:	9803      	ldr	r0, [sp, #12]
 80a0a9a:	9b04      	ldr	r3, [sp, #16]
 80a0a9c:	4218      	tst	r0, r3
 80a0a9e:	f47f af73 	bne.w	80a0988 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0aa2:	4600      	mov	r0, r0
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0aca:	79e3      	ldrb	r3, [r4, #7]
 80a0acc:	6810      	ldr	r0, [r2, #0]
 80a0ace:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ad2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ad6:	88bf      	ldrh	r7, [r7, #4]
 80a0ad8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0adc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ade:	4600      	mov	r0, r0
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	e770      	b.n	80a0a6c <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b8e:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b90:	b29b      	uxth	r3, r3
 80a0b92:	2b00      	cmp	r3, #0
 80a0b94:	f47f aecf 	bne.w	80a0936 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b98:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b9a:	f7ff fbcd 	bl	80a0338 <micros>
 80a0b9e:	6120      	str	r0, [r4, #16]
}
 80a0ba0:	b006      	add	sp, #24
 80a0ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0ba6:	4b5e      	ldr	r3, [pc, #376]	; (80a0d20 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0ba8:	4a5e      	ldr	r2, [pc, #376]	; (80a0d24 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0baa:	4618      	mov	r0, r3
 80a0bac:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0bae:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0bb2:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bb4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bb8:	b292      	uxth	r2, r2
 80a0bba:	2a00      	cmp	r2, #0
 80a0bbc:	d0ec      	beq.n	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0bbe:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0bc2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bc6:	f10e 0503 	add.w	r5, lr, #3
 80a0bca:	3a03      	subs	r2, #3
 80a0bcc:	b292      	uxth	r2, r2
 80a0bce:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0bd2:	f89e 2000 	ldrb.w	r2, [lr]
 80a0bd6:	b2d2      	uxtb	r2, r2
 80a0bd8:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0bdc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0be0:	b2d2      	uxtb	r2, r2
 80a0be2:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0be6:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0bea:	b2d2      	uxtb	r2, r2
 80a0bec:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0bf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0bf4:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0bf8:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0bfc:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0c00:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0c04:	ea42 020c 	orr.w	r2, r2, ip
 80a0c08:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0c0a:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0c0e:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c10:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0c12:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c16:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c1a:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c22:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c24:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c28:	9e03      	ldr	r6, [sp, #12]
 80a0c2a:	9a04      	ldr	r2, [sp, #16]
 80a0c2c:	4216      	tst	r6, r2
 80a0c2e:	d023      	beq.n	80a0c78 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c30:	685a      	ldr	r2, [r3, #4]
 80a0c32:	9e05      	ldr	r6, [sp, #20]
 80a0c34:	1b92      	subs	r2, r2, r6
 80a0c36:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c38:	d9fa      	bls.n	80a0c30 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0c3a:	79e2      	ldrb	r2, [r4, #7]
 80a0c3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c40:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c44:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c4c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c50:	6842      	ldr	r2, [r0, #4]
 80a0c52:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c54:	685a      	ldr	r2, [r3, #4]
 80a0c56:	9e05      	ldr	r6, [sp, #20]
 80a0c58:	1b92      	subs	r2, r2, r6
 80a0c5a:	2a07      	cmp	r2, #7
 80a0c5c:	d9fa      	bls.n	80a0c54 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0c5e:	9a04      	ldr	r2, [sp, #16]
 80a0c60:	0852      	lsrs	r2, r2, #1
 80a0c62:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0c68:	3201      	adds	r2, #1
 80a0c6a:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c6c:	2a17      	cmp	r2, #23
 80a0c6e:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0c72:	d9cc      	bls.n	80a0c0e <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0c74:	46ae      	mov	lr, r5
 80a0c76:	e79d      	b.n	80a0bb4 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0c78:	685a      	ldr	r2, [r3, #4]
 80a0c7a:	9e05      	ldr	r6, [sp, #20]
 80a0c7c:	1b92      	subs	r2, r2, r6
 80a0c7e:	2a18      	cmp	r2, #24
 80a0c80:	d9fa      	bls.n	80a0c78 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0c82:	79e2      	ldrb	r2, [r4, #7]
 80a0c84:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c88:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c8c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c94:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c98:	6842      	ldr	r2, [r0, #4]
 80a0c9a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0c9c:	685a      	ldr	r2, [r3, #4]
 80a0c9e:	9e05      	ldr	r6, [sp, #20]
 80a0ca0:	1b92      	subs	r2, r2, r6
 80a0ca2:	2a45      	cmp	r2, #69	; 0x45
 80a0ca4:	d9fa      	bls.n	80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0ca6:	e7da      	b.n	80a0c5e <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0ca8:	46ae      	mov	lr, r5
 80a0caa:	f7ff bbda 	b.w	80a0462 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0cae:	4a1d      	ldr	r2, [pc, #116]	; (80a0d24 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0cb0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0cb4:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0cb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cba:	b29b      	uxth	r3, r3
 80a0cbc:	2b00      	cmp	r3, #0
 80a0cbe:	f43f af6b 	beq.w	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0cc2:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0cc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cc8:	f10e 0104 	add.w	r1, lr, #4
 80a0ccc:	3b04      	subs	r3, #4
 80a0cce:	b29b      	uxth	r3, r3
 80a0cd0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0cd4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0cd8:	b2db      	uxtb	r3, r3
 80a0cda:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0cde:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0ce2:	b2db      	uxtb	r3, r3
 80a0ce4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0ce8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0cec:	b2db      	uxtb	r3, r3
 80a0cee:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0cf2:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0cf6:	b2db      	uxtb	r3, r3
 80a0cf8:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0d00:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0d04:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0d08:	043f      	lsls	r7, r7, #16
 80a0d0a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0d0e:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0d12:	4303      	orrs	r3, r0
 80a0d14:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0d18:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d1a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d1e:	e07e      	b.n	80a0e1e <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0d20:	e0001000 	.word	0xe0001000
 80a0d24:	20000388 	.word	0x20000388
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d28:	4600      	mov	r0, r0
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d96:	79e3      	ldrb	r3, [r4, #7]
 80a0d98:	6810      	ldr	r0, [r2, #0]
 80a0d9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d9e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0da2:	88bf      	ldrh	r7, [r7, #4]
 80a0da4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0da8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0daa:	4600      	mov	r0, r0
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0e08:	9b04      	ldr	r3, [sp, #16]
 80a0e0a:	085b      	lsrs	r3, r3, #1
 80a0e0c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0e0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e12:	3301      	adds	r3, #1
 80a0e14:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0e16:	2b1f      	cmp	r3, #31
 80a0e18:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e1c:	d87e      	bhi.n	80a0f1c <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0e1e:	79e3      	ldrb	r3, [r4, #7]
 80a0e20:	6810      	ldr	r0, [r2, #0]
 80a0e22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e26:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e2a:	88bf      	ldrh	r7, [r7, #4]
 80a0e2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e30:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e32:	9803      	ldr	r0, [sp, #12]
 80a0e34:	9b04      	ldr	r3, [sp, #16]
 80a0e36:	4218      	tst	r0, r3
 80a0e38:	f47f af76 	bne.w	80a0d28 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e3c:	4600      	mov	r0, r0
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0e64:	79e3      	ldrb	r3, [r4, #7]
 80a0e66:	6810      	ldr	r0, [r2, #0]
 80a0e68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e6c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e70:	88bf      	ldrh	r7, [r7, #4]
 80a0e72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e76:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e78:	4600      	mov	r0, r0
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	e775      	b.n	80a0e08 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0f1c:	468e      	mov	lr, r1
 80a0f1e:	e6ca      	b.n	80a0cb6 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0f20:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f22:	2903      	cmp	r1, #3
 80a0f24:	f000 812e 	beq.w	80a1184 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f28:	4a1e      	ldr	r2, [pc, #120]	; (80a0fa4 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0f2a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f2e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f34:	b29b      	uxth	r3, r3
 80a0f36:	2b00      	cmp	r3, #0
 80a0f38:	f43f ae2e 	beq.w	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f3c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f42:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0f44:	3b03      	subs	r3, #3
 80a0f46:	b29b      	uxth	r3, r3
 80a0f48:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f4c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f50:	f10e 0103 	add.w	r1, lr, #3
 80a0f54:	b2db      	uxtb	r3, r3
 80a0f56:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f5a:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0f62:	b2db      	uxtb	r3, r3
 80a0f64:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0f68:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f6c:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0f70:	b2db      	uxtb	r3, r3
 80a0f72:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f76:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0f7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f7e:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f82:	021b      	lsls	r3, r3, #8
 80a0f84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f88:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f8c:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f90:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f94:	433b      	orrs	r3, r7
 80a0f96:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f98:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0f9c:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0fa0:	e07d      	b.n	80a109e <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0fa2:	bf00      	nop
 80a0fa4:	20000388 	.word	0x20000388
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0fa8:	9b04      	ldr	r3, [sp, #16]
 80a0faa:	085b      	lsrs	r3, r3, #1
 80a0fac:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fae:	4600      	mov	r0, r0
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1034:	79e0      	ldrb	r0, [r4, #7]
 80a1036:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1038:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a103c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1040:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1044:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1048:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a104c:	3301      	adds	r3, #1
 80a104e:	b2db      	uxtb	r3, r3
 80a1050:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1054:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1058:	4600      	mov	r0, r0
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
          if(j==24) break;
 80a1082:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1086:	2b18      	cmp	r3, #24
 80a1088:	d07a      	beq.n	80a1180 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a108a:	79e3      	ldrb	r3, [r4, #7]
 80a108c:	6810      	ldr	r0, [r2, #0]
 80a108e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1092:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1096:	88bf      	ldrh	r7, [r7, #4]
 80a1098:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a109c:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a109e:	9803      	ldr	r0, [sp, #12]
 80a10a0:	9b04      	ldr	r3, [sp, #16]
 80a10a2:	4218      	tst	r0, r3
 80a10a4:	d180      	bne.n	80a0fa8 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a10a6:	4600      	mov	r0, r0
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a10c8:	79e3      	ldrb	r3, [r4, #7]
 80a10ca:	6810      	ldr	r0, [r2, #0]
 80a10cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10d0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10d4:	88bf      	ldrh	r7, [r7, #4]
 80a10d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10da:	831f      	strh	r7, [r3, #24]
          j++;
 80a10dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10e0:	3301      	adds	r3, #1
 80a10e2:	b2db      	uxtb	r3, r3
 80a10e4:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a10e8:	9b04      	ldr	r3, [sp, #16]
 80a10ea:	085b      	lsrs	r3, r3, #1
 80a10ec:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10ee:	4600      	mov	r0, r0
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
          if(j==24) break;
 80a1178:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a117c:	2b18      	cmp	r3, #24
 80a117e:	d184      	bne.n	80a108a <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1180:	468e      	mov	lr, r1
 80a1182:	e6d5      	b.n	80a0f30 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1184:	4a17      	ldr	r2, [pc, #92]	; (80a11e4 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1186:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a118a:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a118c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1190:	b29b      	uxth	r3, r3
 80a1192:	2b00      	cmp	r3, #0
 80a1194:	f43f ad00 	beq.w	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1198:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a119a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a119e:	f10e 0103 	add.w	r1, lr, #3
 80a11a2:	3b03      	subs	r3, #3
 80a11a4:	b29b      	uxth	r3, r3
 80a11a6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11aa:	f89e 3000 	ldrb.w	r3, [lr]
 80a11ae:	b2db      	uxtb	r3, r3
 80a11b0:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a11b4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a11b8:	b2db      	uxtb	r3, r3
 80a11ba:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a11be:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a11c2:	b2db      	uxtb	r3, r3
 80a11c4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11c8:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a11cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11d0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11d4:	021b      	lsls	r3, r3, #8
 80a11d6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a11da:	4303      	orrs	r3, r0
 80a11dc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a11de:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11e2:	e0e0      	b.n	80a13a6 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a11e4:	20000388 	.word	0x20000388
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11e8:	4600      	mov	r0, r0
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a130a:	79e3      	ldrb	r3, [r4, #7]
 80a130c:	6810      	ldr	r0, [r2, #0]
 80a130e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1312:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1316:	88bf      	ldrh	r7, [r7, #4]
 80a1318:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a131c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a131e:	4600      	mov	r0, r0
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a138e:	9b04      	ldr	r3, [sp, #16]
 80a1390:	085b      	lsrs	r3, r3, #1
 80a1392:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1394:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1398:	3301      	adds	r3, #1
 80a139a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a139c:	2b17      	cmp	r3, #23
 80a139e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a13a2:	f200 80e3 	bhi.w	80a156c <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a13a6:	79e3      	ldrb	r3, [r4, #7]
 80a13a8:	6810      	ldr	r0, [r2, #0]
 80a13aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13b2:	88bf      	ldrh	r7, [r7, #4]
 80a13b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13b8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a13ba:	9803      	ldr	r0, [sp, #12]
 80a13bc:	9b04      	ldr	r3, [sp, #16]
 80a13be:	4218      	tst	r0, r3
 80a13c0:	f47f af12 	bne.w	80a11e8 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13c4:	4600      	mov	r0, r0
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1446:	79e3      	ldrb	r3, [r4, #7]
 80a1448:	6810      	ldr	r0, [r2, #0]
 80a144a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a144e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1452:	88bf      	ldrh	r7, [r7, #4]
 80a1454:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1458:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a145a:	4600      	mov	r0, r0
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	e710      	b.n	80a138e <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a156c:	468e      	mov	lr, r1
 80a156e:	e60d      	b.n	80a118c <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1570 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1570:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1572:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1574:	428b      	cmp	r3, r1
 80a1576:	d945      	bls.n	80a1604 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1578:	7a05      	ldrb	r5, [r0, #8]
 80a157a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a157e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1582:	b2d6      	uxtb	r6, r2
 80a1584:	b145      	cbz	r5, 80a1598 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1586:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1588:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a158a:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a158c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1590:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1594:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1598:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a159c:	68c7      	ldr	r7, [r0, #12]
 80a159e:	f1bc 0f06 	cmp.w	ip, #6
 80a15a2:	bf0c      	ite	eq
 80a15a4:	2504      	moveq	r5, #4
 80a15a6:	2503      	movne	r5, #3
 80a15a8:	4369      	muls	r1, r5
 80a15aa:	f1bc 0f08 	cmp.w	ip, #8
 80a15ae:	eb07 0501 	add.w	r5, r7, r1
 80a15b2:	d824      	bhi.n	80a15fe <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a15b4:	f04f 0e01 	mov.w	lr, #1
 80a15b8:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a15bc:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a15c0:	d10c      	bne.n	80a15dc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a15c2:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a15c6:	d10d      	bne.n	80a15e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a15c8:	f01e 0f10 	tst.w	lr, #16
 80a15cc:	d017      	beq.n	80a15fe <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a15ce:	2bff      	cmp	r3, #255	; 0xff
 80a15d0:	bf08      	it	eq
 80a15d2:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a15d4:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a15d6:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a15d8:	70ac      	strb	r4, [r5, #2]
        } break;
 80a15da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a15dc:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a15de:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a15e0:	70ae      	strb	r6, [r5, #2]
        } break;
 80a15e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a15e4:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a15e6:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a15e8:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15ea:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a15ec:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15ee:	b90b      	cbnz	r3, 80a15f4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a15f0:	b2d2      	uxtb	r2, r2
 80a15f2:	e002      	b.n	80a15fa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15f4:	435a      	muls	r2, r3
 80a15f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a15fa:	70ea      	strb	r2, [r5, #3]
        } break;
 80a15fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a15fe:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1600:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1602:	70ae      	strb	r6, [r5, #2]
 80a1604:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1606 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1606:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a160a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a160e:	4770      	bx	lr

080a1610 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1610:	b508      	push	{r3, lr}
 80a1612:	f000 f82f 	bl	80a1674 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1616:	f000 f82d 	bl	80a1674 <HAL_Pin_Map>
 80a161a:	4b01      	ldr	r3, [pc, #4]	; (80a1620 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a161c:	6018      	str	r0, [r3, #0]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	20000388 	.word	0x20000388

080a1624 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <os_mutex_create+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601d0 	.word	0x080601d0

080a1634 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601b8 	.word	0x080601b8

080a1644 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_RNG_GetRandomNumber+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	685b      	ldr	r3, [r3, #4]
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	0806019c 	.word	0x0806019c

080a1654 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	691b      	ldr	r3, [r3, #16]
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	0806019c 	.word	0x0806019c

080a1664 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	695b      	ldr	r3, [r3, #20]
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	0806019c 	.word	0x0806019c

080a1674 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <HAL_Pin_Map+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	681b      	ldr	r3, [r3, #0]
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	080601b0 	.word	0x080601b0

080a1684 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <HAL_Pin_Mode+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	689b      	ldr	r3, [r3, #8]
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	080601b0 	.word	0x080601b0

080a1694 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <HAL_Get_Pin_Mode+0xc>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	68db      	ldr	r3, [r3, #12]
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	080601b0 	.word	0x080601b0

080a16a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <HAL_GPIO_Write+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	691b      	ldr	r3, [r3, #16]
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601b0 	.word	0x080601b0

080a16b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <HAL_I2C_Write_Data+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601ac 	.word	0x080601ac

080a16c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <HAL_I2C_Available_Data+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080601ac 	.word	0x080601ac

080a16d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <HAL_I2C_Read_Data+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080601ac 	.word	0x080601ac

080a16e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <HAL_I2C_Peek_Data+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080601ac 	.word	0x080601ac

080a16f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <HAL_I2C_Flush_Data+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601ac 	.word	0x080601ac

080a1704 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <HAL_I2C_Is_Enabled+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601ac 	.word	0x080601ac

080a1714 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b03      	ldr	r3, [pc, #12]	; (80a1724 <HAL_I2C_Init+0x10>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a171e:	9301      	str	r3, [sp, #4]
 80a1720:	bd08      	pop	{r3, pc}
 80a1722:	0000      	.short	0x0000
 80a1724:	080601ac 	.word	0x080601ac

080a1728 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1728:	b508      	push	{r3, lr}
 80a172a:	4b02      	ldr	r3, [pc, #8]	; (80a1734 <HAL_SPI_Init+0xc>)
 80a172c:	681b      	ldr	r3, [r3, #0]
 80a172e:	69db      	ldr	r3, [r3, #28]
 80a1730:	9301      	str	r3, [sp, #4]
 80a1732:	bd08      	pop	{r3, pc}
 80a1734:	080601b4 	.word	0x080601b4

080a1738 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1738:	b508      	push	{r3, lr}
 80a173a:	4b02      	ldr	r3, [pc, #8]	; (80a1744 <HAL_SPI_Is_Enabled+0xc>)
 80a173c:	681b      	ldr	r3, [r3, #0]
 80a173e:	6a1b      	ldr	r3, [r3, #32]
 80a1740:	9301      	str	r3, [sp, #4]
 80a1742:	bd08      	pop	{r3, pc}
 80a1744:	080601b4 	.word	0x080601b4

080a1748 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1748:	b508      	push	{r3, lr}
 80a174a:	4b02      	ldr	r3, [pc, #8]	; (80a1754 <HAL_USART_Init+0xc>)
 80a174c:	681b      	ldr	r3, [r3, #0]
 80a174e:	699b      	ldr	r3, [r3, #24]
 80a1750:	9301      	str	r3, [sp, #4]
 80a1752:	bd08      	pop	{r3, pc}
 80a1754:	080601c4 	.word	0x080601c4

080a1758 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1758:	b508      	push	{r3, lr}
 80a175a:	4b02      	ldr	r3, [pc, #8]	; (80a1764 <HAL_USART_Write_Data+0xc>)
 80a175c:	681b      	ldr	r3, [r3, #0]
 80a175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1760:	9301      	str	r3, [sp, #4]
 80a1762:	bd08      	pop	{r3, pc}
 80a1764:	080601c4 	.word	0x080601c4

080a1768 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1768:	b508      	push	{r3, lr}
 80a176a:	4b02      	ldr	r3, [pc, #8]	; (80a1774 <HAL_USART_Available_Data+0xc>)
 80a176c:	681b      	ldr	r3, [r3, #0]
 80a176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1770:	9301      	str	r3, [sp, #4]
 80a1772:	bd08      	pop	{r3, pc}
 80a1774:	080601c4 	.word	0x080601c4

080a1778 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1778:	b508      	push	{r3, lr}
 80a177a:	4b02      	ldr	r3, [pc, #8]	; (80a1784 <HAL_USART_Read_Data+0xc>)
 80a177c:	681b      	ldr	r3, [r3, #0]
 80a177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1780:	9301      	str	r3, [sp, #4]
 80a1782:	bd08      	pop	{r3, pc}
 80a1784:	080601c4 	.word	0x080601c4

080a1788 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1788:	b508      	push	{r3, lr}
 80a178a:	4b02      	ldr	r3, [pc, #8]	; (80a1794 <HAL_USART_Peek_Data+0xc>)
 80a178c:	681b      	ldr	r3, [r3, #0]
 80a178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1790:	9301      	str	r3, [sp, #4]
 80a1792:	bd08      	pop	{r3, pc}
 80a1794:	080601c4 	.word	0x080601c4

080a1798 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1798:	b508      	push	{r3, lr}
 80a179a:	4b02      	ldr	r3, [pc, #8]	; (80a17a4 <HAL_USART_Flush_Data+0xc>)
 80a179c:	681b      	ldr	r3, [r3, #0]
 80a179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17a0:	9301      	str	r3, [sp, #4]
 80a17a2:	bd08      	pop	{r3, pc}
 80a17a4:	080601c4 	.word	0x080601c4

080a17a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17a8:	b508      	push	{r3, lr}
 80a17aa:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <HAL_USART_Is_Enabled+0xc>)
 80a17ac:	681b      	ldr	r3, [r3, #0]
 80a17ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17b0:	9301      	str	r3, [sp, #4]
 80a17b2:	bd08      	pop	{r3, pc}
 80a17b4:	080601c4 	.word	0x080601c4

080a17b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17b8:	b508      	push	{r3, lr}
 80a17ba:	4b02      	ldr	r3, [pc, #8]	; (80a17c4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a17bc:	681b      	ldr	r3, [r3, #0]
 80a17be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17c0:	9301      	str	r3, [sp, #4]
 80a17c2:	bd08      	pop	{r3, pc}
 80a17c4:	080601c4 	.word	0x080601c4

080a17c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17c8:	b508      	push	{r3, lr}
 80a17ca:	4b02      	ldr	r3, [pc, #8]	; (80a17d4 <HAL_USB_USART_Init+0xc>)
 80a17cc:	681b      	ldr	r3, [r3, #0]
 80a17ce:	681b      	ldr	r3, [r3, #0]
 80a17d0:	9301      	str	r3, [sp, #4]
 80a17d2:	bd08      	pop	{r3, pc}
 80a17d4:	080601d8 	.word	0x080601d8

080a17d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17d8:	b508      	push	{r3, lr}
 80a17da:	4b02      	ldr	r3, [pc, #8]	; (80a17e4 <HAL_USB_USART_Available_Data+0xc>)
 80a17dc:	681b      	ldr	r3, [r3, #0]
 80a17de:	691b      	ldr	r3, [r3, #16]
 80a17e0:	9301      	str	r3, [sp, #4]
 80a17e2:	bd08      	pop	{r3, pc}
 80a17e4:	080601d8 	.word	0x080601d8

080a17e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a17e8:	b508      	push	{r3, lr}
 80a17ea:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a17ec:	681b      	ldr	r3, [r3, #0]
 80a17ee:	695b      	ldr	r3, [r3, #20]
 80a17f0:	9301      	str	r3, [sp, #4]
 80a17f2:	bd08      	pop	{r3, pc}
 80a17f4:	080601d8 	.word	0x080601d8

080a17f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17f8:	b508      	push	{r3, lr}
 80a17fa:	4b02      	ldr	r3, [pc, #8]	; (80a1804 <HAL_USB_USART_Receive_Data+0xc>)
 80a17fc:	681b      	ldr	r3, [r3, #0]
 80a17fe:	699b      	ldr	r3, [r3, #24]
 80a1800:	9301      	str	r3, [sp, #4]
 80a1802:	bd08      	pop	{r3, pc}
 80a1804:	080601d8 	.word	0x080601d8

080a1808 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <HAL_USB_USART_Send_Data+0xc>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	69db      	ldr	r3, [r3, #28]
 80a1810:	9301      	str	r3, [sp, #4]
 80a1812:	bd08      	pop	{r3, pc}
 80a1814:	080601d8 	.word	0x080601d8

080a1818 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <HAL_USB_USART_Flush_Data+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	6a1b      	ldr	r3, [r3, #32]
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601d8 	.word	0x080601d8

080a1828 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <set_system_mode+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	685b      	ldr	r3, [r3, #4]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601a4 	.word	0x080601a4

080a1838 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <system_delay_ms+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	695b      	ldr	r3, [r3, #20]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601a4 	.word	0x080601a4

080a1848 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b03      	ldr	r3, [pc, #12]	; (80a1858 <system_ctrl_set_app_request_handler+0x10>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1852:	9301      	str	r3, [sp, #4]
 80a1854:	bd08      	pop	{r3, pc}
 80a1856:	0000      	.short	0x0000
 80a1858:	080601a4 	.word	0x080601a4

080a185c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b03      	ldr	r3, [pc, #12]	; (80a186c <system_ctrl_set_result+0x10>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1866:	9301      	str	r3, [sp, #4]
 80a1868:	bd08      	pop	{r3, pc}
 80a186a:	0000      	.short	0x0000
 80a186c:	080601a4 	.word	0x080601a4

080a1870 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601cc 	.word	0x080601cc

080a1880 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <network_ready+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	691b      	ldr	r3, [r3, #16]
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601c8 	.word	0x080601c8

080a1890 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <malloc+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	681b      	ldr	r3, [r3, #0]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601a0 	.word	0x080601a0

080a18a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <free+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	685b      	ldr	r3, [r3, #4]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601a0 	.word	0x080601a0

080a18b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a18b0:	2100      	movs	r1, #0
 80a18b2:	f7ff bfc1 	b.w	80a1838 <system_delay_ms>

080a18b6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a18b6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a18b8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a18ba:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a18bc:	b113      	cbz	r3, 80a18c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a18be:	2203      	movs	r2, #3
 80a18c0:	4601      	mov	r1, r0
 80a18c2:	4798      	blx	r3
    }
 80a18c4:	4620      	mov	r0, r4
 80a18c6:	bd10      	pop	{r4, pc}

080a18c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a18c8:	4770      	bx	lr

080a18ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a18ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18cc:	4606      	mov	r6, r0
 80a18ce:	4615      	mov	r5, r2
 80a18d0:	460c      	mov	r4, r1
 80a18d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a18d4:	42bc      	cmp	r4, r7
 80a18d6:	d006      	beq.n	80a18e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a18d8:	6833      	ldr	r3, [r6, #0]
 80a18da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a18de:	689b      	ldr	r3, [r3, #8]
 80a18e0:	4630      	mov	r0, r6
 80a18e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a18e4:	e7f6      	b.n	80a18d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a18e6:	4628      	mov	r0, r5
 80a18e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a18ea:	2200      	movs	r2, #0
 80a18ec:	7c00      	ldrb	r0, [r0, #16]
 80a18ee:	f7ff bee1 	b.w	80a16b4 <HAL_I2C_Write_Data>

080a18f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a18f2:	2100      	movs	r1, #0
 80a18f4:	7c00      	ldrb	r0, [r0, #16]
 80a18f6:	f7ff bee5 	b.w	80a16c4 <HAL_I2C_Available_Data>

080a18fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a18fa:	2100      	movs	r1, #0
 80a18fc:	7c00      	ldrb	r0, [r0, #16]
 80a18fe:	f7ff bee9 	b.w	80a16d4 <HAL_I2C_Read_Data>

080a1902 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1902:	2100      	movs	r1, #0
 80a1904:	7c00      	ldrb	r0, [r0, #16]
 80a1906:	f7ff beed 	b.w	80a16e4 <HAL_I2C_Peek_Data>

080a190a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a190a:	2100      	movs	r1, #0
 80a190c:	7c00      	ldrb	r0, [r0, #16]
 80a190e:	f7ff bef1 	b.w	80a16f4 <HAL_I2C_Flush_Data>

080a1912 <_ZN7TwoWireD0Ev>:
 80a1912:	b510      	push	{r4, lr}
 80a1914:	4604      	mov	r4, r0
 80a1916:	f7fe fbc0 	bl	80a009a <_ZdlPv>
 80a191a:	4620      	mov	r0, r4
 80a191c:	bd10      	pop	{r4, pc}
	...

080a1920 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1920:	b510      	push	{r4, lr}
 80a1922:	4604      	mov	r4, r0
 80a1924:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a192a:	60a3      	str	r3, [r4, #8]
 80a192c:	4b04      	ldr	r3, [pc, #16]	; (80a1940 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a192e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1930:	7420      	strb	r0, [r4, #16]
 80a1932:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1934:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1936:	f7ff feed 	bl	80a1714 <HAL_I2C_Init>

}
 80a193a:	4620      	mov	r0, r4
 80a193c:	bd10      	pop	{r4, pc}
 80a193e:	bf00      	nop
 80a1940:	080a2c10 	.word	0x080a2c10

080a1944 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1944:	2100      	movs	r1, #0
 80a1946:	7c00      	ldrb	r0, [r0, #16]
 80a1948:	f7ff bedc 	b.w	80a1704 <HAL_I2C_Is_Enabled>

080a194c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a194c:	4770      	bx	lr

080a194e <_ZN9IPAddressD0Ev>:
 80a194e:	b510      	push	{r4, lr}
 80a1950:	4604      	mov	r4, r0
 80a1952:	f7fe fba2 	bl	80a009a <_ZdlPv>
 80a1956:	4620      	mov	r0, r4
 80a1958:	bd10      	pop	{r4, pc}

080a195a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a195a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a195c:	460f      	mov	r7, r1
 80a195e:	f100 0608 	add.w	r6, r0, #8
 80a1962:	1d05      	adds	r5, r0, #4
 80a1964:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a196a:	220a      	movs	r2, #10
 80a196c:	4638      	mov	r0, r7
 80a196e:	f000 f882 	bl	80a1a76 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1972:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1974:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1976:	d007      	beq.n	80a1988 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1978:	2c00      	cmp	r4, #0
 80a197a:	d0f4      	beq.n	80a1966 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a197c:	212e      	movs	r1, #46	; 0x2e
 80a197e:	4638      	mov	r0, r7
 80a1980:	f000 f84c 	bl	80a1a1c <_ZN5Print5printEc>
 80a1984:	4404      	add	r4, r0
 80a1986:	e7ee      	b.n	80a1966 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1988:	4620      	mov	r0, r4
 80a198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a198c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a198c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a198e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1992:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1996:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a199a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a199e:	2304      	movs	r3, #4
 80a19a0:	6041      	str	r1, [r0, #4]
 80a19a2:	7503      	strb	r3, [r0, #20]
 80a19a4:	bd10      	pop	{r4, pc}
	...

080a19a8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a19a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19aa:	4d04      	ldr	r5, [pc, #16]	; (80a19bc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a19ac:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a19ae:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a19b2:	9500      	str	r5, [sp, #0]
 80a19b4:	f7ff ffea 	bl	80a198c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a19b8:	b003      	add	sp, #12
 80a19ba:	bd30      	pop	{r4, r5, pc}
 80a19bc:	080a2c38 	.word	0x080a2c38

080a19c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a19c0:	4a01      	ldr	r2, [pc, #4]	; (80a19c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a19c2:	4b02      	ldr	r3, [pc, #8]	; (80a19cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a19c4:	601a      	str	r2, [r3, #0]
 80a19c6:	4770      	bx	lr
 80a19c8:	080a2cff 	.word	0x080a2cff
 80a19cc:	2000038c 	.word	0x2000038c

080a19d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a19d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19d2:	4606      	mov	r6, r0
 80a19d4:	460d      	mov	r5, r1
 80a19d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a19d8:	2400      	movs	r4, #0
  while (size--) {
 80a19da:	42bd      	cmp	r5, r7
 80a19dc:	d00c      	beq.n	80a19f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a19de:	6833      	ldr	r3, [r6, #0]
 80a19e0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a19e4:	689b      	ldr	r3, [r3, #8]
 80a19e6:	4630      	mov	r0, r6
 80a19e8:	4798      	blx	r3
     if (chunk>=0)
 80a19ea:	2800      	cmp	r0, #0
 80a19ec:	db01      	blt.n	80a19f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a19ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a19f0:	e7f3      	b.n	80a19da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a19f2:	2c00      	cmp	r4, #0
 80a19f4:	bf08      	it	eq
 80a19f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a19f8:	4620      	mov	r0, r4
 80a19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a19fc:	b570      	push	{r4, r5, r6, lr}
 80a19fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a00:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1a02:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1a04:	b149      	cbz	r1, 80a1a1a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a06:	f001 f8e3 	bl	80a2bd0 <strlen>
 80a1a0a:	682b      	ldr	r3, [r5, #0]
 80a1a0c:	4602      	mov	r2, r0
 80a1a0e:	4621      	mov	r1, r4
 80a1a10:	4628      	mov	r0, r5
    }
 80a1a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1a16:	68db      	ldr	r3, [r3, #12]
 80a1a18:	4718      	bx	r3
    }
 80a1a1a:	bd70      	pop	{r4, r5, r6, pc}

080a1a1c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a1c:	6803      	ldr	r3, [r0, #0]
 80a1a1e:	689b      	ldr	r3, [r3, #8]
 80a1a20:	4718      	bx	r3

080a1a22 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1a22:	2a01      	cmp	r2, #1
 80a1a24:	bf98      	it	ls
 80a1a26:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1a28:	b530      	push	{r4, r5, lr}
 80a1a2a:	460b      	mov	r3, r1
 80a1a2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1a2e:	2100      	movs	r1, #0
 80a1a30:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1a34:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1a38:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1a3c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1a40:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1a42:	2b09      	cmp	r3, #9
 80a1a44:	bf94      	ite	ls
 80a1a46:	3330      	addls	r3, #48	; 0x30
 80a1a48:	3337      	addhi	r3, #55	; 0x37
 80a1a4a:	b2db      	uxtb	r3, r3
 80a1a4c:	4621      	mov	r1, r4
 80a1a4e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a52:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a54:	2d00      	cmp	r5, #0
 80a1a56:	d1ef      	bne.n	80a1a38 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a58:	f7ff ffd0 	bl	80a19fc <_ZN5Print5writeEPKc>
}
 80a1a5c:	b00b      	add	sp, #44	; 0x2c
 80a1a5e:	bd30      	pop	{r4, r5, pc}

080a1a60 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a60:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a62:	b922      	cbnz	r2, 80a1a6e <_ZN5Print5printEmi+0xe>
 80a1a64:	6803      	ldr	r3, [r0, #0]
 80a1a66:	b2c9      	uxtb	r1, r1
 80a1a68:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a6a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1a6c:	4718      	bx	r3
  else return printNumber(n, base);
 80a1a6e:	b2d2      	uxtb	r2, r2
}
 80a1a70:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1a72:	f7ff bfd6 	b.w	80a1a22 <_ZN5Print11printNumberEmh>

080a1a76 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1a76:	f7ff bff3 	b.w	80a1a60 <_ZN5Print5printEmi>

080a1a7a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1a7a:	b510      	push	{r4, lr}
 80a1a7c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a7e:	f7ff ff1a 	bl	80a18b6 <_ZNSt14_Function_baseD1Ev>
 80a1a82:	4620      	mov	r0, r4
 80a1a84:	bd10      	pop	{r4, pc}
	...

080a1a88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1a88:	4803      	ldr	r0, [pc, #12]	; (80a1a98 <_GLOBAL__sub_I_RGB+0x10>)
 80a1a8a:	2300      	movs	r3, #0
 80a1a8c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1a8e:	4a03      	ldr	r2, [pc, #12]	; (80a1a9c <_GLOBAL__sub_I_RGB+0x14>)
 80a1a90:	4903      	ldr	r1, [pc, #12]	; (80a1aa0 <_GLOBAL__sub_I_RGB+0x18>)
 80a1a92:	f000 bacb 	b.w	80a202c <__aeabi_atexit>
 80a1a96:	bf00      	nop
 80a1a98:	20000390 	.word	0x20000390
 80a1a9c:	20000368 	.word	0x20000368
 80a1aa0:	080a1a7b 	.word	0x080a1a7b

080a1aa4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1aa4:	4770      	bx	lr

080a1aa6 <_ZN8SPIClassD0Ev>:
 80a1aa6:	b510      	push	{r4, lr}
 80a1aa8:	4604      	mov	r4, r0
 80a1aaa:	f7fe faf6 	bl	80a009a <_ZdlPv>
 80a1aae:	4620      	mov	r0, r4
 80a1ab0:	bd10      	pop	{r4, pc}
	...

080a1ab4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1ab4:	b570      	push	{r4, r5, r6, lr}
 80a1ab6:	4604      	mov	r4, r0
 80a1ab8:	460e      	mov	r6, r1
 80a1aba:	4b07      	ldr	r3, [pc, #28]	; (80a1ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1abc:	2500      	movs	r5, #0
 80a1abe:	6003      	str	r3, [r0, #0]
 80a1ac0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1ac4:	f7ff fdae 	bl	80a1624 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1ac8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1aca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1acc:	f7ff fe2c 	bl	80a1728 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1ad0:	60a5      	str	r5, [r4, #8]
}
 80a1ad2:	4620      	mov	r0, r4
 80a1ad4:	bd70      	pop	{r4, r5, r6, pc}
 80a1ad6:	bf00      	nop
 80a1ad8:	080a2d30 	.word	0x080a2d30

080a1adc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1adc:	7900      	ldrb	r0, [r0, #4]
 80a1ade:	f7ff be2b 	b.w	80a1738 <HAL_SPI_Is_Enabled>
	...

080a1ae4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1ae4:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a1ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1aea:	4c0d      	ldr	r4, [pc, #52]	; (80a1b20 <_GLOBAL__sub_I_System+0x3c>)
 80a1aec:	2500      	movs	r5, #0
 80a1aee:	8063      	strh	r3, [r4, #2]
 80a1af0:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1af4:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1af6:	80a3      	strh	r3, [r4, #4]
 80a1af8:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1afa:	f7ff fe95 	bl	80a1828 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a1afe:	a802      	add	r0, sp, #8
 80a1b00:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1b04:	462a      	mov	r2, r5
 80a1b06:	4629      	mov	r1, r5
 80a1b08:	f7ff fd94 	bl	80a1634 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1b0c:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1b0e:	2b1e      	cmp	r3, #30
 80a1b10:	d104      	bne.n	80a1b1c <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1b12:	2303      	movs	r3, #3
 80a1b14:	7023      	strb	r3, [r4, #0]
 80a1b16:	2311      	movs	r3, #17
 80a1b18:	8065      	strh	r5, [r4, #2]
 80a1b1a:	80a3      	strh	r3, [r4, #4]
 80a1b1c:	b003      	add	sp, #12
 80a1b1e:	bd30      	pop	{r4, r5, pc}
 80a1b20:	200003a0 	.word	0x200003a0

080a1b24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1b24:	4b02      	ldr	r3, [pc, #8]	; (80a1b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1b26:	681a      	ldr	r2, [r3, #0]
 80a1b28:	4b02      	ldr	r3, [pc, #8]	; (80a1b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1b2a:	601a      	str	r2, [r3, #0]
 80a1b2c:	4770      	bx	lr
 80a1b2e:	bf00      	nop
 80a1b30:	20000300 	.word	0x20000300
 80a1b34:	200003a8 	.word	0x200003a8

080a1b38 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1b38:	4770      	bx	lr

080a1b3a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b3a:	7441      	strb	r1, [r0, #17]
 80a1b3c:	4770      	bx	lr

080a1b3e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1b3e:	7c00      	ldrb	r0, [r0, #16]
 80a1b40:	f7ff be3a 	b.w	80a17b8 <HAL_USART_Available_Data_For_Write>

080a1b44 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1b44:	7c00      	ldrb	r0, [r0, #16]
 80a1b46:	f7ff be0f 	b.w	80a1768 <HAL_USART_Available_Data>

080a1b4a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1b4a:	7c00      	ldrb	r0, [r0, #16]
 80a1b4c:	f7ff be1c 	b.w	80a1788 <HAL_USART_Peek_Data>

080a1b50 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1b50:	7c00      	ldrb	r0, [r0, #16]
 80a1b52:	f7ff be11 	b.w	80a1778 <HAL_USART_Read_Data>

080a1b56 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1b56:	7c00      	ldrb	r0, [r0, #16]
 80a1b58:	f7ff be1e 	b.w	80a1798 <HAL_USART_Flush_Data>

080a1b5c <_ZN11USARTSerialD0Ev>:
 80a1b5c:	b510      	push	{r4, lr}
 80a1b5e:	4604      	mov	r4, r0
 80a1b60:	f7fe fa9b 	bl	80a009a <_ZdlPv>
 80a1b64:	4620      	mov	r0, r4
 80a1b66:	bd10      	pop	{r4, pc}

080a1b68 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1b68:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1b6a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1b6c:	4604      	mov	r4, r0
 80a1b6e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1b70:	b925      	cbnz	r5, 80a1b7c <_ZN11USARTSerial5writeEh+0x14>
 80a1b72:	7c00      	ldrb	r0, [r0, #16]
 80a1b74:	f7ff fe20 	bl	80a17b8 <HAL_USART_Available_Data_For_Write>
 80a1b78:	2800      	cmp	r0, #0
 80a1b7a:	dd05      	ble.n	80a1b88 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1b7c:	4631      	mov	r1, r6
 80a1b7e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1b84:	f7ff bde8 	b.w	80a1758 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1b88:	4628      	mov	r0, r5
 80a1b8a:	bd70      	pop	{r4, r5, r6, pc}

080a1b8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1b8c:	b510      	push	{r4, lr}
 80a1b8e:	4604      	mov	r4, r0
 80a1b90:	4608      	mov	r0, r1
 80a1b92:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1b94:	2200      	movs	r2, #0
 80a1b96:	6062      	str	r2, [r4, #4]
 80a1b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1b9c:	60a2      	str	r2, [r4, #8]
 80a1b9e:	4a05      	ldr	r2, [pc, #20]	; (80a1bb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1ba0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1ba2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1ba4:	2201      	movs	r2, #1
 80a1ba6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1ba8:	461a      	mov	r2, r3
 80a1baa:	f7ff fdcd 	bl	80a1748 <HAL_USART_Init>
}
 80a1bae:	4620      	mov	r0, r4
 80a1bb0:	bd10      	pop	{r4, pc}
 80a1bb2:	bf00      	nop
 80a1bb4:	080a2d6c 	.word	0x080a2d6c

080a1bb8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1bb8:	7c00      	ldrb	r0, [r0, #16]
 80a1bba:	f7ff bdf5 	b.w	80a17a8 <HAL_USART_Is_Enabled>
	...

080a1bc0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1bc0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1bc2:	4d0c      	ldr	r5, [pc, #48]	; (80a1bf4 <_Z22__fetch_global_Serial1v+0x34>)
 80a1bc4:	6829      	ldr	r1, [r5, #0]
 80a1bc6:	f011 0401 	ands.w	r4, r1, #1
 80a1bca:	d111      	bne.n	80a1bf0 <_Z22__fetch_global_Serial1v+0x30>
 80a1bcc:	4628      	mov	r0, r5
 80a1bce:	f7fe fa66 	bl	80a009e <__cxa_guard_acquire>
 80a1bd2:	b168      	cbz	r0, 80a1bf0 <_Z22__fetch_global_Serial1v+0x30>
 80a1bd4:	4a08      	ldr	r2, [pc, #32]	; (80a1bf8 <_Z22__fetch_global_Serial1v+0x38>)
 80a1bd6:	4621      	mov	r1, r4
 80a1bd8:	4b08      	ldr	r3, [pc, #32]	; (80a1bfc <_Z22__fetch_global_Serial1v+0x3c>)
 80a1bda:	4809      	ldr	r0, [pc, #36]	; (80a1c00 <_Z22__fetch_global_Serial1v+0x40>)
 80a1bdc:	f7ff ffd6 	bl	80a1b8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1be0:	4628      	mov	r0, r5
 80a1be2:	f7fe fa61 	bl	80a00a8 <__cxa_guard_release>
 80a1be6:	4a07      	ldr	r2, [pc, #28]	; (80a1c04 <_Z22__fetch_global_Serial1v+0x44>)
 80a1be8:	4907      	ldr	r1, [pc, #28]	; (80a1c08 <_Z22__fetch_global_Serial1v+0x48>)
 80a1bea:	4805      	ldr	r0, [pc, #20]	; (80a1c00 <_Z22__fetch_global_Serial1v+0x40>)
 80a1bec:	f000 fa1e 	bl	80a202c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1bf0:	4803      	ldr	r0, [pc, #12]	; (80a1c00 <_Z22__fetch_global_Serial1v+0x40>)
 80a1bf2:	bd38      	pop	{r3, r4, r5, pc}
 80a1bf4:	20000444 	.word	0x20000444
 80a1bf8:	20000448 	.word	0x20000448
 80a1bfc:	200003c0 	.word	0x200003c0
 80a1c00:	200003ac 	.word	0x200003ac
 80a1c04:	20000368 	.word	0x20000368
 80a1c08:	080a1b39 	.word	0x080a1b39

080a1c0c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1c0c:	7441      	strb	r1, [r0, #17]
 80a1c0e:	4770      	bx	lr

080a1c10 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1c10:	4770      	bx	lr

080a1c12 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1c12:	2100      	movs	r1, #0
 80a1c14:	7c00      	ldrb	r0, [r0, #16]
 80a1c16:	f7ff bdef 	b.w	80a17f8 <HAL_USB_USART_Receive_Data>

080a1c1a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1c1a:	2101      	movs	r1, #1
 80a1c1c:	7c00      	ldrb	r0, [r0, #16]
 80a1c1e:	f7ff bdeb 	b.w	80a17f8 <HAL_USB_USART_Receive_Data>

080a1c22 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1c22:	7c00      	ldrb	r0, [r0, #16]
 80a1c24:	f7ff bde0 	b.w	80a17e8 <HAL_USB_USART_Available_Data_For_Write>

080a1c28 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1c28:	7c00      	ldrb	r0, [r0, #16]
 80a1c2a:	f7ff bdd5 	b.w	80a17d8 <HAL_USB_USART_Available_Data>

080a1c2e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1c2e:	b538      	push	{r3, r4, r5, lr}
 80a1c30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c32:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1c34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c36:	f7ff fdd7 	bl	80a17e8 <HAL_USB_USART_Available_Data_For_Write>
 80a1c3a:	2800      	cmp	r0, #0
 80a1c3c:	dc01      	bgt.n	80a1c42 <_ZN9USBSerial5writeEh+0x14>
 80a1c3e:	7c60      	ldrb	r0, [r4, #17]
 80a1c40:	b120      	cbz	r0, 80a1c4c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1c42:	4629      	mov	r1, r5
 80a1c44:	7c20      	ldrb	r0, [r4, #16]
 80a1c46:	f7ff fddf 	bl	80a1808 <HAL_USB_USART_Send_Data>
    return 1;
 80a1c4a:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1c4c:	bd38      	pop	{r3, r4, r5, pc}

080a1c4e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1c4e:	7c00      	ldrb	r0, [r0, #16]
 80a1c50:	f7ff bde2 	b.w	80a1818 <HAL_USB_USART_Flush_Data>

080a1c54 <_ZN9USBSerialD0Ev>:
 80a1c54:	b510      	push	{r4, lr}
 80a1c56:	4604      	mov	r4, r0
 80a1c58:	f7fe fa1f 	bl	80a009a <_ZdlPv>
 80a1c5c:	4620      	mov	r0, r4
 80a1c5e:	bd10      	pop	{r4, pc}

080a1c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c60:	b510      	push	{r4, lr}
 80a1c62:	4604      	mov	r4, r0
 80a1c64:	2300      	movs	r3, #0
 80a1c66:	6063      	str	r3, [r4, #4]
 80a1c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c6c:	60a3      	str	r3, [r4, #8]
 80a1c6e:	4b05      	ldr	r3, [pc, #20]	; (80a1c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1c70:	4608      	mov	r0, r1
 80a1c72:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1c74:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1c76:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1c78:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1c7a:	4611      	mov	r1, r2
 80a1c7c:	f7ff fda4 	bl	80a17c8 <HAL_USB_USART_Init>
}
 80a1c80:	4620      	mov	r0, r4
 80a1c82:	bd10      	pop	{r4, pc}
 80a1c84:	080a2d9c 	.word	0x080a2d9c

080a1c88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1c88:	b510      	push	{r4, lr}
 80a1c8a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c8c:	2214      	movs	r2, #20
 80a1c8e:	2100      	movs	r1, #0
 80a1c90:	f000 ff6d 	bl	80a2b6e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c94:	4b05      	ldr	r3, [pc, #20]	; (80a1cac <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c96:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c98:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1c9a:	4b05      	ldr	r3, [pc, #20]	; (80a1cb0 <_Z19acquireSerialBufferv+0x28>)
 80a1c9c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c9e:	f240 1301 	movw	r3, #257	; 0x101
 80a1ca2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1ca4:	2381      	movs	r3, #129	; 0x81
 80a1ca6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1ca8:	bd10      	pop	{r4, pc}
 80a1caa:	bf00      	nop
 80a1cac:	20000551 	.word	0x20000551
 80a1cb0:	200004d0 	.word	0x200004d0

080a1cb4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1cb4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1cb6:	4d0e      	ldr	r5, [pc, #56]	; (80a1cf0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1cb8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1cba:	a801      	add	r0, sp, #4
 80a1cbc:	f7ff ffe4 	bl	80a1c88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1cc0:	6829      	ldr	r1, [r5, #0]
 80a1cc2:	f011 0401 	ands.w	r4, r1, #1
 80a1cc6:	d110      	bne.n	80a1cea <_Z16_fetch_usbserialv+0x36>
 80a1cc8:	4628      	mov	r0, r5
 80a1cca:	f7fe f9e8 	bl	80a009e <__cxa_guard_acquire>
 80a1cce:	b160      	cbz	r0, 80a1cea <_Z16_fetch_usbserialv+0x36>
 80a1cd0:	aa01      	add	r2, sp, #4
 80a1cd2:	4621      	mov	r1, r4
 80a1cd4:	4807      	ldr	r0, [pc, #28]	; (80a1cf4 <_Z16_fetch_usbserialv+0x40>)
 80a1cd6:	f7ff ffc3 	bl	80a1c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cda:	4628      	mov	r0, r5
 80a1cdc:	f7fe f9e4 	bl	80a00a8 <__cxa_guard_release>
 80a1ce0:	4a05      	ldr	r2, [pc, #20]	; (80a1cf8 <_Z16_fetch_usbserialv+0x44>)
 80a1ce2:	4906      	ldr	r1, [pc, #24]	; (80a1cfc <_Z16_fetch_usbserialv+0x48>)
 80a1ce4:	4803      	ldr	r0, [pc, #12]	; (80a1cf4 <_Z16_fetch_usbserialv+0x40>)
 80a1ce6:	f000 f9a1 	bl	80a202c <__aeabi_atexit>
	return _usbserial;
}
 80a1cea:	4802      	ldr	r0, [pc, #8]	; (80a1cf4 <_Z16_fetch_usbserialv+0x40>)
 80a1cec:	b007      	add	sp, #28
 80a1cee:	bd30      	pop	{r4, r5, pc}
 80a1cf0:	200004cc 	.word	0x200004cc
 80a1cf4:	20000654 	.word	0x20000654
 80a1cf8:	20000368 	.word	0x20000368
 80a1cfc:	080a1c11 	.word	0x080a1c11

080a1d00 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1d00:	b510      	push	{r4, lr}
 80a1d02:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1d04:	2214      	movs	r2, #20
 80a1d06:	2100      	movs	r1, #0
 80a1d08:	f000 ff31 	bl	80a2b6e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1d0c:	4b05      	ldr	r3, [pc, #20]	; (80a1d24 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1d0e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1d10:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1d12:	4b05      	ldr	r3, [pc, #20]	; (80a1d28 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1d14:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1d16:	f240 1301 	movw	r3, #257	; 0x101
 80a1d1a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1d1c:	2381      	movs	r3, #129	; 0x81
 80a1d1e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1d20:	bd10      	pop	{r4, pc}
 80a1d22:	bf00      	nop
 80a1d24:	20000704 	.word	0x20000704
 80a1d28:	2000066c 	.word	0x2000066c

080a1d2c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1d2c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1d2e:	4c0e      	ldr	r4, [pc, #56]	; (80a1d68 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1d30:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1d32:	a801      	add	r0, sp, #4
 80a1d34:	f7ff ffe4 	bl	80a1d00 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1d38:	6823      	ldr	r3, [r4, #0]
 80a1d3a:	07db      	lsls	r3, r3, #31
 80a1d3c:	d410      	bmi.n	80a1d60 <_Z17_fetch_usbserial1v+0x34>
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	f7fe f9ad 	bl	80a009e <__cxa_guard_acquire>
 80a1d44:	b160      	cbz	r0, 80a1d60 <_Z17_fetch_usbserial1v+0x34>
 80a1d46:	aa01      	add	r2, sp, #4
 80a1d48:	2101      	movs	r1, #1
 80a1d4a:	4808      	ldr	r0, [pc, #32]	; (80a1d6c <_Z17_fetch_usbserial1v+0x40>)
 80a1d4c:	f7ff ff88 	bl	80a1c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1d50:	4620      	mov	r0, r4
 80a1d52:	f7fe f9a9 	bl	80a00a8 <__cxa_guard_release>
 80a1d56:	4a06      	ldr	r2, [pc, #24]	; (80a1d70 <_Z17_fetch_usbserial1v+0x44>)
 80a1d58:	4906      	ldr	r1, [pc, #24]	; (80a1d74 <_Z17_fetch_usbserial1v+0x48>)
 80a1d5a:	4804      	ldr	r0, [pc, #16]	; (80a1d6c <_Z17_fetch_usbserial1v+0x40>)
 80a1d5c:	f000 f966 	bl	80a202c <__aeabi_atexit>
  return _usbserial1;
}
 80a1d60:	4802      	ldr	r0, [pc, #8]	; (80a1d6c <_Z17_fetch_usbserial1v+0x40>)
 80a1d62:	b006      	add	sp, #24
 80a1d64:	bd10      	pop	{r4, pc}
 80a1d66:	bf00      	nop
 80a1d68:	20000668 	.word	0x20000668
 80a1d6c:	200006f0 	.word	0x200006f0
 80a1d70:	20000368 	.word	0x20000368
 80a1d74:	080a1c11 	.word	0x080a1c11

080a1d78 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a1d78:	4770      	bx	lr

080a1d7a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1d7a:	2200      	movs	r2, #0
 80a1d7c:	4611      	mov	r1, r2
 80a1d7e:	4610      	mov	r0, r2
 80a1d80:	f7ff bd7e 	b.w	80a1880 <network_ready>

080a1d84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1d84:	4803      	ldr	r0, [pc, #12]	; (80a1d94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1d86:	4b04      	ldr	r3, [pc, #16]	; (80a1d98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a1d88:	4a04      	ldr	r2, [pc, #16]	; (80a1d9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a1d8a:	4905      	ldr	r1, [pc, #20]	; (80a1da0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a1d8c:	6003      	str	r3, [r0, #0]
 80a1d8e:	f000 b94d 	b.w	80a202c <__aeabi_atexit>
 80a1d92:	bf00      	nop
 80a1d94:	20000808 	.word	0x20000808
 80a1d98:	080a2dcc 	.word	0x080a2dcc
 80a1d9c:	20000368 	.word	0x20000368
 80a1da0:	080a1d79 	.word	0x080a1d79

080a1da4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1da4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1da6:	4b14      	ldr	r3, [pc, #80]	; (80a1df8 <serialEventRun+0x54>)
 80a1da8:	b133      	cbz	r3, 80a1db8 <serialEventRun+0x14>
 80a1daa:	f7ff ff83 	bl	80a1cb4 <_Z16_fetch_usbserialv>
 80a1dae:	6803      	ldr	r3, [r0, #0]
 80a1db0:	691b      	ldr	r3, [r3, #16]
 80a1db2:	4798      	blx	r3
 80a1db4:	2800      	cmp	r0, #0
 80a1db6:	dc16      	bgt.n	80a1de6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1db8:	4b10      	ldr	r3, [pc, #64]	; (80a1dfc <serialEventRun+0x58>)
 80a1dba:	b133      	cbz	r3, 80a1dca <serialEventRun+0x26>
 80a1dbc:	f7ff ff00 	bl	80a1bc0 <_Z22__fetch_global_Serial1v>
 80a1dc0:	6803      	ldr	r3, [r0, #0]
 80a1dc2:	691b      	ldr	r3, [r3, #16]
 80a1dc4:	4798      	blx	r3
 80a1dc6:	2800      	cmp	r0, #0
 80a1dc8:	dc10      	bgt.n	80a1dec <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1dca:	4b0d      	ldr	r3, [pc, #52]	; (80a1e00 <serialEventRun+0x5c>)
 80a1dcc:	b10b      	cbz	r3, 80a1dd2 <serialEventRun+0x2e>
 80a1dce:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1dd2:	4b0c      	ldr	r3, [pc, #48]	; (80a1e04 <serialEventRun+0x60>)
 80a1dd4:	b17b      	cbz	r3, 80a1df6 <serialEventRun+0x52>
 80a1dd6:	f7ff ffa9 	bl	80a1d2c <_Z17_fetch_usbserial1v>
 80a1dda:	6803      	ldr	r3, [r0, #0]
 80a1ddc:	691b      	ldr	r3, [r3, #16]
 80a1dde:	4798      	blx	r3
 80a1de0:	2800      	cmp	r0, #0
 80a1de2:	dc06      	bgt.n	80a1df2 <serialEventRun+0x4e>
 80a1de4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1de6:	f3af 8000 	nop.w
 80a1dea:	e7e5      	b.n	80a1db8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1dec:	f3af 8000 	nop.w
 80a1df0:	e7eb      	b.n	80a1dca <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1df2:	f3af 8000 	nop.w
 80a1df6:	bd08      	pop	{r3, pc}
	...

080a1e08 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e08:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e0a:	f7ff ffcb 	bl	80a1da4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e0e:	f7ff fc29 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e12:	4b01      	ldr	r3, [pc, #4]	; (80a1e18 <_post_loop+0x10>)
 80a1e14:	6018      	str	r0, [r3, #0]
 80a1e16:	bd08      	pop	{r3, pc}
 80a1e18:	20000814 	.word	0x20000814

080a1e1c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e1c:	4802      	ldr	r0, [pc, #8]	; (80a1e28 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e1e:	4a03      	ldr	r2, [pc, #12]	; (80a1e2c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e20:	4903      	ldr	r1, [pc, #12]	; (80a1e30 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e22:	1a12      	subs	r2, r2, r0
 80a1e24:	f000 be98 	b.w	80a2b58 <memcpy>
 80a1e28:	40024000 	.word	0x40024000
 80a1e2c:	40024004 	.word	0x40024004
 80a1e30:	080a2e70 	.word	0x080a2e70

080a1e34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1e34:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e36:	2300      	movs	r3, #0
 80a1e38:	9300      	str	r3, [sp, #0]
 80a1e3a:	461a      	mov	r2, r3
 80a1e3c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e40:	f7ff fd0c 	bl	80a185c <system_ctrl_set_result>
}
 80a1e44:	b003      	add	sp, #12
 80a1e46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e4c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1e4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1e4e:	8843      	ldrh	r3, [r0, #2]
 80a1e50:	2b0a      	cmp	r3, #10
 80a1e52:	d008      	beq.n	80a1e66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1e54:	2b50      	cmp	r3, #80	; 0x50
 80a1e56:	d109      	bne.n	80a1e6c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1e58:	4b09      	ldr	r3, [pc, #36]	; (80a1e80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1e5a:	681b      	ldr	r3, [r3, #0]
 80a1e5c:	b13b      	cbz	r3, 80a1e6e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1e5e:	b003      	add	sp, #12
 80a1e60:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1e64:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1e66:	f7ff ffe5 	bl	80a1e34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1e6a:	e006      	b.n	80a1e7a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e6c:	2300      	movs	r3, #0
 80a1e6e:	9300      	str	r3, [sp, #0]
 80a1e70:	461a      	mov	r2, r3
 80a1e72:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e76:	f7ff fcf1 	bl	80a185c <system_ctrl_set_result>
        break;
    }
}
 80a1e7a:	b003      	add	sp, #12
 80a1e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1e80:	2000080c 	.word	0x2000080c

080a1e84 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1e84:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e86:	4c10      	ldr	r4, [pc, #64]	; (80a1ec8 <module_user_init_hook+0x44>)
 80a1e88:	4d10      	ldr	r5, [pc, #64]	; (80a1ecc <module_user_init_hook+0x48>)
 80a1e8a:	6823      	ldr	r3, [r4, #0]
 80a1e8c:	42ab      	cmp	r3, r5
 80a1e8e:	4b10      	ldr	r3, [pc, #64]	; (80a1ed0 <module_user_init_hook+0x4c>)
 80a1e90:	bf0c      	ite	eq
 80a1e92:	2201      	moveq	r2, #1
 80a1e94:	2200      	movne	r2, #0
 80a1e96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1e98:	d002      	beq.n	80a1ea0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1e9a:	f7ff ffbf 	bl	80a1e1c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1e9e:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a1ea0:	f7ff fbd0 	bl	80a1644 <HAL_RNG_GetRandomNumber>
 80a1ea4:	f000 fe6c 	bl	80a2b80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1ea8:	4b0a      	ldr	r3, [pc, #40]	; (80a1ed4 <module_user_init_hook+0x50>)
 80a1eaa:	b11b      	cbz	r3, 80a1eb4 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1eac:	f7ff fbca 	bl	80a1644 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a1eb0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1eb4:	2100      	movs	r1, #0
 80a1eb6:	4807      	ldr	r0, [pc, #28]	; (80a1ed4 <module_user_init_hook+0x50>)
 80a1eb8:	f7ff fcda 	bl	80a1870 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1ec0:	2100      	movs	r1, #0
 80a1ec2:	4805      	ldr	r0, [pc, #20]	; (80a1ed8 <module_user_init_hook+0x54>)
 80a1ec4:	f7ff bcc0 	b.w	80a1848 <system_ctrl_set_app_request_handler>
 80a1ec8:	40024000 	.word	0x40024000
 80a1ecc:	9a271c1e 	.word	0x9a271c1e
 80a1ed0:	20000810 	.word	0x20000810
 80a1ed4:	00000000 	.word	0x00000000
 80a1ed8:	080a1e4d 	.word	0x080a1e4d

080a1edc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1edc:	b510      	push	{r4, lr}
 80a1ede:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1ee0:	480f      	ldr	r0, [pc, #60]	; (80a1f20 <pinAvailable+0x44>)
 80a1ee2:	f7ff fdfb 	bl	80a1adc <_ZN8SPIClass9isEnabledEv>
 80a1ee6:	b128      	cbz	r0, 80a1ef4 <pinAvailable+0x18>
 80a1ee8:	f1a4 030d 	sub.w	r3, r4, #13
 80a1eec:	2b02      	cmp	r3, #2
 80a1eee:	d801      	bhi.n	80a1ef4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1ef0:	2000      	movs	r0, #0
 80a1ef2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1ef4:	f000 f840 	bl	80a1f78 <_Z19__fetch_global_Wirev>
 80a1ef8:	f7ff fd24 	bl	80a1944 <_ZN7TwoWire9isEnabledEv>
 80a1efc:	b108      	cbz	r0, 80a1f02 <pinAvailable+0x26>
 80a1efe:	2c01      	cmp	r4, #1
 80a1f00:	d9f6      	bls.n	80a1ef0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1f02:	f7ff fe5d 	bl	80a1bc0 <_Z22__fetch_global_Serial1v>
 80a1f06:	f7ff fe57 	bl	80a1bb8 <_ZN11USARTSerial9isEnabledEv>
 80a1f0a:	b118      	cbz	r0, 80a1f14 <pinAvailable+0x38>
 80a1f0c:	f1a4 0312 	sub.w	r3, r4, #18
 80a1f10:	2b01      	cmp	r3, #1
 80a1f12:	d9ed      	bls.n	80a1ef0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1f14:	2c17      	cmp	r4, #23
 80a1f16:	bf8c      	ite	hi
 80a1f18:	2000      	movhi	r0, #0
 80a1f1a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1f1c:	bd10      	pop	{r4, pc}
 80a1f1e:	bf00      	nop
 80a1f20:	20000848 	.word	0x20000848

080a1f24 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1f24:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1f26:	b538      	push	{r3, r4, r5, lr}
 80a1f28:	4604      	mov	r4, r0
 80a1f2a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1f2c:	d80a      	bhi.n	80a1f44 <pinMode+0x20>
 80a1f2e:	29ff      	cmp	r1, #255	; 0xff
 80a1f30:	d008      	beq.n	80a1f44 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f32:	f7ff ffd3 	bl	80a1edc <pinAvailable>
 80a1f36:	b128      	cbz	r0, 80a1f44 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1f38:	4629      	mov	r1, r5
 80a1f3a:	4620      	mov	r0, r4
}
 80a1f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1f40:	f7ff bba0 	b.w	80a1684 <HAL_Pin_Mode>
 80a1f44:	bd38      	pop	{r3, r4, r5, pc}

080a1f46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1f46:	b538      	push	{r3, r4, r5, lr}
 80a1f48:	4604      	mov	r4, r0
 80a1f4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1f4c:	f7ff fba2 	bl	80a1694 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1f50:	28ff      	cmp	r0, #255	; 0xff
 80a1f52:	d010      	beq.n	80a1f76 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1f54:	2806      	cmp	r0, #6
 80a1f56:	d804      	bhi.n	80a1f62 <digitalWrite+0x1c>
 80a1f58:	234d      	movs	r3, #77	; 0x4d
 80a1f5a:	fa23 f000 	lsr.w	r0, r3, r0
 80a1f5e:	07c3      	lsls	r3, r0, #31
 80a1f60:	d409      	bmi.n	80a1f76 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f62:	4620      	mov	r0, r4
 80a1f64:	f7ff ffba 	bl	80a1edc <pinAvailable>
 80a1f68:	b128      	cbz	r0, 80a1f76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1f6a:	4629      	mov	r1, r5
 80a1f6c:	4620      	mov	r0, r4
}
 80a1f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1f72:	f7ff bb97 	b.w	80a16a4 <HAL_GPIO_Write>
 80a1f76:	bd38      	pop	{r3, r4, r5, pc}

080a1f78 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1f78:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1f7a:	4d0b      	ldr	r5, [pc, #44]	; (80a1fa8 <_Z19__fetch_global_Wirev+0x30>)
 80a1f7c:	6829      	ldr	r1, [r5, #0]
 80a1f7e:	f011 0401 	ands.w	r4, r1, #1
 80a1f82:	d10f      	bne.n	80a1fa4 <_Z19__fetch_global_Wirev+0x2c>
 80a1f84:	4628      	mov	r0, r5
 80a1f86:	f7fe f88a 	bl	80a009e <__cxa_guard_acquire>
 80a1f8a:	b158      	cbz	r0, 80a1fa4 <_Z19__fetch_global_Wirev+0x2c>
 80a1f8c:	4621      	mov	r1, r4
 80a1f8e:	4807      	ldr	r0, [pc, #28]	; (80a1fac <_Z19__fetch_global_Wirev+0x34>)
 80a1f90:	f7ff fcc6 	bl	80a1920 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1f94:	4628      	mov	r0, r5
 80a1f96:	f7fe f887 	bl	80a00a8 <__cxa_guard_release>
 80a1f9a:	4a05      	ldr	r2, [pc, #20]	; (80a1fb0 <_Z19__fetch_global_Wirev+0x38>)
 80a1f9c:	4905      	ldr	r1, [pc, #20]	; (80a1fb4 <_Z19__fetch_global_Wirev+0x3c>)
 80a1f9e:	4803      	ldr	r0, [pc, #12]	; (80a1fac <_Z19__fetch_global_Wirev+0x34>)
 80a1fa0:	f000 f844 	bl	80a202c <__aeabi_atexit>
	return wire;
}
 80a1fa4:	4801      	ldr	r0, [pc, #4]	; (80a1fac <_Z19__fetch_global_Wirev+0x34>)
 80a1fa6:	bd38      	pop	{r3, r4, r5, pc}
 80a1fa8:	20000818 	.word	0x20000818
 80a1fac:	2000081c 	.word	0x2000081c
 80a1fb0:	20000368 	.word	0x20000368
 80a1fb4:	080a18c9 	.word	0x080a18c9

080a1fb8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1fb8:	b513      	push	{r0, r1, r4, lr}
 80a1fba:	4c08      	ldr	r4, [pc, #32]	; (80a1fdc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1fbc:	2300      	movs	r3, #0
 80a1fbe:	461a      	mov	r2, r3
 80a1fc0:	4619      	mov	r1, r3
 80a1fc2:	9300      	str	r3, [sp, #0]
 80a1fc4:	4620      	mov	r0, r4
 80a1fc6:	f7ff fcef 	bl	80a19a8 <_ZN9IPAddressC1Ehhhh>
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	4a04      	ldr	r2, [pc, #16]	; (80a1fe0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1fce:	4905      	ldr	r1, [pc, #20]	; (80a1fe4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1fd0:	b002      	add	sp, #8
 80a1fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1fd6:	f000 b829 	b.w	80a202c <__aeabi_atexit>
 80a1fda:	bf00      	nop
 80a1fdc:	20000830 	.word	0x20000830
 80a1fe0:	20000368 	.word	0x20000368
 80a1fe4:	080a194d 	.word	0x080a194d

080a1fe8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1fe8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1fea:	4c0c      	ldr	r4, [pc, #48]	; (80a201c <_GLOBAL__sub_I_SPI+0x34>)
 80a1fec:	4e0c      	ldr	r6, [pc, #48]	; (80a2020 <_GLOBAL__sub_I_SPI+0x38>)
 80a1fee:	4d0d      	ldr	r5, [pc, #52]	; (80a2024 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1ff0:	2100      	movs	r1, #0
 80a1ff2:	4620      	mov	r0, r4
 80a1ff4:	f7ff fd5e 	bl	80a1ab4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1ff8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1ffa:	4c0b      	ldr	r4, [pc, #44]	; (80a2028 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1ffc:	4632      	mov	r2, r6
 80a1ffe:	4629      	mov	r1, r5
 80a2000:	f000 f814 	bl	80a202c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2004:	2101      	movs	r1, #1
 80a2006:	4620      	mov	r0, r4
 80a2008:	f7ff fd54 	bl	80a1ab4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a200c:	4632      	mov	r2, r6
 80a200e:	4629      	mov	r1, r5
 80a2010:	4620      	mov	r0, r4
 80a2012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2016:	f000 b809 	b.w	80a202c <__aeabi_atexit>
 80a201a:	bf00      	nop
 80a201c:	20000848 	.word	0x20000848
 80a2020:	20000368 	.word	0x20000368
 80a2024:	080a1aa5 	.word	0x080a1aa5
 80a2028:	20000858 	.word	0x20000858

080a202c <__aeabi_atexit>:
 80a202c:	460b      	mov	r3, r1
 80a202e:	4601      	mov	r1, r0
 80a2030:	4618      	mov	r0, r3
 80a2032:	f000 bd83 	b.w	80a2b3c <__cxa_atexit>
	...

080a2038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2038:	4b24      	ldr	r3, [pc, #144]	; (80a20cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a203a:	681a      	ldr	r2, [r3, #0]
 80a203c:	07d0      	lsls	r0, r2, #31
 80a203e:	bf5c      	itt	pl
 80a2040:	2201      	movpl	r2, #1
 80a2042:	601a      	strpl	r2, [r3, #0]
 80a2044:	4b22      	ldr	r3, [pc, #136]	; (80a20d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2046:	681a      	ldr	r2, [r3, #0]
 80a2048:	07d1      	lsls	r1, r2, #31
 80a204a:	bf5c      	itt	pl
 80a204c:	2201      	movpl	r2, #1
 80a204e:	601a      	strpl	r2, [r3, #0]
 80a2050:	4b20      	ldr	r3, [pc, #128]	; (80a20d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2052:	681a      	ldr	r2, [r3, #0]
 80a2054:	07d2      	lsls	r2, r2, #31
 80a2056:	bf5c      	itt	pl
 80a2058:	2201      	movpl	r2, #1
 80a205a:	601a      	strpl	r2, [r3, #0]
 80a205c:	4b1e      	ldr	r3, [pc, #120]	; (80a20d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a205e:	681a      	ldr	r2, [r3, #0]
 80a2060:	07d0      	lsls	r0, r2, #31
 80a2062:	bf5c      	itt	pl
 80a2064:	2201      	movpl	r2, #1
 80a2066:	601a      	strpl	r2, [r3, #0]
 80a2068:	4b1c      	ldr	r3, [pc, #112]	; (80a20dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a206a:	681a      	ldr	r2, [r3, #0]
 80a206c:	07d1      	lsls	r1, r2, #31
 80a206e:	bf5c      	itt	pl
 80a2070:	2201      	movpl	r2, #1
 80a2072:	601a      	strpl	r2, [r3, #0]
 80a2074:	4b1a      	ldr	r3, [pc, #104]	; (80a20e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2076:	681a      	ldr	r2, [r3, #0]
 80a2078:	07d2      	lsls	r2, r2, #31
 80a207a:	bf5c      	itt	pl
 80a207c:	2201      	movpl	r2, #1
 80a207e:	601a      	strpl	r2, [r3, #0]
 80a2080:	4b18      	ldr	r3, [pc, #96]	; (80a20e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2082:	681a      	ldr	r2, [r3, #0]
 80a2084:	07d0      	lsls	r0, r2, #31
 80a2086:	bf5c      	itt	pl
 80a2088:	2201      	movpl	r2, #1
 80a208a:	601a      	strpl	r2, [r3, #0]
 80a208c:	4b16      	ldr	r3, [pc, #88]	; (80a20e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a208e:	681a      	ldr	r2, [r3, #0]
 80a2090:	07d1      	lsls	r1, r2, #31
 80a2092:	bf5c      	itt	pl
 80a2094:	2201      	movpl	r2, #1
 80a2096:	601a      	strpl	r2, [r3, #0]
 80a2098:	4b14      	ldr	r3, [pc, #80]	; (80a20ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a209a:	681a      	ldr	r2, [r3, #0]
 80a209c:	07d2      	lsls	r2, r2, #31
 80a209e:	bf5c      	itt	pl
 80a20a0:	2201      	movpl	r2, #1
 80a20a2:	601a      	strpl	r2, [r3, #0]
 80a20a4:	4b12      	ldr	r3, [pc, #72]	; (80a20f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a20a6:	681a      	ldr	r2, [r3, #0]
 80a20a8:	07d0      	lsls	r0, r2, #31
 80a20aa:	bf5c      	itt	pl
 80a20ac:	2201      	movpl	r2, #1
 80a20ae:	601a      	strpl	r2, [r3, #0]
 80a20b0:	4b10      	ldr	r3, [pc, #64]	; (80a20f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a20b2:	681a      	ldr	r2, [r3, #0]
 80a20b4:	07d1      	lsls	r1, r2, #31
 80a20b6:	bf5c      	itt	pl
 80a20b8:	2201      	movpl	r2, #1
 80a20ba:	601a      	strpl	r2, [r3, #0]
 80a20bc:	4b0e      	ldr	r3, [pc, #56]	; (80a20f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a20be:	681a      	ldr	r2, [r3, #0]
 80a20c0:	07d2      	lsls	r2, r2, #31
 80a20c2:	bf5c      	itt	pl
 80a20c4:	2201      	movpl	r2, #1
 80a20c6:	601a      	strpl	r2, [r3, #0]
 80a20c8:	4770      	bx	lr
 80a20ca:	bf00      	nop
 80a20cc:	20000894 	.word	0x20000894
 80a20d0:	20000890 	.word	0x20000890
 80a20d4:	2000088c 	.word	0x2000088c
 80a20d8:	20000888 	.word	0x20000888
 80a20dc:	20000884 	.word	0x20000884
 80a20e0:	20000880 	.word	0x20000880
 80a20e4:	2000087c 	.word	0x2000087c
 80a20e8:	20000878 	.word	0x20000878
 80a20ec:	20000874 	.word	0x20000874
 80a20f0:	20000870 	.word	0x20000870
 80a20f4:	2000086c 	.word	0x2000086c
 80a20f8:	20000868 	.word	0x20000868

080a20fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a20fc:	4b18      	ldr	r3, [pc, #96]	; (80a2160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a20fe:	681a      	ldr	r2, [r3, #0]
 80a2100:	07d1      	lsls	r1, r2, #31
 80a2102:	bf5c      	itt	pl
 80a2104:	2201      	movpl	r2, #1
 80a2106:	601a      	strpl	r2, [r3, #0]
 80a2108:	4b16      	ldr	r3, [pc, #88]	; (80a2164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a210a:	681a      	ldr	r2, [r3, #0]
 80a210c:	07d2      	lsls	r2, r2, #31
 80a210e:	bf5c      	itt	pl
 80a2110:	2201      	movpl	r2, #1
 80a2112:	601a      	strpl	r2, [r3, #0]
 80a2114:	4b14      	ldr	r3, [pc, #80]	; (80a2168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2116:	681a      	ldr	r2, [r3, #0]
 80a2118:	07d0      	lsls	r0, r2, #31
 80a211a:	bf5c      	itt	pl
 80a211c:	2201      	movpl	r2, #1
 80a211e:	601a      	strpl	r2, [r3, #0]
 80a2120:	4b12      	ldr	r3, [pc, #72]	; (80a216c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2122:	681a      	ldr	r2, [r3, #0]
 80a2124:	07d1      	lsls	r1, r2, #31
 80a2126:	bf5c      	itt	pl
 80a2128:	2201      	movpl	r2, #1
 80a212a:	601a      	strpl	r2, [r3, #0]
 80a212c:	4b10      	ldr	r3, [pc, #64]	; (80a2170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a212e:	681a      	ldr	r2, [r3, #0]
 80a2130:	07d2      	lsls	r2, r2, #31
 80a2132:	bf5c      	itt	pl
 80a2134:	2201      	movpl	r2, #1
 80a2136:	601a      	strpl	r2, [r3, #0]
 80a2138:	4b0e      	ldr	r3, [pc, #56]	; (80a2174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a213a:	681a      	ldr	r2, [r3, #0]
 80a213c:	07d0      	lsls	r0, r2, #31
 80a213e:	bf5c      	itt	pl
 80a2140:	2201      	movpl	r2, #1
 80a2142:	601a      	strpl	r2, [r3, #0]
 80a2144:	4b0c      	ldr	r3, [pc, #48]	; (80a2178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2146:	681a      	ldr	r2, [r3, #0]
 80a2148:	07d1      	lsls	r1, r2, #31
 80a214a:	bf5c      	itt	pl
 80a214c:	2201      	movpl	r2, #1
 80a214e:	601a      	strpl	r2, [r3, #0]
 80a2150:	4b0a      	ldr	r3, [pc, #40]	; (80a217c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2152:	681a      	ldr	r2, [r3, #0]
 80a2154:	07d2      	lsls	r2, r2, #31
 80a2156:	bf5c      	itt	pl
 80a2158:	2201      	movpl	r2, #1
 80a215a:	601a      	strpl	r2, [r3, #0]
 80a215c:	4770      	bx	lr
 80a215e:	bf00      	nop
 80a2160:	200008b4 	.word	0x200008b4
 80a2164:	200008b0 	.word	0x200008b0
 80a2168:	200008ac 	.word	0x200008ac
 80a216c:	200008a8 	.word	0x200008a8
 80a2170:	200008a4 	.word	0x200008a4
 80a2174:	200008a0 	.word	0x200008a0
 80a2178:	2000089c 	.word	0x2000089c
 80a217c:	20000898 	.word	0x20000898

080a2180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2180:	4b18      	ldr	r3, [pc, #96]	; (80a21e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2182:	681a      	ldr	r2, [r3, #0]
 80a2184:	07d1      	lsls	r1, r2, #31
 80a2186:	bf5c      	itt	pl
 80a2188:	2201      	movpl	r2, #1
 80a218a:	601a      	strpl	r2, [r3, #0]
 80a218c:	4b16      	ldr	r3, [pc, #88]	; (80a21e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a218e:	681a      	ldr	r2, [r3, #0]
 80a2190:	07d2      	lsls	r2, r2, #31
 80a2192:	bf5c      	itt	pl
 80a2194:	2201      	movpl	r2, #1
 80a2196:	601a      	strpl	r2, [r3, #0]
 80a2198:	4b14      	ldr	r3, [pc, #80]	; (80a21ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a219a:	681a      	ldr	r2, [r3, #0]
 80a219c:	07d0      	lsls	r0, r2, #31
 80a219e:	bf5c      	itt	pl
 80a21a0:	2201      	movpl	r2, #1
 80a21a2:	601a      	strpl	r2, [r3, #0]
 80a21a4:	4b12      	ldr	r3, [pc, #72]	; (80a21f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a21a6:	681a      	ldr	r2, [r3, #0]
 80a21a8:	07d1      	lsls	r1, r2, #31
 80a21aa:	bf5c      	itt	pl
 80a21ac:	2201      	movpl	r2, #1
 80a21ae:	601a      	strpl	r2, [r3, #0]
 80a21b0:	4b10      	ldr	r3, [pc, #64]	; (80a21f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a21b2:	681a      	ldr	r2, [r3, #0]
 80a21b4:	07d2      	lsls	r2, r2, #31
 80a21b6:	bf5c      	itt	pl
 80a21b8:	2201      	movpl	r2, #1
 80a21ba:	601a      	strpl	r2, [r3, #0]
 80a21bc:	4b0e      	ldr	r3, [pc, #56]	; (80a21f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a21be:	681a      	ldr	r2, [r3, #0]
 80a21c0:	07d0      	lsls	r0, r2, #31
 80a21c2:	bf5c      	itt	pl
 80a21c4:	2201      	movpl	r2, #1
 80a21c6:	601a      	strpl	r2, [r3, #0]
 80a21c8:	4b0c      	ldr	r3, [pc, #48]	; (80a21fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a21ca:	681a      	ldr	r2, [r3, #0]
 80a21cc:	07d1      	lsls	r1, r2, #31
 80a21ce:	bf5c      	itt	pl
 80a21d0:	2201      	movpl	r2, #1
 80a21d2:	601a      	strpl	r2, [r3, #0]
 80a21d4:	4b0a      	ldr	r3, [pc, #40]	; (80a2200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a21d6:	681a      	ldr	r2, [r3, #0]
 80a21d8:	07d2      	lsls	r2, r2, #31
 80a21da:	bf5c      	itt	pl
 80a21dc:	2201      	movpl	r2, #1
 80a21de:	601a      	strpl	r2, [r3, #0]
 80a21e0:	4770      	bx	lr
 80a21e2:	bf00      	nop
 80a21e4:	200008d4 	.word	0x200008d4
 80a21e8:	200008d0 	.word	0x200008d0
 80a21ec:	200008cc 	.word	0x200008cc
 80a21f0:	200008c8 	.word	0x200008c8
 80a21f4:	200008c4 	.word	0x200008c4
 80a21f8:	200008c0 	.word	0x200008c0
 80a21fc:	200008bc 	.word	0x200008bc
 80a2200:	200008b8 	.word	0x200008b8

080a2204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2204:	4b24      	ldr	r3, [pc, #144]	; (80a2298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2206:	681a      	ldr	r2, [r3, #0]
 80a2208:	07d0      	lsls	r0, r2, #31
 80a220a:	bf5c      	itt	pl
 80a220c:	2201      	movpl	r2, #1
 80a220e:	601a      	strpl	r2, [r3, #0]
 80a2210:	4b22      	ldr	r3, [pc, #136]	; (80a229c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2212:	681a      	ldr	r2, [r3, #0]
 80a2214:	07d1      	lsls	r1, r2, #31
 80a2216:	bf5c      	itt	pl
 80a2218:	2201      	movpl	r2, #1
 80a221a:	601a      	strpl	r2, [r3, #0]
 80a221c:	4b20      	ldr	r3, [pc, #128]	; (80a22a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a221e:	681a      	ldr	r2, [r3, #0]
 80a2220:	07d2      	lsls	r2, r2, #31
 80a2222:	bf5c      	itt	pl
 80a2224:	2201      	movpl	r2, #1
 80a2226:	601a      	strpl	r2, [r3, #0]
 80a2228:	4b1e      	ldr	r3, [pc, #120]	; (80a22a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a222a:	681a      	ldr	r2, [r3, #0]
 80a222c:	07d0      	lsls	r0, r2, #31
 80a222e:	bf5c      	itt	pl
 80a2230:	2201      	movpl	r2, #1
 80a2232:	601a      	strpl	r2, [r3, #0]
 80a2234:	4b1c      	ldr	r3, [pc, #112]	; (80a22a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2236:	681a      	ldr	r2, [r3, #0]
 80a2238:	07d1      	lsls	r1, r2, #31
 80a223a:	bf5c      	itt	pl
 80a223c:	2201      	movpl	r2, #1
 80a223e:	601a      	strpl	r2, [r3, #0]
 80a2240:	4b1a      	ldr	r3, [pc, #104]	; (80a22ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2242:	681a      	ldr	r2, [r3, #0]
 80a2244:	07d2      	lsls	r2, r2, #31
 80a2246:	bf5c      	itt	pl
 80a2248:	2201      	movpl	r2, #1
 80a224a:	601a      	strpl	r2, [r3, #0]
 80a224c:	4b18      	ldr	r3, [pc, #96]	; (80a22b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a224e:	681a      	ldr	r2, [r3, #0]
 80a2250:	07d0      	lsls	r0, r2, #31
 80a2252:	bf5c      	itt	pl
 80a2254:	2201      	movpl	r2, #1
 80a2256:	601a      	strpl	r2, [r3, #0]
 80a2258:	4b16      	ldr	r3, [pc, #88]	; (80a22b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a225a:	681a      	ldr	r2, [r3, #0]
 80a225c:	07d1      	lsls	r1, r2, #31
 80a225e:	bf5c      	itt	pl
 80a2260:	2201      	movpl	r2, #1
 80a2262:	601a      	strpl	r2, [r3, #0]
 80a2264:	4b14      	ldr	r3, [pc, #80]	; (80a22b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2266:	681a      	ldr	r2, [r3, #0]
 80a2268:	07d2      	lsls	r2, r2, #31
 80a226a:	bf5c      	itt	pl
 80a226c:	2201      	movpl	r2, #1
 80a226e:	601a      	strpl	r2, [r3, #0]
 80a2270:	4b12      	ldr	r3, [pc, #72]	; (80a22bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2272:	681a      	ldr	r2, [r3, #0]
 80a2274:	07d0      	lsls	r0, r2, #31
 80a2276:	bf5c      	itt	pl
 80a2278:	2201      	movpl	r2, #1
 80a227a:	601a      	strpl	r2, [r3, #0]
 80a227c:	4b10      	ldr	r3, [pc, #64]	; (80a22c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a227e:	681a      	ldr	r2, [r3, #0]
 80a2280:	07d1      	lsls	r1, r2, #31
 80a2282:	bf5c      	itt	pl
 80a2284:	2201      	movpl	r2, #1
 80a2286:	601a      	strpl	r2, [r3, #0]
 80a2288:	4b0e      	ldr	r3, [pc, #56]	; (80a22c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a228a:	681a      	ldr	r2, [r3, #0]
 80a228c:	07d2      	lsls	r2, r2, #31
 80a228e:	bf5c      	itt	pl
 80a2290:	2201      	movpl	r2, #1
 80a2292:	601a      	strpl	r2, [r3, #0]
 80a2294:	4770      	bx	lr
 80a2296:	bf00      	nop
 80a2298:	20000904 	.word	0x20000904
 80a229c:	20000900 	.word	0x20000900
 80a22a0:	200008fc 	.word	0x200008fc
 80a22a4:	200008f8 	.word	0x200008f8
 80a22a8:	200008f4 	.word	0x200008f4
 80a22ac:	200008f0 	.word	0x200008f0
 80a22b0:	200008ec 	.word	0x200008ec
 80a22b4:	200008e8 	.word	0x200008e8
 80a22b8:	200008e4 	.word	0x200008e4
 80a22bc:	200008e0 	.word	0x200008e0
 80a22c0:	200008dc 	.word	0x200008dc
 80a22c4:	200008d8 	.word	0x200008d8

080a22c8 <__aeabi_drsub>:
 80a22c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a22cc:	e002      	b.n	80a22d4 <__adddf3>
 80a22ce:	bf00      	nop

080a22d0 <__aeabi_dsub>:
 80a22d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a22d4 <__adddf3>:
 80a22d4:	b530      	push	{r4, r5, lr}
 80a22d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a22da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a22de:	ea94 0f05 	teq	r4, r5
 80a22e2:	bf08      	it	eq
 80a22e4:	ea90 0f02 	teqeq	r0, r2
 80a22e8:	bf1f      	itttt	ne
 80a22ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a22ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a22f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a22f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a22fa:	f000 80e2 	beq.w	80a24c2 <__adddf3+0x1ee>
 80a22fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2306:	bfb8      	it	lt
 80a2308:	426d      	neglt	r5, r5
 80a230a:	dd0c      	ble.n	80a2326 <__adddf3+0x52>
 80a230c:	442c      	add	r4, r5
 80a230e:	ea80 0202 	eor.w	r2, r0, r2
 80a2312:	ea81 0303 	eor.w	r3, r1, r3
 80a2316:	ea82 0000 	eor.w	r0, r2, r0
 80a231a:	ea83 0101 	eor.w	r1, r3, r1
 80a231e:	ea80 0202 	eor.w	r2, r0, r2
 80a2322:	ea81 0303 	eor.w	r3, r1, r3
 80a2326:	2d36      	cmp	r5, #54	; 0x36
 80a2328:	bf88      	it	hi
 80a232a:	bd30      	pophi	{r4, r5, pc}
 80a232c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a233c:	d002      	beq.n	80a2344 <__adddf3+0x70>
 80a233e:	4240      	negs	r0, r0
 80a2340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a234c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2350:	d002      	beq.n	80a2358 <__adddf3+0x84>
 80a2352:	4252      	negs	r2, r2
 80a2354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2358:	ea94 0f05 	teq	r4, r5
 80a235c:	f000 80a7 	beq.w	80a24ae <__adddf3+0x1da>
 80a2360:	f1a4 0401 	sub.w	r4, r4, #1
 80a2364:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2368:	db0d      	blt.n	80a2386 <__adddf3+0xb2>
 80a236a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a236e:	fa22 f205 	lsr.w	r2, r2, r5
 80a2372:	1880      	adds	r0, r0, r2
 80a2374:	f141 0100 	adc.w	r1, r1, #0
 80a2378:	fa03 f20e 	lsl.w	r2, r3, lr
 80a237c:	1880      	adds	r0, r0, r2
 80a237e:	fa43 f305 	asr.w	r3, r3, r5
 80a2382:	4159      	adcs	r1, r3
 80a2384:	e00e      	b.n	80a23a4 <__adddf3+0xd0>
 80a2386:	f1a5 0520 	sub.w	r5, r5, #32
 80a238a:	f10e 0e20 	add.w	lr, lr, #32
 80a238e:	2a01      	cmp	r2, #1
 80a2390:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2394:	bf28      	it	cs
 80a2396:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a239a:	fa43 f305 	asr.w	r3, r3, r5
 80a239e:	18c0      	adds	r0, r0, r3
 80a23a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a23a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a23a8:	d507      	bpl.n	80a23ba <__adddf3+0xe6>
 80a23aa:	f04f 0e00 	mov.w	lr, #0
 80a23ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80a23b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a23b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a23ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a23be:	d31b      	bcc.n	80a23f8 <__adddf3+0x124>
 80a23c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a23c4:	d30c      	bcc.n	80a23e0 <__adddf3+0x10c>
 80a23c6:	0849      	lsrs	r1, r1, #1
 80a23c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a23cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a23d0:	f104 0401 	add.w	r4, r4, #1
 80a23d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a23d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a23dc:	f080 809a 	bcs.w	80a2514 <__adddf3+0x240>
 80a23e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a23e4:	bf08      	it	eq
 80a23e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a23ea:	f150 0000 	adcs.w	r0, r0, #0
 80a23ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a23f2:	ea41 0105 	orr.w	r1, r1, r5
 80a23f6:	bd30      	pop	{r4, r5, pc}
 80a23f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a23fc:	4140      	adcs	r0, r0
 80a23fe:	eb41 0101 	adc.w	r1, r1, r1
 80a2402:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2406:	f1a4 0401 	sub.w	r4, r4, #1
 80a240a:	d1e9      	bne.n	80a23e0 <__adddf3+0x10c>
 80a240c:	f091 0f00 	teq	r1, #0
 80a2410:	bf04      	itt	eq
 80a2412:	4601      	moveq	r1, r0
 80a2414:	2000      	moveq	r0, #0
 80a2416:	fab1 f381 	clz	r3, r1
 80a241a:	bf08      	it	eq
 80a241c:	3320      	addeq	r3, #32
 80a241e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2422:	f1b3 0220 	subs.w	r2, r3, #32
 80a2426:	da0c      	bge.n	80a2442 <__adddf3+0x16e>
 80a2428:	320c      	adds	r2, #12
 80a242a:	dd08      	ble.n	80a243e <__adddf3+0x16a>
 80a242c:	f102 0c14 	add.w	ip, r2, #20
 80a2430:	f1c2 020c 	rsb	r2, r2, #12
 80a2434:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2438:	fa21 f102 	lsr.w	r1, r1, r2
 80a243c:	e00c      	b.n	80a2458 <__adddf3+0x184>
 80a243e:	f102 0214 	add.w	r2, r2, #20
 80a2442:	bfd8      	it	le
 80a2444:	f1c2 0c20 	rsble	ip, r2, #32
 80a2448:	fa01 f102 	lsl.w	r1, r1, r2
 80a244c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2450:	bfdc      	itt	le
 80a2452:	ea41 010c 	orrle.w	r1, r1, ip
 80a2456:	4090      	lslle	r0, r2
 80a2458:	1ae4      	subs	r4, r4, r3
 80a245a:	bfa2      	ittt	ge
 80a245c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2460:	4329      	orrge	r1, r5
 80a2462:	bd30      	popge	{r4, r5, pc}
 80a2464:	ea6f 0404 	mvn.w	r4, r4
 80a2468:	3c1f      	subs	r4, #31
 80a246a:	da1c      	bge.n	80a24a6 <__adddf3+0x1d2>
 80a246c:	340c      	adds	r4, #12
 80a246e:	dc0e      	bgt.n	80a248e <__adddf3+0x1ba>
 80a2470:	f104 0414 	add.w	r4, r4, #20
 80a2474:	f1c4 0220 	rsb	r2, r4, #32
 80a2478:	fa20 f004 	lsr.w	r0, r0, r4
 80a247c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2480:	ea40 0003 	orr.w	r0, r0, r3
 80a2484:	fa21 f304 	lsr.w	r3, r1, r4
 80a2488:	ea45 0103 	orr.w	r1, r5, r3
 80a248c:	bd30      	pop	{r4, r5, pc}
 80a248e:	f1c4 040c 	rsb	r4, r4, #12
 80a2492:	f1c4 0220 	rsb	r2, r4, #32
 80a2496:	fa20 f002 	lsr.w	r0, r0, r2
 80a249a:	fa01 f304 	lsl.w	r3, r1, r4
 80a249e:	ea40 0003 	orr.w	r0, r0, r3
 80a24a2:	4629      	mov	r1, r5
 80a24a4:	bd30      	pop	{r4, r5, pc}
 80a24a6:	fa21 f004 	lsr.w	r0, r1, r4
 80a24aa:	4629      	mov	r1, r5
 80a24ac:	bd30      	pop	{r4, r5, pc}
 80a24ae:	f094 0f00 	teq	r4, #0
 80a24b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a24b6:	bf06      	itte	eq
 80a24b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a24bc:	3401      	addeq	r4, #1
 80a24be:	3d01      	subne	r5, #1
 80a24c0:	e74e      	b.n	80a2360 <__adddf3+0x8c>
 80a24c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a24c6:	bf18      	it	ne
 80a24c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a24cc:	d029      	beq.n	80a2522 <__adddf3+0x24e>
 80a24ce:	ea94 0f05 	teq	r4, r5
 80a24d2:	bf08      	it	eq
 80a24d4:	ea90 0f02 	teqeq	r0, r2
 80a24d8:	d005      	beq.n	80a24e6 <__adddf3+0x212>
 80a24da:	ea54 0c00 	orrs.w	ip, r4, r0
 80a24de:	bf04      	itt	eq
 80a24e0:	4619      	moveq	r1, r3
 80a24e2:	4610      	moveq	r0, r2
 80a24e4:	bd30      	pop	{r4, r5, pc}
 80a24e6:	ea91 0f03 	teq	r1, r3
 80a24ea:	bf1e      	ittt	ne
 80a24ec:	2100      	movne	r1, #0
 80a24ee:	2000      	movne	r0, #0
 80a24f0:	bd30      	popne	{r4, r5, pc}
 80a24f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a24f6:	d105      	bne.n	80a2504 <__adddf3+0x230>
 80a24f8:	0040      	lsls	r0, r0, #1
 80a24fa:	4149      	adcs	r1, r1
 80a24fc:	bf28      	it	cs
 80a24fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2502:	bd30      	pop	{r4, r5, pc}
 80a2504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2508:	bf3c      	itt	cc
 80a250a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a250e:	bd30      	popcc	{r4, r5, pc}
 80a2510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a251c:	f04f 0000 	mov.w	r0, #0
 80a2520:	bd30      	pop	{r4, r5, pc}
 80a2522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2526:	bf1a      	itte	ne
 80a2528:	4619      	movne	r1, r3
 80a252a:	4610      	movne	r0, r2
 80a252c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2530:	bf1c      	itt	ne
 80a2532:	460b      	movne	r3, r1
 80a2534:	4602      	movne	r2, r0
 80a2536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a253a:	bf06      	itte	eq
 80a253c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2540:	ea91 0f03 	teqeq	r1, r3
 80a2544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2548:	bd30      	pop	{r4, r5, pc}
 80a254a:	bf00      	nop

080a254c <__aeabi_ui2d>:
 80a254c:	f090 0f00 	teq	r0, #0
 80a2550:	bf04      	itt	eq
 80a2552:	2100      	moveq	r1, #0
 80a2554:	4770      	bxeq	lr
 80a2556:	b530      	push	{r4, r5, lr}
 80a2558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a255c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2560:	f04f 0500 	mov.w	r5, #0
 80a2564:	f04f 0100 	mov.w	r1, #0
 80a2568:	e750      	b.n	80a240c <__adddf3+0x138>
 80a256a:	bf00      	nop

080a256c <__aeabi_i2d>:
 80a256c:	f090 0f00 	teq	r0, #0
 80a2570:	bf04      	itt	eq
 80a2572:	2100      	moveq	r1, #0
 80a2574:	4770      	bxeq	lr
 80a2576:	b530      	push	{r4, r5, lr}
 80a2578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a257c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2584:	bf48      	it	mi
 80a2586:	4240      	negmi	r0, r0
 80a2588:	f04f 0100 	mov.w	r1, #0
 80a258c:	e73e      	b.n	80a240c <__adddf3+0x138>
 80a258e:	bf00      	nop

080a2590 <__aeabi_f2d>:
 80a2590:	0042      	lsls	r2, r0, #1
 80a2592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2596:	ea4f 0131 	mov.w	r1, r1, rrx
 80a259a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a259e:	bf1f      	itttt	ne
 80a25a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a25a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a25a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a25ac:	4770      	bxne	lr
 80a25ae:	f092 0f00 	teq	r2, #0
 80a25b2:	bf14      	ite	ne
 80a25b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a25b8:	4770      	bxeq	lr
 80a25ba:	b530      	push	{r4, r5, lr}
 80a25bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a25c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a25c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a25c8:	e720      	b.n	80a240c <__adddf3+0x138>
 80a25ca:	bf00      	nop

080a25cc <__aeabi_ul2d>:
 80a25cc:	ea50 0201 	orrs.w	r2, r0, r1
 80a25d0:	bf08      	it	eq
 80a25d2:	4770      	bxeq	lr
 80a25d4:	b530      	push	{r4, r5, lr}
 80a25d6:	f04f 0500 	mov.w	r5, #0
 80a25da:	e00a      	b.n	80a25f2 <__aeabi_l2d+0x16>

080a25dc <__aeabi_l2d>:
 80a25dc:	ea50 0201 	orrs.w	r2, r0, r1
 80a25e0:	bf08      	it	eq
 80a25e2:	4770      	bxeq	lr
 80a25e4:	b530      	push	{r4, r5, lr}
 80a25e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a25ea:	d502      	bpl.n	80a25f2 <__aeabi_l2d+0x16>
 80a25ec:	4240      	negs	r0, r0
 80a25ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a25f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a25f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a25fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a25fe:	f43f aedc 	beq.w	80a23ba <__adddf3+0xe6>
 80a2602:	f04f 0203 	mov.w	r2, #3
 80a2606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a260a:	bf18      	it	ne
 80a260c:	3203      	addne	r2, #3
 80a260e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2612:	bf18      	it	ne
 80a2614:	3203      	addne	r2, #3
 80a2616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a261a:	f1c2 0320 	rsb	r3, r2, #32
 80a261e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2622:	fa20 f002 	lsr.w	r0, r0, r2
 80a2626:	fa01 fe03 	lsl.w	lr, r1, r3
 80a262a:	ea40 000e 	orr.w	r0, r0, lr
 80a262e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2632:	4414      	add	r4, r2
 80a2634:	e6c1      	b.n	80a23ba <__adddf3+0xe6>
 80a2636:	bf00      	nop

080a2638 <__aeabi_dmul>:
 80a2638:	b570      	push	{r4, r5, r6, lr}
 80a263a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a263e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2646:	bf1d      	ittte	ne
 80a2648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a264c:	ea94 0f0c 	teqne	r4, ip
 80a2650:	ea95 0f0c 	teqne	r5, ip
 80a2654:	f000 f8de 	bleq	80a2814 <__aeabi_dmul+0x1dc>
 80a2658:	442c      	add	r4, r5
 80a265a:	ea81 0603 	eor.w	r6, r1, r3
 80a265e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a266a:	bf18      	it	ne
 80a266c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2678:	d038      	beq.n	80a26ec <__aeabi_dmul+0xb4>
 80a267a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a267e:	f04f 0500 	mov.w	r5, #0
 80a2682:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a268a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a268e:	f04f 0600 	mov.w	r6, #0
 80a2692:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2696:	f09c 0f00 	teq	ip, #0
 80a269a:	bf18      	it	ne
 80a269c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a26a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a26a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a26a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a26ac:	d204      	bcs.n	80a26b8 <__aeabi_dmul+0x80>
 80a26ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a26b2:	416d      	adcs	r5, r5
 80a26b4:	eb46 0606 	adc.w	r6, r6, r6
 80a26b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a26bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a26c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a26c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a26c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a26cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a26d0:	bf88      	it	hi
 80a26d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a26d6:	d81e      	bhi.n	80a2716 <__aeabi_dmul+0xde>
 80a26d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a26dc:	bf08      	it	eq
 80a26de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a26e2:	f150 0000 	adcs.w	r0, r0, #0
 80a26e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a26ea:	bd70      	pop	{r4, r5, r6, pc}
 80a26ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a26f0:	ea46 0101 	orr.w	r1, r6, r1
 80a26f4:	ea40 0002 	orr.w	r0, r0, r2
 80a26f8:	ea81 0103 	eor.w	r1, r1, r3
 80a26fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2700:	bfc2      	ittt	gt
 80a2702:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a270a:	bd70      	popgt	{r4, r5, r6, pc}
 80a270c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2710:	f04f 0e00 	mov.w	lr, #0
 80a2714:	3c01      	subs	r4, #1
 80a2716:	f300 80ab 	bgt.w	80a2870 <__aeabi_dmul+0x238>
 80a271a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a271e:	bfde      	ittt	le
 80a2720:	2000      	movle	r0, #0
 80a2722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2726:	bd70      	pople	{r4, r5, r6, pc}
 80a2728:	f1c4 0400 	rsb	r4, r4, #0
 80a272c:	3c20      	subs	r4, #32
 80a272e:	da35      	bge.n	80a279c <__aeabi_dmul+0x164>
 80a2730:	340c      	adds	r4, #12
 80a2732:	dc1b      	bgt.n	80a276c <__aeabi_dmul+0x134>
 80a2734:	f104 0414 	add.w	r4, r4, #20
 80a2738:	f1c4 0520 	rsb	r5, r4, #32
 80a273c:	fa00 f305 	lsl.w	r3, r0, r5
 80a2740:	fa20 f004 	lsr.w	r0, r0, r4
 80a2744:	fa01 f205 	lsl.w	r2, r1, r5
 80a2748:	ea40 0002 	orr.w	r0, r0, r2
 80a274c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2758:	fa21 f604 	lsr.w	r6, r1, r4
 80a275c:	eb42 0106 	adc.w	r1, r2, r6
 80a2760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2764:	bf08      	it	eq
 80a2766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a276a:	bd70      	pop	{r4, r5, r6, pc}
 80a276c:	f1c4 040c 	rsb	r4, r4, #12
 80a2770:	f1c4 0520 	rsb	r5, r4, #32
 80a2774:	fa00 f304 	lsl.w	r3, r0, r4
 80a2778:	fa20 f005 	lsr.w	r0, r0, r5
 80a277c:	fa01 f204 	lsl.w	r2, r1, r4
 80a2780:	ea40 0002 	orr.w	r0, r0, r2
 80a2784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a278c:	f141 0100 	adc.w	r1, r1, #0
 80a2790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2794:	bf08      	it	eq
 80a2796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a279a:	bd70      	pop	{r4, r5, r6, pc}
 80a279c:	f1c4 0520 	rsb	r5, r4, #32
 80a27a0:	fa00 f205 	lsl.w	r2, r0, r5
 80a27a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a27a8:	fa20 f304 	lsr.w	r3, r0, r4
 80a27ac:	fa01 f205 	lsl.w	r2, r1, r5
 80a27b0:	ea43 0302 	orr.w	r3, r3, r2
 80a27b4:	fa21 f004 	lsr.w	r0, r1, r4
 80a27b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a27bc:	fa21 f204 	lsr.w	r2, r1, r4
 80a27c0:	ea20 0002 	bic.w	r0, r0, r2
 80a27c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a27c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a27cc:	bf08      	it	eq
 80a27ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a27d2:	bd70      	pop	{r4, r5, r6, pc}
 80a27d4:	f094 0f00 	teq	r4, #0
 80a27d8:	d10f      	bne.n	80a27fa <__aeabi_dmul+0x1c2>
 80a27da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a27de:	0040      	lsls	r0, r0, #1
 80a27e0:	eb41 0101 	adc.w	r1, r1, r1
 80a27e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a27e8:	bf08      	it	eq
 80a27ea:	3c01      	subeq	r4, #1
 80a27ec:	d0f7      	beq.n	80a27de <__aeabi_dmul+0x1a6>
 80a27ee:	ea41 0106 	orr.w	r1, r1, r6
 80a27f2:	f095 0f00 	teq	r5, #0
 80a27f6:	bf18      	it	ne
 80a27f8:	4770      	bxne	lr
 80a27fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a27fe:	0052      	lsls	r2, r2, #1
 80a2800:	eb43 0303 	adc.w	r3, r3, r3
 80a2804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2808:	bf08      	it	eq
 80a280a:	3d01      	subeq	r5, #1
 80a280c:	d0f7      	beq.n	80a27fe <__aeabi_dmul+0x1c6>
 80a280e:	ea43 0306 	orr.w	r3, r3, r6
 80a2812:	4770      	bx	lr
 80a2814:	ea94 0f0c 	teq	r4, ip
 80a2818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a281c:	bf18      	it	ne
 80a281e:	ea95 0f0c 	teqne	r5, ip
 80a2822:	d00c      	beq.n	80a283e <__aeabi_dmul+0x206>
 80a2824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2828:	bf18      	it	ne
 80a282a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a282e:	d1d1      	bne.n	80a27d4 <__aeabi_dmul+0x19c>
 80a2830:	ea81 0103 	eor.w	r1, r1, r3
 80a2834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2838:	f04f 0000 	mov.w	r0, #0
 80a283c:	bd70      	pop	{r4, r5, r6, pc}
 80a283e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2842:	bf06      	itte	eq
 80a2844:	4610      	moveq	r0, r2
 80a2846:	4619      	moveq	r1, r3
 80a2848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a284c:	d019      	beq.n	80a2882 <__aeabi_dmul+0x24a>
 80a284e:	ea94 0f0c 	teq	r4, ip
 80a2852:	d102      	bne.n	80a285a <__aeabi_dmul+0x222>
 80a2854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2858:	d113      	bne.n	80a2882 <__aeabi_dmul+0x24a>
 80a285a:	ea95 0f0c 	teq	r5, ip
 80a285e:	d105      	bne.n	80a286c <__aeabi_dmul+0x234>
 80a2860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2864:	bf1c      	itt	ne
 80a2866:	4610      	movne	r0, r2
 80a2868:	4619      	movne	r1, r3
 80a286a:	d10a      	bne.n	80a2882 <__aeabi_dmul+0x24a>
 80a286c:	ea81 0103 	eor.w	r1, r1, r3
 80a2870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a287c:	f04f 0000 	mov.w	r0, #0
 80a2880:	bd70      	pop	{r4, r5, r6, pc}
 80a2882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a288a:	bd70      	pop	{r4, r5, r6, pc}

080a288c <__aeabi_ddiv>:
 80a288c:	b570      	push	{r4, r5, r6, lr}
 80a288e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a289a:	bf1d      	ittte	ne
 80a289c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a28a0:	ea94 0f0c 	teqne	r4, ip
 80a28a4:	ea95 0f0c 	teqne	r5, ip
 80a28a8:	f000 f8a7 	bleq	80a29fa <__aeabi_ddiv+0x16e>
 80a28ac:	eba4 0405 	sub.w	r4, r4, r5
 80a28b0:	ea81 0e03 	eor.w	lr, r1, r3
 80a28b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a28b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a28bc:	f000 8088 	beq.w	80a29d0 <__aeabi_ddiv+0x144>
 80a28c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a28c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a28c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a28cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a28d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a28d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a28d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a28dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a28e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a28e4:	429d      	cmp	r5, r3
 80a28e6:	bf08      	it	eq
 80a28e8:	4296      	cmpeq	r6, r2
 80a28ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a28ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a28f2:	d202      	bcs.n	80a28fa <__aeabi_ddiv+0x6e>
 80a28f4:	085b      	lsrs	r3, r3, #1
 80a28f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a28fa:	1ab6      	subs	r6, r6, r2
 80a28fc:	eb65 0503 	sbc.w	r5, r5, r3
 80a2900:	085b      	lsrs	r3, r3, #1
 80a2902:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a290a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a290e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2912:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2916:	bf22      	ittt	cs
 80a2918:	1ab6      	subcs	r6, r6, r2
 80a291a:	4675      	movcs	r5, lr
 80a291c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2920:	085b      	lsrs	r3, r3, #1
 80a2922:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2926:	ebb6 0e02 	subs.w	lr, r6, r2
 80a292a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a292e:	bf22      	ittt	cs
 80a2930:	1ab6      	subcs	r6, r6, r2
 80a2932:	4675      	movcs	r5, lr
 80a2934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2938:	085b      	lsrs	r3, r3, #1
 80a293a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a293e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2942:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2946:	bf22      	ittt	cs
 80a2948:	1ab6      	subcs	r6, r6, r2
 80a294a:	4675      	movcs	r5, lr
 80a294c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2950:	085b      	lsrs	r3, r3, #1
 80a2952:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2956:	ebb6 0e02 	subs.w	lr, r6, r2
 80a295a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a295e:	bf22      	ittt	cs
 80a2960:	1ab6      	subcs	r6, r6, r2
 80a2962:	4675      	movcs	r5, lr
 80a2964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2968:	ea55 0e06 	orrs.w	lr, r5, r6
 80a296c:	d018      	beq.n	80a29a0 <__aeabi_ddiv+0x114>
 80a296e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a297a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a297e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a298a:	d1c0      	bne.n	80a290e <__aeabi_ddiv+0x82>
 80a298c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2990:	d10b      	bne.n	80a29aa <__aeabi_ddiv+0x11e>
 80a2992:	ea41 0100 	orr.w	r1, r1, r0
 80a2996:	f04f 0000 	mov.w	r0, #0
 80a299a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a299e:	e7b6      	b.n	80a290e <__aeabi_ddiv+0x82>
 80a29a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a29a4:	bf04      	itt	eq
 80a29a6:	4301      	orreq	r1, r0
 80a29a8:	2000      	moveq	r0, #0
 80a29aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a29ae:	bf88      	it	hi
 80a29b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a29b4:	f63f aeaf 	bhi.w	80a2716 <__aeabi_dmul+0xde>
 80a29b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a29bc:	bf04      	itt	eq
 80a29be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a29c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a29c6:	f150 0000 	adcs.w	r0, r0, #0
 80a29ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a29ce:	bd70      	pop	{r4, r5, r6, pc}
 80a29d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a29d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a29d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a29dc:	bfc2      	ittt	gt
 80a29de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a29e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a29e6:	bd70      	popgt	{r4, r5, r6, pc}
 80a29e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a29ec:	f04f 0e00 	mov.w	lr, #0
 80a29f0:	3c01      	subs	r4, #1
 80a29f2:	e690      	b.n	80a2716 <__aeabi_dmul+0xde>
 80a29f4:	ea45 0e06 	orr.w	lr, r5, r6
 80a29f8:	e68d      	b.n	80a2716 <__aeabi_dmul+0xde>
 80a29fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a29fe:	ea94 0f0c 	teq	r4, ip
 80a2a02:	bf08      	it	eq
 80a2a04:	ea95 0f0c 	teqeq	r5, ip
 80a2a08:	f43f af3b 	beq.w	80a2882 <__aeabi_dmul+0x24a>
 80a2a0c:	ea94 0f0c 	teq	r4, ip
 80a2a10:	d10a      	bne.n	80a2a28 <__aeabi_ddiv+0x19c>
 80a2a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a16:	f47f af34 	bne.w	80a2882 <__aeabi_dmul+0x24a>
 80a2a1a:	ea95 0f0c 	teq	r5, ip
 80a2a1e:	f47f af25 	bne.w	80a286c <__aeabi_dmul+0x234>
 80a2a22:	4610      	mov	r0, r2
 80a2a24:	4619      	mov	r1, r3
 80a2a26:	e72c      	b.n	80a2882 <__aeabi_dmul+0x24a>
 80a2a28:	ea95 0f0c 	teq	r5, ip
 80a2a2c:	d106      	bne.n	80a2a3c <__aeabi_ddiv+0x1b0>
 80a2a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2a32:	f43f aefd 	beq.w	80a2830 <__aeabi_dmul+0x1f8>
 80a2a36:	4610      	mov	r0, r2
 80a2a38:	4619      	mov	r1, r3
 80a2a3a:	e722      	b.n	80a2882 <__aeabi_dmul+0x24a>
 80a2a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2a40:	bf18      	it	ne
 80a2a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2a46:	f47f aec5 	bne.w	80a27d4 <__aeabi_dmul+0x19c>
 80a2a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2a4e:	f47f af0d 	bne.w	80a286c <__aeabi_dmul+0x234>
 80a2a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2a56:	f47f aeeb 	bne.w	80a2830 <__aeabi_dmul+0x1f8>
 80a2a5a:	e712      	b.n	80a2882 <__aeabi_dmul+0x24a>

080a2a5c <__aeabi_d2f>:
 80a2a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2a64:	bf24      	itt	cs
 80a2a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a2a6e:	d90d      	bls.n	80a2a8c <__aeabi_d2f+0x30>
 80a2a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2a84:	bf08      	it	eq
 80a2a86:	f020 0001 	biceq.w	r0, r0, #1
 80a2a8a:	4770      	bx	lr
 80a2a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2a90:	d121      	bne.n	80a2ad6 <__aeabi_d2f+0x7a>
 80a2a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2a96:	bfbc      	itt	lt
 80a2a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2a9c:	4770      	bxlt	lr
 80a2a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2aa6:	f1c2 0218 	rsb	r2, r2, #24
 80a2aaa:	f1c2 0c20 	rsb	ip, r2, #32
 80a2aae:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2ab2:	fa20 f002 	lsr.w	r0, r0, r2
 80a2ab6:	bf18      	it	ne
 80a2ab8:	f040 0001 	orrne.w	r0, r0, #1
 80a2abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2ac8:	ea40 000c 	orr.w	r0, r0, ip
 80a2acc:	fa23 f302 	lsr.w	r3, r3, r2
 80a2ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2ad4:	e7cc      	b.n	80a2a70 <__aeabi_d2f+0x14>
 80a2ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2ada:	d107      	bne.n	80a2aec <__aeabi_d2f+0x90>
 80a2adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2ae0:	bf1e      	ittt	ne
 80a2ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2aea:	4770      	bxne	lr
 80a2aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2af8:	4770      	bx	lr
 80a2afa:	bf00      	nop

080a2afc <__aeabi_f2uiz>:
 80a2afc:	0042      	lsls	r2, r0, #1
 80a2afe:	d20e      	bcs.n	80a2b1e <__aeabi_f2uiz+0x22>
 80a2b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2b04:	d30b      	bcc.n	80a2b1e <__aeabi_f2uiz+0x22>
 80a2b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2b0e:	d409      	bmi.n	80a2b24 <__aeabi_f2uiz+0x28>
 80a2b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2b18:	fa23 f002 	lsr.w	r0, r3, r2
 80a2b1c:	4770      	bx	lr
 80a2b1e:	f04f 0000 	mov.w	r0, #0
 80a2b22:	4770      	bx	lr
 80a2b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2b28:	d101      	bne.n	80a2b2e <__aeabi_f2uiz+0x32>
 80a2b2a:	0242      	lsls	r2, r0, #9
 80a2b2c:	d102      	bne.n	80a2b34 <__aeabi_f2uiz+0x38>
 80a2b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2b32:	4770      	bx	lr
 80a2b34:	f04f 0000 	mov.w	r0, #0
 80a2b38:	4770      	bx	lr
 80a2b3a:	bf00      	nop

080a2b3c <__cxa_atexit>:
 80a2b3c:	b510      	push	{r4, lr}
 80a2b3e:	4c05      	ldr	r4, [pc, #20]	; (80a2b54 <__cxa_atexit+0x18>)
 80a2b40:	4613      	mov	r3, r2
 80a2b42:	b12c      	cbz	r4, 80a2b50 <__cxa_atexit+0x14>
 80a2b44:	460a      	mov	r2, r1
 80a2b46:	4601      	mov	r1, r0
 80a2b48:	2002      	movs	r0, #2
 80a2b4a:	f3af 8000 	nop.w
 80a2b4e:	bd10      	pop	{r4, pc}
 80a2b50:	4620      	mov	r0, r4
 80a2b52:	bd10      	pop	{r4, pc}
 80a2b54:	00000000 	.word	0x00000000

080a2b58 <memcpy>:
 80a2b58:	b510      	push	{r4, lr}
 80a2b5a:	1e43      	subs	r3, r0, #1
 80a2b5c:	440a      	add	r2, r1
 80a2b5e:	4291      	cmp	r1, r2
 80a2b60:	d004      	beq.n	80a2b6c <memcpy+0x14>
 80a2b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b6a:	e7f8      	b.n	80a2b5e <memcpy+0x6>
 80a2b6c:	bd10      	pop	{r4, pc}

080a2b6e <memset>:
 80a2b6e:	4603      	mov	r3, r0
 80a2b70:	4402      	add	r2, r0
 80a2b72:	4293      	cmp	r3, r2
 80a2b74:	d002      	beq.n	80a2b7c <memset+0xe>
 80a2b76:	f803 1b01 	strb.w	r1, [r3], #1
 80a2b7a:	e7fa      	b.n	80a2b72 <memset+0x4>
 80a2b7c:	4770      	bx	lr
	...

080a2b80 <srand>:
 80a2b80:	b538      	push	{r3, r4, r5, lr}
 80a2b82:	4b12      	ldr	r3, [pc, #72]	; (80a2bcc <srand+0x4c>)
 80a2b84:	4605      	mov	r5, r0
 80a2b86:	681c      	ldr	r4, [r3, #0]
 80a2b88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b8a:	b9d3      	cbnz	r3, 80a2bc2 <srand+0x42>
 80a2b8c:	2018      	movs	r0, #24
 80a2b8e:	f7fe fe7f 	bl	80a1890 <malloc>
 80a2b92:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2b96:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2b98:	8003      	strh	r3, [r0, #0]
 80a2b9a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2b9e:	8043      	strh	r3, [r0, #2]
 80a2ba0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2ba4:	8083      	strh	r3, [r0, #4]
 80a2ba6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2baa:	80c3      	strh	r3, [r0, #6]
 80a2bac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2bb0:	8103      	strh	r3, [r0, #8]
 80a2bb2:	2305      	movs	r3, #5
 80a2bb4:	8143      	strh	r3, [r0, #10]
 80a2bb6:	230b      	movs	r3, #11
 80a2bb8:	8183      	strh	r3, [r0, #12]
 80a2bba:	2201      	movs	r2, #1
 80a2bbc:	2300      	movs	r3, #0
 80a2bbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2bc4:	2200      	movs	r2, #0
 80a2bc6:	611d      	str	r5, [r3, #16]
 80a2bc8:	615a      	str	r2, [r3, #20]
 80a2bca:	bd38      	pop	{r3, r4, r5, pc}
 80a2bcc:	20000364 	.word	0x20000364

080a2bd0 <strlen>:
 80a2bd0:	4603      	mov	r3, r0
 80a2bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2bd6:	2a00      	cmp	r2, #0
 80a2bd8:	d1fb      	bne.n	80a2bd2 <strlen+0x2>
 80a2bda:	1a18      	subs	r0, r3, r0
 80a2bdc:	3801      	subs	r0, #1
 80a2bde:	4770      	bx	lr

080a2be0 <dynalib_user>:
 80a2be0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2bf0:	0000 0000                                   ....

080a2bf4 <CSWTCH.215>:
 80a2bf4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2c04:	0050 0000                                   P...

080a2c08 <_ZTV7TwoWire>:
	...
 80a2c10:	18c9 080a 1913 080a 18eb 080a 18cb 080a     ................
 80a2c20:	18f3 080a 18fb 080a 1903 080a 190b 080a     ................

080a2c30 <_ZTV9IPAddress>:
	...
 80a2c38:	195b 080a 194d 080a 194f 080a 0066 6e6c     [...M...O...f.ln
 80a2c48:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a2c58:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a2c68:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a2c78:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a2c88:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a2c98:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a2ca8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a2cb8:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a2cc8:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a2cd8:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a2ce8:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a2cf8:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a2d08:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2d18:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2d28 <_ZTV8SPIClass>:
	...
 80a2d30:	1aa5 080a 1aa7 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2d40:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2d50:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2d60:	0000 0000                                   ....

080a2d64 <_ZTV11USARTSerial>:
	...
 80a2d6c:	1b39 080a 1b5d 080a 1b69 080a 19d1 080a     9...]...i.......
 80a2d7c:	1b45 080a 1b51 080a 1b4b 080a 1b57 080a     E...Q...K...W...
 80a2d8c:	1b3b 080a 1b3f 080a                         ;...?...

080a2d94 <_ZTV9USBSerial>:
	...
 80a2d9c:	1c11 080a 1c55 080a 1c2f 080a 19d1 080a     ....U.../.......
 80a2dac:	1c29 080a 1c13 080a 1c1b 080a 1c4f 080a     )...........O...
 80a2dbc:	1c23 080a 1c0d 080a                         #.......

080a2dc4 <_ZTVN5spark9WiFiClassE>:
	...
 80a2dcc:	1d7b 080a                                   {...

080a2dd0 <__sf_fake_stdin>:
	...

080a2df0 <__sf_fake_stdout>:
	...

080a2e10 <__sf_fake_stderr>:
	...
 80a2e30:	0043                                        C.

080a2e32 <link_const_variable_data_end>:
	...

080a2e34 <link_constructors_location>:
 80a2e34:	080a02d1 	.word	0x080a02d1
 80a2e38:	080a1611 	.word	0x080a1611
 80a2e3c:	080a19c1 	.word	0x080a19c1
 80a2e40:	080a1a89 	.word	0x080a1a89
 80a2e44:	080a1ae5 	.word	0x080a1ae5
 80a2e48:	080a1b25 	.word	0x080a1b25
 80a2e4c:	080a1d85 	.word	0x080a1d85
 80a2e50:	080a1fb9 	.word	0x080a1fb9
 80a2e54:	080a1fe9 	.word	0x080a1fe9
 80a2e58:	080a2039 	.word	0x080a2039
 80a2e5c:	080a20fd 	.word	0x080a20fd
 80a2e60:	080a2181 	.word	0x080a2181
 80a2e64:	080a2205 	.word	0x080a2205

080a2e68 <link_constructors_end>:
	...
